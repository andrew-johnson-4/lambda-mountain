
# .without-phi-keep-state preserves phi state at top level
# Example:
# A + Phi::Id<A>.    WILL be removed
# A + Phi::State<A>. WILL NOT be removed
# B<Phi::State<A>>.  WILL be removed

let .without-phi-keep-state(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            c = c.without-phi-keep-state;
            if non-zero(c) then result = result.push(c);
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround { tag:c"Cons", parameters:[p2..p1..] } => t2(c"Cons",p1.without-phi-keep-state,p2.without-phi-keep-state);
      TGround { tag:c"Arrow", parameters:[rng..dom..] } => t2(c"Arrow",dom.without-phi-keep-state,rng.without-phi-keep-state);
      TGround { tag:c"Phi::Id", parameters:[_..] } => ta;
      TGround { tag:c"Phi::Transition", parameters:[_.._..] } => ta;
      TGround { tag:c"Phi::Initialize", parameters:[_..] } => ta;
      TGround { tag:c"Phi::State", parameters:[_..] } => tt;
      TGround { tag=tag, parameters=parameters } => ts(tag, parameters.without-phi);
      _ => tt;
   }
);
