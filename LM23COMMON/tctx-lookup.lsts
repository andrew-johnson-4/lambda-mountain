
let .lookup(tctx: TypeContext?, key: CString): TypeContextRow = tctx.get-or(mk-tctx()).tctx.lookup(key);
let .lookup(trs: List<TypeContextRow>, key: CString): TypeContextRow = (
   let default = NullTypeContextRow;
   let continue = true;
   for tr in trs { if continue {
      if tr.key == key {
         default = tr;
         continue = false;
      }
   }};
   if not(non-zero(default)) {
      for tr in global-tctx.lookup(key, [] : List<TypeContextRow>) {
         if tr.key == key {
            if non-zero(default) {
               eprint("Duplicate Global Symbol \{key}\n");
               eprint("At \{default.blame.location}\n");
               eprint("And \{tr.blame.location}\n");
               exit(1);
            };
            default = tr;
         }
      };
   };
   default
);

let .lookup-phi(tctx: TypeContext?, key: CString): PhiContextRow = tctx.get-or(mk-tctx()).pctx.lookup(key);
let .lookup(trs: List<PhiContextRow>, key: CString): PhiContextRow = (
   let default = NullPhiContextRow;
   let continue = true;
   for tr in trs { if continue {
      if tr.phi-id == key {
         default = tr;
         continue = false;
      }
   }};
   default
);
