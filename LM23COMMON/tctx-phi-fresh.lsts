
let .phi-fresh(tctx: TypeContext?, tt: Type, blame: AST): (TypeContext?, Type) = (
   let old-phi-id = tt.slot(c"Phi::Id",1).l1.simple-tag;
   let old-phi-state = tt.slot(c"Phi::State",1).l1;
   if non-zero(old-phi-id) and non-zero(old-phi-state)
   then {
      let new-phi-id = uuid();
      tctx = tctx.bind-phi(new-phi-id, old-phi-state, blame);
      tt = tt.without-slot(c"Phi::Id",1) && t1(c"Phi::Id",t0(new-phi-id));
   };
   (tctx, tt)
);

let .phi-fresh(tctx: TypeContext?, tr: TypeContextRow): (TypeContext?, TypeContextRow) = (
   match tr {
      TypeContextRow{ key=key, nt=nt, dt=dt, blame=blame } => (
         (tctx, nt) = tctx.phi-fresh(nt, blame);
         (tctx, dt) = tctx.phi-fresh(dt, blame);
         (tctx, TypeContextRow(key,nt,dt,blame))
      );
      _ => (tctx, tr);
   }
);
