
let .into(tt: Type, tgt: Type<String>): String = (
   match tt {
      TAny{} => "?";
      TVar{name=name} => intern(name);
      TGround{tag:c"Array",parameters:[TAny{}.. base-type..]} => "\{base-type}[]";
      TGround{tag:c"Array",parameters:[idx-type.. base-type..]} => "\{base-type}[\{idx-type}]";
      TGround{tag=tag,parameters=parameters} => (
         let r = if tag[0] >= 97 and tag[0] <= 122 then intern("\"\{tag}\"") else intern(tag);
         if parameters.length > 0 {
            let pc = 0_u64;
            r = r + "<";
            for p in parameters.reverse {
               if pc > 0 { r = r + ","; };
               r = r + p.into(type(String));
               pc = pc + 1;
            };
            r = r + ">";
         }; r
      );
      TAnd{conjugate=conjugate} => (
         let result = "";
         let ci = 0_u64;
         for c in conjugate {
            result = result + c.into(type(String));
            ci = ci + 1;
            if ci != conjugate.length then result = result + " + ";
         };
         result
      );
   }
);

let .pretty(tt: Type): String = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let result = "";
         for c in conjugate {
            if non-zero(result) then (result = result + " + \n" + c.into(type(String)))
            else (result = c.into(type(String)));
         };
         result
      );
      _ => tt.into(type(String));
   }
);
