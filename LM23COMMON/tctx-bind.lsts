
let .bind(tctx: TypeContext?, k: CString, kt: Type, blame: AST): TypeContext? = (
   Some(TypeContext(
      cons( TypeContextRow(k, kt, kt, blame), tctx.get-or(mk-tctx()).tctx ),
      tctx.get-or(mk-tctx()).pctx,
      tctx.get-or(mk-tctx()).is-unsafe,
      tctx.get-or(mk-tctx()).is-blob,
      tctx.get-or(mk-tctx()).function-name
   ));
);

let .bind-global(tctx: TypeContext?, k: CString, kt: Type, blame: AST): TypeContext? = (
   let found = global-tctx.lookup(k, [] : List<TypeContextRow>);
   found = cons( TypeContextRow(k,kt,kt,blame), found );
   global-tctx = global-tctx.bind(k, found);
   tctx
);

let .bind-phi(tctx: TypeContext?, k: CString, kt: Type, blame: AST): TypeContext? = (
   Some(TypeContext(
      tctx.get-or(mk-tctx()).tctx,
      cons( PhiContextRow(k,kt,blame) , tctx.get-or(mk-tctx()).pctx ),
      tctx.get-or(mk-tctx()).is-unsafe,
      tctx.get-or(mk-tctx()).is-blob,
      tctx.get-or(mk-tctx()).function-name
   ));
);
