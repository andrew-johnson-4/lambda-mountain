
let .substitute(tctx: TypeContext?, tt: List<Type>): List<Type> = (
   match tt {
      LCons{head=head,tail=tail} => cons( tctx.substitute(head), tctx.substitute(tail) );
      _ => tt;
   }
);

let .substitute(tctx: TypeContext?, tt: Type): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match tctx.substitute(c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag=tag,parameters=parameters} => TGround(tag,close(tctx.substitute(parameters)));
      TVar{name=name} => (
         let tn = tctx.lookup(name).direct-type;
         if non-zero(tn) then tn else tt;
      );
      _ => tt;
   }
);
