
let unify(fpt: Type, pt: Type, blame: AST): Maybe<TypeContext> = (
   let ctx = (None : Maybe<TypeContext>)();
   if can-unify(fpt, pt) {
      ctx = unify-inner(fpt, pt, blame);
   };
   ctx
);

let unify-inner(fpt: Type, pt: Type, blame: AST): Maybe<TypeContext> = (
   let ctx = (None : Maybe<TypeContext>)();
   let yes = Some(mk-tctx());
   let no = (None : Maybe<TypeContext>)();
   match (Tuple(fpt, pt)) {
      Tuple{ first:TAny{} } => ctx = yes;
      Tuple{ first:TGround{tag:c"Any"} } => ctx = yes;
      Tuple{ first:TGround{tag:c"MustNotRetain"} } => ctx = yes;
      Tuple{ first:TGround{tag:c"MustNotMove"} } => ctx = yes;
      Tuple{ first:TGround{tag:c"MustReleaseAfterCall"} } => ctx = yes;
      Tuple{ first:TGround{tag:c"MustNotRewrite"} } => ctx = yes;
      Tuple{ first:TVar{}, second:TGround{tag:c"Cons"} } => ctx = no;
      Tuple{ first:TVar{name=name}, second:TGround{tag=tag} } => (
         ctx = ctx.bind(name, ta, pt, Lit(tag, mk-token(tag)));
      );
      Tuple{ first:TVar{name=name} } => (
         ctx = ctx.bind(name, ta, pt, mk-eof());
      );
      Tuple{ first:TAnd{ lconjugate=conjugate }, second:TAnd{ rconjugate=conjugate } } => (
         let result = yes;
         let ri = 0_u64;
         let phi-id = c"";
         let phi-state-in = ta;
         let phi-state-out = ta;
         for lc in lconjugate {
            if result.is-some then (match lc {
               TGround{tag:c"Any"} => ();
               TGround{tag:c"MustNotRetain"} => ();
               TGround{tag:c"MustNotMove"} => ();
               TGround{tag:c"MustReleaseAfterCall"} => ();
               TGround{tag:c"MustNotRewrite"} => ();
               TGround{tag:c"Phi::Transition", parameters:[phi-to..phi-from..]} => (
                  for st in rconjugate { match st {
                     TGround{tag:c"Phi::Id",parameters:[TGround{new-phi-id=tag}..]} => (
                        phi-id = new-phi-id;
                     );
                     TGround{tag:c"Phi::State",parameters:[new-phi-state..]} => (
                        phi-state-in = phi-state-in && new-phi-state;
                     );
                     _ => ();
                  }};
                  if can-unify(phi-from, phi-state-in)
                  then (
                     result = result && unify(phi-from, phi-state-in, blame);
                     phi-state-out = phi-state-out && phi-to;
                  );
               );
               TGround{ltag=tag} => (
                  let this-result-ok = no;
                  let rc = rconjugate[ri];
                  let rtag = rc.simple-tag;
                  if not(non-zero(rtag)) then () else (
                     while ri<rconjugate.length and rtag < ltag {
                        ri = ri + 1;
                        if ri < rconjugate.length {
                           rc = rconjugate[ri];
                           rtag = rc.simple-tag;
                        }
                     };
                     let scan-ri = ri;
                     while scan-ri<rconjugate.length and rtag==ltag {
                        this-result-ok = this-result-ok || unify(lc,rc,blame);
                        scan-ri = scan-ri + 1;
                        if scan-ri < rconjugate.length {
                           rc = rconjugate[scan-ri];
                           rtag = rc.simple-tag;
                        }
                     };
                  );
                  result = result && this-result-ok;
               );
               _ => result = result && unify(lc,pt,blame);
            });
         };
         if non-zero(phi-id) and non-zero(phi-state-out) then {
            result = result.bind-phi(phi-id, phi-state-out, blame);
         };
         ctx = result;
      );
      Tuple{ first:TAnd{ lconjugate=conjugate }, rt=second } => (
         ctx = yes;
         for c in lconjugate { ctx = ctx && unify-inner(c,rt,blame) };
         ctx
      );
      Tuple{ lt=first, second:TAnd{ rconjugate=conjugate } } => (
         ctx = yes;
         for c in rconjugate { ctx = union(ctx, unify-inner(lt,c,blame)) };
         ctx
      );

      # Ignore C Access Modifiers For Now
      Tuple{ first:TGround{tag:c"C", parameters:[TGround{tag:c"const"}..]} } => yes;

      # Varargs
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         ctx = unify-inner(lpr, pt, blame);
      );
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:rp1
      } => (
         if can-unify(lp1, rp1)
         then { ctx = unify-inner(lp1,rp1,blame) && unify-inner(lpr, t0(c"Nil"), blame); }
         else { ctx = unify-inner(lpr,rp1,blame); }
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         if can-unify(lp1,rp1) { ctx = unify-inner(fpt,rpr,blame) && unify-inner(lp1,rp1,blame); };
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Nil", parameters:[]}
      } => ctx = yes;
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:rp1
      } => ctx = unify-inner(lp1,rp1,blame);

      Tuple{
          first:TGround{tag:c"Arrow", parameters:[lrng.. ldom..]},
          second:TGround{tag:c"Arrow", parameters:[rrng.. rdom..]}
      } => (
          let tctx = unify-inner(rdom, ldom, blame);
          if tctx.is-some {
            if rdom.is-open {
               ctx = tctx && unify-inner(lrng, tctx.substitute(rrng), blame);
            } else {
               ctx = tctx && unify-inner(lrng, rrng, blame)
            }
         }
      );

      Tuple{
          first:TGround{ltn=tag, lps=parameters},
          second:TGround{rtn=tag, rps=parameters}
      } => if (ltn==rtn || (ltn.has-suffix(c"::") and rtn.has-prefix(ltn))) then { ctx = unify(lps,rps,blame) };
      _ => ();
   };
   ctx
);

let unify(fpt: List<Type>, pt: List<Type>, blame: AST): Maybe<TypeContext> = (
   let ctx = (None : Maybe<TypeContext>)();
   let yes = Some(mk-tctx());
   match Tuple( fpt, pt ) {
      Tuple{ first:[lp1..lps], second:[rp1..rps] } => (
         ctx = unify-inner(lp1,rp1,blame);
         if non-zero(ctx) { ctx = union(ctx, unify(lps,rps,blame)); }
      );
      Tuple{ first:[], second:[] } => ctx = yes;
      Tuple{} => ();
   };
   ctx
);

