
plugins-backend-blob-compile := Î». (: (
   (for-each-v (p in (.unroll-seq ast-parsed-program)) (match p (
      ()
      ( (Glb( k_t rhs )) (
         (match rhs (
            ()
            ( (Abs( _ _ _ )) (
               (let fragment (mk-fragment()))
               (set fragment (.set( fragment 'fragment-type_s (SAtom 'Function_s) )))
               (set.term( fragment rhs ))
               (set.type( fragment (typeof rhs) ))
               (set global-ctx (.bind(
                  global-ctx k (typeof rhs) fragment
               )))
            ))
            ( _ () )
         ))
      ))
      ( _ () )
   )))
   (let blob (SNil()))
   (for-each-v (p in (.unroll-seq ast-parsed-program)) (match p (
      ()
      ( (Glb( k_t rhs )) () )
      ( (Meta( _ )) () )
      ( expr (
         (let cs (blob-render-simple( global-ctx 'expression_s expr )))
         (let s (.1 cs))
         (set blob (SCons(
             (close blob)
             (close s)
         )))
      ))
   )))
   (set assemble-final (clone-rope(escape-string blob)))
   (std-c-compile-write())
) Nil);


