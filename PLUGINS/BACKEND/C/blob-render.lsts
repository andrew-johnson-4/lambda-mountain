
let blob-render-simple(ctx: FContext, context-key: CString, term: AST): (FContext, AST) = (
   let r = SNil;
   match {
      ASTNil{} => ();
      ASTEOF{} => ();
      Var{key=key} => r = ctx.lookup(key, typeof(term), term).get(context-key);
      Lit{key=key} => r = SAtom(key);
      App{ left:Lit{key:c":"}, right:App{ t=left, right:AType{tt=tt} } } => r = blob-render-simple(ctx, context-key, t).second;
      App{ left:Lit{key:c"as"}, right:App{ t=left, right:AType{tt=tt} } } => r = blob-render-simple(ctx, context-key, t).second;
      App{ left:Lit{key:c"scope"}, t=right } } => r = blob-render-simple(ctx, context-key, t).second;
      App{ 
         left:App{ left:Lit{key:c":"}, right:App{ left:Lit{key:c"for-arg"}, right:AType{} } },
         right:App{
            left:App{
               left:Abs{ lhs-t=lhs:Var{lhs=key}, rhs:ASTNil{} },
               right:App{ left:Var{key:c"for-arg-i"}, right:Var{vsk=key} }
            }, iter=right
         }
      } => (
         let vs = ctx.lookup-soft(ctx, vsk, ta, mk-eof());
         for vi in vs.vararg {
            std-c-fragment-context = std-c-fragment-context.bind(lhs-t, vi);
            let inner-ctx = ctx.bind(lhs, vs.type, vi);
            r = r + blob-render-simple(inner-ctx, context-key, iter).second;
         };
      );
      App{ 
         left:App{ left:Lit{key:c":"}, right:App{ left:Lit{key:c"for-atom"}, right:AType{} } },
         right:App{
            left:App{
               left:Abs{ lhs-t=lhs:Var{lhs=key}, rhs:ASTNil{} },
               rng=right
            }, iter=right
         }
      } => (
         let rngs = blob-render-simple(ctx, context-key, rng).second;
         while non-zero(rngs) { match rngs {
            SCons{ a=left, rst=right } => (
               let f = mk-expression(a);
               let inner-ctx = ctx.bind(lhs, t1(c"L"), f);
               std-c-fragment-context = std-c-fragment-context.bind(lhs-t,f);
               r = r + blob-render-simple(inner-ctx, context-key, iter).second;
               rngs = rst;
            );
            _ => rngs = SNil;
         }}
      );
      App{ left:Var{key:c"range"}, right:App{ le=left, re=right } } => (
         let ls = blob-render-simple(ctx, context-key, le).second;
         let rs = blob-render-simple(ctx, context-key, re).second;
         let li = to-i64(clone-rope(ls));
         let ri = to-i64(clone-rope(rs));
         while li < ri {
            ri = ri - 1;
            r = SCons( close(SAtom(to-string(ri))), close(r) );
         }
      );
      App{ left:Var{key:c"uuid"} } => r = SAtom(uuid());
   }
);

      ( (App( (Var( 'uuid_s _ )) _ )) (
         (set r (SAtom(uuid())))
      ))
      ( (App( (Var( 'mangle_s _ )) (App( (Lit( ':_s _ )) (App( (Lit( id _ )) (AType _) )) )) )) (
         (set r (mangle-identifier id))
      ))
      ( (App( (Var( 'mangle-pre_s _ )) (AType tt) )) (
         (set r (.first(std-c-mangle-declaration-internal( (.l1 tt) term ))))
      ))
      ( (App( (Var( 'mangle-post_s _ )) (AType tt) )) (
         (set r (.second(std-c-mangle-declaration-internal( (.l1 tt) term ))))
      ))
      ( (App( (Var( '==_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (if (==( ls rs )) (set r (SAtom '1_s)) (set r (SAtom '0_s)) )
      ))
      ( (App( (Var( '>_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (if (>( li ri )) (set r (SAtom '1_s)) (set r (SAtom '0_s)) )
      ))
      ( (App( (Var( '/_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (set r (SAtom(to-string(/( li ri )))))
      ))
      ( (App( (Var( '*_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (set r (SAtom(to-string(*( li ri )))))
      ))
      ( (App( (Var( '%_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (set r (SAtom(to-string(%( li ri )))))
      ))
      ( (App( (Var( '+_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (set r (SAtom(to-string(+( li ri )))))
      ))
      ( (App( (Var( '-_s _ )) (App( le re )) )) (
         (let lcs (blob-render-simple( ctx context-key le offset )))
         (let ls (.1 lcs))
         (let rcs (blob-render-simple( ctx context-key re offset )))
         (let rs (.1 rcs))
         (let li (to-i64(clone-rope ls)))
         (let ri (to-i64(clone-rope rs)))
         (set r (SAtom(to-string(-( li ri )))))
      ))
      ( (App( (App( (App( (Var( 'if_s _ )) cond )) t )) f )) (
         (let ccs (blob-render-simple( ctx context-key cond offset )))
         (let cs (.1 ccs))
         (match cs (
            ()
            ( (SAtom '1_s) (
               (let rcs (blob-render-simple( ctx context-key t offset )))
               (set r (.1 rcs))
            ))
            ( _ (
               (let rcs (blob-render-simple( ctx context-key f offset )))
               (set r (.1 rcs))
            ))
         ))
      ))
      ( (App( (Abs( (@( lhs-t (Var( lhs _ )) )) ASTNil tlt )) rhs )) (
         (let f (mk-fragment()))
         (let cs (blob-render-simple( ctx context-key rhs offset )))
         (let s (.1 cs))
         (set f (.set( f context-key s )))
         (set f (.set( f 'expression_s s )))
         (set ctx (.bind(
            ctx lhs (typeof rhs) f
         ))) # TODO, render the binding as non-simple blob?
         (set std-c-fragment-context (.bind( std-c-fragment-context lhs-t f )))
      ))
      ( (App( f a )) (
         (if (.is-arrow(typeof f)) (
            (match f (
               ()
               ( (Var( fname _ )) (
                  (if (.has-prefix( fname ':_s )) (
                     (let e1 (blob-render-simple( ctx (tail-string fname) a offset )))
                     (set r (.1 e1))
                  ) (
                     (let e (std-c-compile-call( ctx fname a )))
                     (set r (.get( e context-key )))
                  ))
               ))
               ( _ (
                  (let e1 (blob-render-simple( ctx context-key f offset )))
                  (set ctx (.2 e1))
                  (let e2 (blob-render-simple( ctx context-key a offset )))
                  (set ctx (.2 e2))
                  (let s1 (.1 e1))
                  (let s2 (.1 e2))
                  (set r (+( s1 s2 )))
               ))
            ))
         ) (
            (let e1 (blob-render-simple( ctx context-key f offset )))
            (set ctx (.2 e1))
            (let e2 (blob-render-simple( ctx context-key a offset )))
            (set ctx (.2 e2))
            (let s1 (.1 e1))
            (let s2 (.1 e2))
            (set r (+( s1 s2 )))
         ))
      ))
      ( (AType tt) (
         (set r (std-c-mangle-type( tt term )))
      ))
      ( orphan (
         (print 'Orphan\sTerm\sIn\sblob-render\s_s)(std-c-print orphan)(print '\n_s)(exit 1_u64)
      ))
   ))
   (Tuple( ctx r ))
) Tuple<FContext,S>);

blob-render := Î»(: ctx FContext)(: term AST)(: f Fragment)(: offset I64). (: (
   (match term (
      ()
      ( (App( (Lit( ':_s _ )) (App( t (AType _) )) )) (
         (set f (blob-render( ctx t f offset )))
      ))
      ( (App( (Var( k _ )) a )) (
         (if (.has-prefix( k ':_s )) (            
            (let cs1 (blob-render-simple( ctx (tail-string k) a offset )))
            (let s1 (.1 cs1))
            (set f (.set( f (tail-string k) s1 )))
         ) (
            (let cs2 (blob-render-simple( ctx 'expression_s term offset )))
            (let s2 (.1 cs2))
            (set f (.set( f 'expression_s s2 )))
         ))
      ))
      ( (App( rst (App( (Var( k _ )) a )) )) (
         (set f (blob-render( ctx rst f offset )))
         (if (.has-prefix( k ':_s )) (            
            (let cs1 (blob-render-simple( ctx (tail-string k) a offset )))
            (let s1 (.1 cs1))
            (set f (.set( f (tail-string k) s1 )))
         ) (
            (let cs2 (blob-render-simple( ctx 'expression_s term offset )))
            (let s2 (.1 cs2))
            (set f (.set( f 'expression_s s2 )))
         ))
      ))
      ( _ (
         (let cs2 (blob-render-simple( ctx 'expression_s term offset )))
         (let s2 (.1 cs2))
         (set f (.set( f 'expression_s s2 )))
      ))
   ))
   f
) Fragment);
