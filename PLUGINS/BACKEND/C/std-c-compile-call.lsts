
let std-c-compile-call(ctx: FContext, fname: CString, args: AST): Fragment = std-c-compile-call(ctx, fname, ta, args);

let std-c-compile-call(ctx: FContext, fname: CString, return-hint-if-constructor: Type, args: AST): Fragment = (
   let fterm = if non-zero(return-hint-if-constructor) {
      find-global-constructor(fname, return-hint-if-constructor, typeof(args), args);
   } else {
      find-global-callable(fname, typeof(args), args);
   };
   if not(non-zero(fterm)) then fail("std-c-compile-call Function was null: \{fterm}\nArguments: \{typeof(args)}\n");
   if typeof(fterm).is-t(c"Blob") {
      let r = mk-fragment();
      match fterm {
         Glb{val:Abs{lhs=lhs, rhs=rhs}} => (
            (let callee-ctx, let caller-ctx) = std-c-compile-args(global-ctx, ctx, lhs, args);
            r = blob-render(callee-ctx, rhs, r);
            r.context = close(caller-ctx);
         );
         _ => fail("Unexpected fterm in std-c-compile-call: \{fname}\n\{fterm}\n");
      }; r
   } else if typeof(fterm).is-t(c"Prop") { std-c-compile-expr(ctx, args, false)
   } else {
      let push-args = std-c-compile-push-args(ctx, args);
      let function-id = if typeof(fterm).is-t(c"FFI") || typeof(fterm).is-t(c"C-FFI")
                        then fname else mangle-identifier(fname, typeof(fterm));
      let ictx = mk-fragment().set(c"function-id", SAtom(function-id));
      let inner-ctx = mk-fctx().bind(c"ictx", t1(c"ImplicitContext"), ictx)
                               .bind(c"args", typeof(args), push-args);
      let r = mk-fragment();
      match find-global-callable(c"primitive::call", t3(c"Cons",t1(c"ImplicitContext"),typeof(args)), args) {
         Glb{val:Abs{lhs=lhs, rhs=rhs}} => (
            r = blob-render(inner-ctx, rhs, r);
            r.context = close(ctx);
         );
         _ => fail("Unexpected fterm in std-c-compile-call: \{fname}\n\{fterm}\n");
      }; r
   }
);


