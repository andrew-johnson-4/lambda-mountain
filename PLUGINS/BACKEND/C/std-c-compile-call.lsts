
let std-c-compile-call(ctx: FContext, fname: CString, args: AST): Fragment = std-c-compile-call(ctx, fname, ta, args);

let std-c-compile-call(ctx: FContext, fname: CString, return-hint-if-constructor: Type, args: AST): Fragment = (
   let fterm = Some(mk-tctx()).maybe-find-callable(fname, typeof-term(args), args, return-hint-if-constructor)
                              .expect("std-c-compile-call Function was null\nArguments: \{typeof-term(args)}\n").blame;
   if typeof-term(fterm).is-t(c"Blob",0) {
      if typeof-term(fterm).is-open then exit-error("STD C compile call is open \{fname} (\{typeof-term(args)})\n\{typeof-term(fterm)}\n", args);
      let r = mk-fragment();
      match fterm {
         Glb{val:Abs{lhs=lhs, rhs=rhs}} => (
            (let callee-ctx, let caller-ctx) = std-c-compile-args(global-ctx, ctx, lhs, args);
            r = blob-render(callee-ctx, rhs, r);
            r.context = close(caller-ctx);
         );
         _ => fail("Unexpected fterm in std-c-compile-call: \{fname}\n\{fterm}\n");
      }; r
   } else if typeof-term(fterm).is-t(c"Prop",0) { std-c-compile-expr(ctx, args, false)
   } else {
      if typeof-term(fterm).is-open then exit-error("STD C compile call is open \{fname} (\{typeof-term(args)})\n\{typeof-term(fterm)}\n", args);
      let push-args = std-c-compile-push-args(ctx, args);
      let function-id = if typeof-term(fterm).is-t(c"FFI",0) || typeof-term(fterm).is-t(c"C-FFI",0)
                        then fname else mangle-identifier-function(fname, typeof-term(fterm));
      let ictx = mk-fragment().set(c"function-id", SAtom(function-id));
      let inner-ctx = mk-fctx().bind(c"ictx", t0(c"ImplicitContext"), ictx)
                               .bind(c"args", typeof-term(args), push-args);
      let r = mk-fragment();
      match Some(mk-tctx()).find-callable(c"primitive::call", t2(c"Cons",t0(c"ImplicitContext"),typeof-term(args)), args).blame {
         Glb{val:Abs{lhs=lhs, rhs=rhs}} => (
            r = blob-render(inner-ctx, rhs, r);
            r.context = close(ctx);
         );
         _ => fail("Unexpected fterm in std-c-compile-call: \{fname}\n\{fterm}\n");
      }; r
   }
);


