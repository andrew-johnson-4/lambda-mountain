
let compile-smart-string-index = {} : HashtableEq<CString,CString>;

let std-c-compile-smart-string(ctx: FContext, val: CString, blame: AST): Fragment = (
   let guid = compile-smart-string-index.lookup(val,c"");
   if non-zero(guid) then mk-expression(guid) else {
      guid = uuid();
      compile-smart-string-index = compile-smart-string-index.bind(val,guid);
      let lit = mk-lit(val); ascript-normal(lit, t1(c"CString"));
      let intern-ss = std-c-compile-call(ctx, c"intern", lit);
      assemble-header-section = assemble-header-section +
      std-c-mangle-type(t1(c"String"), blame) + SAtom(c" ") + SAtom(guid) + SAtom(c";\n");
      assemble-string-initializer-section = assemble-string-initializer-section +
      SAtom(guid) + SAtom(c"=") + intern-ss.get(c"expression") + SAtom(c";\n");
      mk-expression(SAtom(guid));
   }
);

let std-c-compile-expr(ctx: FContext, t: AST, is-stmt: Bool): Fragment = (
   let f = match t {
      Var{ key=key } => (
         let def = var-to-def(t);
         let e = std-c-fragment-context.lookup(def, mk-fragment());
         if not(non-zero(e)) {
            exit-error( untern("Unable to Find Variable Fragment in Context: \{key}"), t );
         }; e
      );
      AType{ tt=tt } => (
         if tt.is-t(c"Type") {
            mk-fragment().set(c"expression",SAtom(c"0"));
         } else {
            mk-fragment().set(c"expression",std-c-mangle-type(tt, t));
         }
      );
      App{ left:Abs{lhs=lhs:Var{name=key}, rhs:ASTNil{}}, rhs=right } => (
         let lt = typeof-term(lhs).without-modifiers;
         let v = mk-fragment().set(c"expression",if std-c-is-ctype(lt) then SAtom(name) else SAtom(uuid()));
         let f = mk-fragment();
         std-c-fragment-context = std-c-fragment-context.bind( lhs, v );
         ctx = ctx.bind( name, lt, v );
         if lt.is-t(c"C") && lt.slot(c"C").r1.is-t(c":Label") {
            f = f.set(c"expression", v.get(c"expression") + SAtom(c":"));
         } else {
            (let pre, let post) = std-c-mangle-declaration(lt, t);
            f = f.set(c"frame", f.get(c"frame") + pre + SAtom(c" ")
                    + v.get(c"expression")
                    + SAtom(c" ") + post + SAtom(c";"));
         };
         match rhs {
            App{ left:Lit{key:c":"}, right:App{ left:Var{key:c"__uninitialized"}, right:AType{tt=tt} } } => ();
            _ => (
               let rf = std-c-compile-expr(ctx, rhs, false);
               f = f.set(c"frame", f.get(c"frame") + rf.get(c"frame"));
               f = f.set(c"expression", SAtom(c"({")
                 + v.get(c"expression")
                 + SAtom(c"=") + rf.get(c"expression") + SAtom(c";({});})"));
            );
         };
         f.context = close(ctx); f
      );
      App{ left:Var{key:c"as"}, right:App{ inner=left, right:AType{tt=tt} } } => (
         let f = std-c-compile-expr(ctx, inner, false);
         f.set(c"expression", SAtom(c"((") + std-c-mangle-type(typeof-term(t), t) + SAtom(c")") +
            f.get(c"expression") + SAtom(c")")
         );
      );
      App{ left:App{left:App{left:Var{key:c"if"}, cond=right}, tr=right}, fa=right } => (
         let ec = std-c-compile-call(ctx, c"into-branch-conditional", cond);
         let et = std-c-compile-expr( open(ec.context), tr, false );
         let ef = std-c-compile-expr( open(ec.context), fa, false );
         if typeof-term(fa).is-t(c"Never") then ef = never-as-expr(ef, typeof-term(tr), t);

         let ictx = mk-fragment();
         ctx = ctx.bind(c"ictx", t1(c"ImplicitContext"), ictx);
         ctx = ctx.bind(c"c", t1(c"BranchConditiona"), ec);
         ctx = ctx.bind(c"t", typeof-term(tr), et);
         ctx = ctx.bind(c"f", typeof-term(fa), ef);

         let a-tt = t3(c"Cons",t3(c"Cons",t3(c"Cons",t1(c"ImplicitContext"),typeof-term(fa)),typeof-term(tr)),t1(c"BranchConditional"));
         let f = cc-blob(ctx, c"primitive::if", a-tt, t);
         f.context = et.context; f
      );
      App{ o-t=left:Var{key:c"open"}, inner-term=right } => (
         let tt = typeof-term(inner-term);
         if tt.is-t(c"Array") { match tt.slot(c"Array") {
            TGround{ tag:c"Array", parameters:[_..TAny{}..] } => std-c-compile-expr(ctx, inner-term, false);
            TGround{ tag:c"Array", parameters:[TAny{}..inner-tt..] } => std-c-compile-call(ctx, c"open", inner-term);
            TGround{ tag:c"Array", parameters:[array-length..inner-tt..] } => std-c-compile-expr(ctx, inner-term, false);
         }} else std-c-compile-call(ctx, c"open", inner-term)
      );
      App{ o-t=left:Var{key:c"sizeof"}, right:AType{tt=tt} } => (
         let f = mk-expression( SAtom(c"(sizeof(") + std-c-mangle-type(tt, t) + SAtom(c"))") );
         f.context = close(ctx); f
      );
      Lit{val=key} => (
         let tt = typeof-term(t);
         if tt.is-t(c"C") && tt.r1.is-t(c"uint8_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint16_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint32_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"uint64_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int8_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int16_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int32_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c"int64_t") then mk-expression(val)
         else if tt.is-t(c"C") && tt.r1.is-t(c":Label") then mk-expression(val)
         else if tt.is-t(c"L") then mk-expression(val)
         else if tt.is-t(c"CString") then mk-expression(val.escape-as-cstring)
         else if tt.is-t(c"String") then std-c-compile-smart-string(ctx, val, t)
         else if tt.is-t(c"Regex") {
            let rgx-id = uuid();
            assemble-header-section = assemble-header-section +
            SAtom(c"regex_t ") + SAtom(rgx-id) + SAtom(c";\n");            
            assemble-global-initializer-section = assemble-global-initializer-section +
            SAtom(c"{int return_code = regcomp(&") + SAtom(rgx-id) + SAtom(c", ") +
            val.escape-as-cstring + SAtom(c", REG_EXTENDED); if(return_code){ fprintf(stderr,\"Could not compile regex.\"); exit(1);}};\n");
            mk-expression(rgx-id);
         } else if tt.is-type && tt.is-t(c"List") && val==c"LEOF" {
            std-c-compile-call(ctx, val, typeof-term(t), mk-nil());
         } else if tt.is-type && tt.is-t(c"HashtableEq") && val==c"HashtableEqEOF" {
            std-c-compile-call(ctx, val, typeof-term(t), mk-nil());
         } else { match val {
            c"True" => mk-expression(c"(1)");
            c"False" => mk-expression(c"(0)");
            c"\\t" => mk-expression(c"(9)");
            c"\\n" => mk-expression(c"(10)");
            c"\\s" => mk-expression(c"(32)");
            c"\\o" => mk-expression(c"(35)");
            c"\\`" => mk-expression(c"(39)");
            c"\\[" => mk-expression(c"(40)");
            c"\\]" => mk-expression(c"(41)");
            c"\\:" => mk-expression(c"(59)");
            _ => mk-fragment().set(c"expression",SAtom(c"(") + SAtom(val) + SAtom(c")"));
         } }
      );
      App{ left:Lit{key:c":"}, right:App{ inner-term=left, right:AType{tt=tt} } } => (
         let f = std-c-compile-expr(ctx, inner-term, false);
         is-stmt = false; f;
      );
      App{ left:Var{key:c"scope"}, inner-term=right } => (
         let f = std-c-compile-expr(ctx, inner-term, false);
         f.context = close(ctx);
         is-stmt = false; f;
      );
      App{ left:Var{key:c"c::compound"}, terms=right } => (
         let original-ctx = ctx;
         let e = mk-fragment();
         let terms-list = [] : List<AST>;
         while non-zero(terms) {match terms {
            App{left=left, right=right} => (
               terms-list = cons( right, terms-list );
               terms = left;
            );
            _ => terms = mk-eof();
         }};
         for ct in terms-list {
            let f = std-c-compile-expr(ctx, ct, true);
            ctx = open(f.context);
            e = std-c-chain( e, f, true );
         };
         e = e.set(c"expression", SAtom(c"{") + e.get(c"frame") + e.get(c"expression") + SAtom(c"}") );
         e = e.set(c"frame", SNil() );
         ctx = original-ctx;
         e
      );
      App{ is-cons=is-cons, left=left, right=right } => (
          if not(is-cons) && typeof-term(left).is-arrow {
             match left {
                Var{fname=key:c".into"} => (
                   match right {
                      App{ base=left, right:AType{tt=tt} } => (
                         if typeof-term(base).is-t(c"Type") && tt.is-t(c"String")
                         then std-c-compile-smart-string(ctx, typeof-term(base).l1.into(type(String)).into(type(CString)), t)
                         else std-c-compile-call(ctx, fname, right);
                      );
                      _ => std-c-compile-call(ctx, fname, right);
                   }
                );
                Var{fname=key} => std-c-compile-call(ctx, fname, right);
                App{ left:Lit{key:c":"}, right:App{ left:Var{fname=key}, right:AType{tt=tt} } } => std-c-compile-call(ctx, fname, right);
                Lit{fname=key} => (
                   let return-type = normalize(typeof-term(t));
                   std-c-compile-call(ctx, fname, return-type, right);
                );
                App{ left:Lit{key:c":"}, right:App{ left:Lit{fname=key}, right:AType{tt=tt} } } => (
                   let return-type = normalize(typeof-term(t));
                   std-c-compile-call(ctx, fname, return-type, right);
                );
                _ => (
                  let call = std-c-compile-expr(ctx, left, false);
                  let args = std-c-compile-push-args(ctx, right);
                  let e = std-c-chain(call, args, false);
                  e.set(c"expression", call.get(c"expression") + SAtom(c"(") + args.get(c"expression") + SAtom(c")"));
                );
             }
          } else {
             let f1 = std-c-compile-expr(ctx, left, true);
             ctx = open(f1.context);
             let f2 = std-c-compile-expr(ctx, right, true);
             let f3 = std-c-chain(f1, f2, false);
             f3
          }
      );
      ASTNil{} => (
         mk-fragment().set(c"expression",SAtom(c"({})"));
      );
      ASTEOF{} => mk-fragment();
      Typedef2{} => mk-fragment();
      _ => (
         fail("TODO: std-c-compile-expr \{t}\n");
         mk-fragment();
      );
   };
   if is-stmt && non-zero(f.get(c"expression")) then f = f.set(c"expression", f.get(c"expression") + SAtom(c";"));
   f.context = close(ctx);
   f.type = typeof-term(t); f
);


