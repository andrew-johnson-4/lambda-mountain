
let std-c-compile-function-args(ctx: FContext, lhs: AST): S = (
   match lhs {
      App{ rest=left, right:App{ left:Lit{key:c":"}, right:App{ v-t=left:Var{k=key}, right:AType{kt=tt} } } } => (
         let decl = std-c-mangle-declaration(kt, lhs);
         let text = std-c-compile-function-args(ctx, rest);
         text = text + SAtom(c",");
         if can-unify( t1(c"C",t0(c"...")), kt ) {
            text = text + SAtom(c"...");
         } else if can-unify( t1(c"C",t0(c"void")), kt ) {
            text = text + SAtom(c"void");
         } else {
            text = text + decl.first;
            text = text + SAtom(c" ");
            let def-bound = std-c-fragment-context.lookup(v-t, mk-fragment());
            text = text + def-bound.get(c"expression"); # the uuid
            text = text + decl.second;
         };
         text
      );
      App{ left:Lit{key:c":"}, right:App{ v-t=left:Var{k=key}, right:AType{kt=tt} } } => (
         let decl = std-c-mangle-declaration(kt, lhs);
         let text = SNil();
         if can-unify( t1(c"C",t0(c"...")), kt ) {
            text = text + SAtom(c"...");
         } else if can-unify( t1(c"C",t0(c"void")), kt ) {
            text = text + SAtom(c"void");
         } else {
            text = text + decl.first;
            text = text + SAtom(c" ");
            let def-bound = std-c-fragment-context.lookup(v-t, mk-fragment());
            text = text + def-bound.get(c"expression"); # the uuid
            text = text + decl.second;
         };
         text
      );
      _ => SNil();
   }
);
