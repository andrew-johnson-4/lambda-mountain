
let mangle-identifier(k: CString): S = (
   let cs = SAtom(c"LM_");
   while head-string(k) { match head-string(k) {
      33 => cs = cs + SAtom(c"_EX_"); # !
      36 => cs = cs + SAtom(c"_DL_"); # $
      37 => cs = cs + SAtom(c"_MD_"); # %
      38 => cs = cs + SAtom(c"_AM_"); # &
      39 => cs = cs + SAtom(c"_SQ_"); # '
      42 => cs = cs + SAtom(c"_ML_"); # *
      43 => cs = cs + SAtom(c"_AD_"); # +
      44 => cs = cs + SAtom(c"_CM_"); # ,
      45 => cs = cs + SAtom(c"_SB_"); # -
      46 => cs = cs + SAtom(c"_DT_"); # .
      47 => cs = cs + SAtom(c"_DV_"); # /
      58 => cs = cs + SAtom(c"_CL_"); # :
      59 => cs = cs + SAtom(c"_SC_"); # ;
      60 => cs = cs + SAtom(c"_LT_"); # <
      61 => cs = cs + SAtom(c"_EQ_"); # =
      62 => cs = cs + SAtom(c"_GT_"); # >
      63 => cs = cs + SAtom(c"_QM_"); # ?
      64 => cs = cs + SAtom(c"_AT_"); # @
      91 => cs = cs + SAtom(c"_LB_"); # [
      93 => cs = cs + SAtom(c"_RB_"); # ]
      94 => cs = cs + SAtom(c"_HT_"); # ^
      95 => cs = cs + SAtom(c"_US_"); # _
      96 => cs = cs + SAtom(c"_TK_"); # `
      124 => cs = cs + SAtom(c"_BR_"); # |
      126 => cs = cs + SAtom(c"_TL_"); # ~
      c => cs = cs + SAtom(clone-rope(c));
   }; k = tail-string(k); };
   cs
);

let mangle-identifier(kt: Type): S = (
   match kt {
      TAny{} => mangle-identifier(c"?");
      TVar{name=name} => mangle-identifier(name);
      TGround{tag=tag, parameters=parameters} => (
         let r = mangle-identifier(tag);
         if parameters.length > 0 then r = r + mangle-identifier(c"<");
         let c-has-prev = false;
         for c in parameters {
            if c-has-prev { r = r + mangle-identifier(c",") };
            r = r + mangle-identifier(c);
            c-has-prev = true;
         };
         if parameters.length > 0 then r = r + mangle-identifier(c">");
         r
      );
      TAnd{conjugate=conjugate} => (
         let r = SNil;
         for c in conjugate { r = r + mangle-identifier(c); };
         r
      );
   }
);

let mangle-identifier(k: CString, kt: Type): CString = (
   clone-rope(
      mangle-identifier(k) + SAtom(c"_CL_") + mangle-identifier(kt.normalize)
   );
);

let mangle-identifier-function(k: CString, kt: Type): CString = (
   clone-rope(
      mangle-identifier(k) + SAtom(c"_CL_") + mangle-identifier(kt.normalize && kt.with-only-phi)
   );
);

