

let std-c-compile-args(callee-ctx: FContext, caller-ctx: FContext, lhs: AST, rhs: AST): Tuple<FContext,FContext> = (
   match lhs {
      App{lhs-rst=left, right:App{ left:Lit{key:c":"}, right:App{left-lhs=left:Var{k=key}, right:AType{kt=tt}} }} => (
         if typeof(rhs).is-t(c"Cons") {
            match rhs {
               App{le=left, re=right} => (
                  if kt.is-t(c"...") {
                     kt = kt.slot(c"...").r1;
                     if can-unify(kt, typeof(re)) {
                        if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(re))); };
                        let c1 = std-c-compile-expr(caller-ctx, re, false);
                        caller-ctx = open(c1.context);
                        callee-ctx = bind-vararg(callee-ctx, k, kt, c1);
                        (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs, le);
                     } else {
                        (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs-rst, rhs);  
                     }
                  } else {
                     if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(re))); };
                     let c1 = std-c-compile-expr(caller-ctx, re, false);
                     caller-ctx = open(c1.context);
                     callee-ctx = callee-ctx.bind(k, kt, c1);
                     std-c-fragment-context = std-c-fragment-context.bind( left-lhs, c1 );
                     (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs-rst, le);
                  }
               );
            }
         } else {
            if kt.is-t(c"...") {
               kt = kt.slot(c"...").r1;
               if can-unify(kt, typeof(rhs)) {
                  if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(rhs))); };
                  let c1 = std-c-compile-expr(caller-ctx, rhs, false);
                  caller-ctx = open(c1.context);
                  callee-ctx = bind-vararg(callee-ctx, k, kt, c1);
               } else {
                  (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs-rst, rhs);  
               }
            } else {
               if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(rhs))); };
               let c1 = std-c-compile-expr(caller-ctx, rhs, false);
               caller-ctx = open(c1.context);
               std-c-fragment-context = std-c-fragment-context.bind( left-lhs, c1 );
               callee-ctx = callee-ctx.bind(k, kt, c1);
            }
         };
         (callee-ctx, caller-ctx)
      );
      App{ left:Lit{key:c":"}, right:App{left-lhs=left:Var{k=key}, right:AType{kt=tt}} } => (
         if typeof(rhs).is-t(c"Cons") {
            match rhs {
               App{le=left, re=right} => (
                  if kt.is-t(c"...") {
                     kt = kt.slot(c"...").r1;
                     if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(re))); };
                     let c1 = std-c-compile-expr(caller-ctx, re, false);
                     caller-ctx = open(c1.context);
                     callee-ctx = bind-vararg(callee-ctx, k, kt, c1);
                     (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs, le);
                  } else {
                     fail("std-c-compile-args unexpected RHS, vararg mismatch");
                  }
               );
            }
         } else {
            if kt.is-t(c"...") {
               kt = kt.slot(c"...").r1;
               if can-unify(kt, typeof(rhs)) {
                  if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(rhs))); };
                  let c1 = std-c-compile-expr(caller-ctx, rhs, false);
                  caller-ctx = open(c1.context);
                  callee-ctx = bind-vararg(callee-ctx, k, kt, c1);
               } else {
                  (callee-ctx, caller-ctx) = std-c-compile-args(callee-ctx, caller-ctx, lhs, rhs);  
               }
            } else {
               if kt.is-open { callee-ctx = union(callee-ctx, unify(kt, typeof(rhs))); };
               let c1 = std-c-compile-expr(caller-ctx, rhs, false);
               caller-ctx = open(c1.context);
               std-c-fragment-context = std-c-fragment-context.bind( left-lhs, c1 );
               callee-ctx = callee-ctx.bind(k, kt, c1);
            }
         };
         (callee-ctx, caller-ctx)
      );
      ASTNil{} => (callee-ctx, caller-ctx);
      _ => (
         print("std-c-compile-args Invalid Args: "); std-c-print(lhs); print("\n"); exit(1);
         (callee-ctx, caller-ctx)
      );
   }
);
