
let std-c-force-imports = {} : HashtableEq<CString,Bool>;

let std-c-force-import-clib(lib: CString): Nil = (
   std-c-force-imports = std-c-force-imports.bind(lib, true);
);

let std-c-finish-forced-imports(): S = (
   (if std-c-force-imports.has(c"stdlib.h") then SAtom(c"#include <stdlib.h>\n") else SNil()) +
   (if std-c-force-imports.has(c"stdio.h") then SAtom(c"#include <stdio.h>\n") else SNil()) +
   (if std-c-force-imports.has(c"regex.h") then SAtom(c"#include <regex.h>\n") else SNil()) +
   (if std-c-force-imports.has(c"string.h") then SAtom(c"#include <string.h>\n") else SNil())
);

let compile-global-c-main-term = mk-eof();

let std-c-compile-global(ctx: FContext, k: CString, term: AST): Nil = (
   std-c-force-import-clib(c"string.h");
   if k==c"" then ()
   else if k==c"div_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"ldiv_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"lldiv_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fpos_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fpos64_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"fpos_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"fpos64_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__fsid_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__mbstate_t" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"regmatch_t" then std-c-force-import-clib(c"regex.h")
   else if k==c"regex_t" then std-c-force-import-clib(c"regex.h")
   else if k==c"reg_errcode_t" then std-c-force-import-clib(c"regex.h")
   else if k==c"stdin" then std-c-force-import-clib(c"stdio.h")
   else if k==c"stdout" then std-c-force-import-clib(c"stdio.h")
   else if k==c"stderr" then std-c-force-import-clib(c"stdio.h")
   else if k==c"regoff_t" then std-c-force-import-clib(c"stdio.h")
   else if k==c"register_t" then std-c-force-import-clib(c"stdio.h")
   else if k==c"bsearch" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"qsort" then std-c-force-import-clib(c"stdlib.h")
   else if k==c"__compar_fn_t" then std-c-force-import-clib(c"stdlib.h")
   else if typeof-term(term).is-open || typeof-term(term).is-t(c"Blob",0) || typeof-term(term).is-t(c"FFI",0) || typeof-term(term).is-t(c"Prop",0) then ()
   else if k==c"main" && not(non-zero(compile-global-c-main-term)) then {
      compile-global-c-main-term = term;
   } else match term {
      App{left:Lit{key:c":"}, right:App{left:Var{key:c"__uninitialized"}, right:AType{tt=tt}}} => (
         if not(tt.is-t(c"C-FFI",0)) && not(tt.is-t(c"C-Fragment",0)) {
            let clean-tt = typeof-term(term).without-tag;
            k = mangle-identifier(k, clean-tt);
         };
         (let pre-decl, let post-decl) = std-c-mangle-declaration(tt, term);
         let text = SNil();
         text = text + pre-decl;
         text = text + SAtom(c" ");
         text = text + SAtom(k);
         text = text + post-decl;
         text = text + SAtom(c";\n");
         if can-unify(t2(c"C",t1(c"typedef")), tt) || can-unify(t3(c"Array",t2(c"C",t1(c"typedef")),ta), tt) {
            assemble-header-typedef-section = assemble-header-typedef-section + text;
         } else {
            assemble-gdecl-section = assemble-gdecl-section + text;
         }
      );
      App{left:Lit{key:c":"}, right:App{t=left, right:AType{tt=tt}}} => (
         if not(tt.is-t(c"C-FFI",0)) && not(tt.is-t(c"C-Fragment",0)) {
            let clean-tt = typeof-term(term).without-tag;
            k = mangle-identifier(k, clean-tt);
         };
         let gend = false;
         if tt.is-t(c"C-Fragment",0) {
            match t {
               Lit{key=key} => (
                  assemble-gdecl-section = assemble-gdecl-section + SAtom(key);
                  gend = true;
               );
               _ => ();
            }
         };
         if not(gend) {
            (let pre-decl, let post-decl) = std-c-mangle-declaration(tt, term);
            let text = SNil();
            text = text + pre-decl;
            text = text + SAtom(c" ");
            text = text + SAtom(k);
            text = text + post-decl;
            text = text + SAtom(c";\n");

            let inner-expr = std-c-compile-expr( ctx, t, false );
            if can-unify(t2(c"C",t1(c"typedef")), tt) || can-unify(t3(c"Array",t2(c"C",t1(c"typedef")),ta), tt) {
               assemble-header-typedef-section = assemble-header-typedef-section + text;
            } else {
               assemble-gdecl-section = assemble-gdecl-section + text;
               text = SAtom(k) + SAtom(c" = ") + inner-expr.get(c"expression") + SAtom(c";\n");
               assemble-global-initializer-section = assemble-global-initializer-section + text;
            }
         }
      );
      Abs{lhs=lhs,rhs=rhs,tt=tt} => (
         if k!=c"main" && not(typeof-term(term).is-t(c"C-FFI_s",0)) {
            print("Mangle 1 \{typeof-term(term)}\n");
            k = mangle-identifier-function(k, typeof-term(term));
         };
         ctx = std-c-compile-destructure-args( ctx, lhs, false );
         let loc = term.location;
         let initialized = match rhs {
            App{ left:Lit{key:c":"}, right:App{ left:Var{key:c"__uninitialized"}, right:AType{} } } => false;
            _ => true;
         };
         if initialized || can-unify(t2(c"C",t1(c"typedef")), tt) {
            let text = SNil();
            if not(config-strip-debug) && loc.filename != c"Unknown" {
               text = text + SAtom(c"\n#line ");
               text = text + SAtom(to-string(loc.line));
               text = text + SAtom(c" \"");
               text = text + SAtom(loc.filename);
               text = text + SAtom(c"\"\n");
            };
            print("Mangle 2 \{typeof-term(rhs)}\n");
            if k==c"main" then text = text + SAtom(c"int")
            else text = text + std-c-mangle-type(typeof-term(rhs), term);
            text = text + SAtom(c" ");
            text = text + SAtom(k);
            text = text + SAtom(c"(");
            text = text + std-c-compile-function-args(ctx, lhs);
            text = text + SAtom(c");\n");
            if can-unify(t2(c"C",t1(c"typedef")), tt) {
               assemble-header-typedef-section = assemble-header-typedef-section + text;
            } else {
               assemble-gdecl-section = assemble-gdecl-section + text;
            }
         };

         if initialized {
            let text = SNil();
            if not(config-strip-debug) && loc.filename != c"Unknown" {
               text = text + SAtom(c"\n#line ");
               text = text + SAtom(to-string(loc.line));
               text = text + SAtom(c" \"");
               text = text + SAtom(loc.filename);
               text = text + SAtom(c"\"\n");
            };
            print("Mangle 3 \{typeof-term(rhs)}\n");
            if k==c"main" then text = text + SAtom(c"int")
            else text = text + std-c-mangle-type(typeof-term(rhs), term);
            text = text + SAtom(c" ");
            text = text + SAtom(k);
            text = text + SAtom(c"(");
            text = text + std-c-compile-function-args(ctx, lhs);
            text = text + SAtom(c")");
            
            let e = std-c-compile-call(ctx, c"cdecl::return", rhs);
            text = text + SAtom(c"{");
            if k==c"main" then text = text + assemble-string-initializer-section + assemble-global-initializer-section;
            text = text + e.get(c"frame") + e.get(c"expression") + SAtom(c"}");

            assemble-text-section = assemble-text-section + text + SAtom(c"\n");
         };
      );
      t => (
         let tt = typeof-term(term);
         if not(typeof-term(term).is-t(c"C-FFI",0)) && not(tt.is-t(c"C-Fragment",0)) {
            k = mangle-identifier(k, tt);
         };

         (let pre-decl, let post-decl) = std-c-mangle-declaration(tt, term);
         let text = SNil();
         text = text + pre-decl;
         text = text + SAtom(c" ");
         text = text + SAtom(k);
         text = text + post-decl;
         text = text + SAtom(c";\n");
         assemble-gdecl-section = assemble-gdecl-section + text;

         let inner-expr = std-c-compile-expr( ctx, t, false );
         text = SAtom(k) + SAtom(c" = ") + inner-expr.get(c"expression") + SAtom(c";\n");
         assemble-global-initializer-section = assemble-global-initializer-section + text;
      );
   }
);
