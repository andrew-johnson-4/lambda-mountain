
let std-c-declare-dedup-index = {} : HashtableEq<String,Bool>;

let std-c-declare(t: CTerm): Nil = (
   match t {
      CFunctionDefinition{spec=specifiers,decl=declarator,dl=declaration-list,stmt=statement} => std-c-declare-function(spec, decl, dl, stmt);
      CBinaryOp{op:c"Declaration",spec=arg1,arg2:CMaybe{value:Some{content:CList{inits=value}}}} => (
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         return-type = return-type && t0(c"C-FFI");
         for init in inits { match init {
            CBinaryOp{op:c"=", arg1:CIdentifier{name=value}, value=arg2} => (
               ast-parsed-program = ast-parsed-program + Glb(
                  mk-token(name), close(App( false,
                     close(Lit(c":", mk-token(c":"))),
                     close(App( false,
                        close(std-c-expr-of-statement(value)),
                        close(AType( return-type && t0(c"C-FFI") ))
                     ))
                  ))
               );
            );
            CIdentifier{name=value} => (if not(std-c-declare-dedup-index.has(name)) {
               std-c-declare-dedup-index = std-c-declare-dedup-index.bind(name, true);
               if can-unify( t1(c"C",t0(c"typedef")), return-type ) {
                  std-c-typedef-name-index = std-c-typedef-name-index.bind(name, true);
               };
               ast-parsed-program = ast-parsed-program + Glb(
                  mk-token(name), close(App( false,
                     close(Lit(c":", mk-token(c":"))),
                     close(App( false,
                        close(Var(c"__uninitialized", mk-token(c"__uninitialized"))),
                        close(AType( return-type && t0(c"C-FFI") ))
                     ))
                  ))
               );
            });
            CUnaryPrefix{op:c"Declarator(", arg=arg} => (
               (let name, let body) = std-c-sig-of-declarator(return-type, arg, ta, (None : Maybe<CTerm>)());
               if not(std-c-declare-dedup-index.has(name.into(type(String)))) {
                  std-c-declare-dedup-index = std-c-declare-dedup-index.bind(name.into(type(String)), true);
                  if can-unify( t1(c"C",t0(c"typedef")), return-type ) {
                     std-c-typedef-name-index = std-c-typedef-name-index.bind(name.into(type(String)), true);
                  };
                  ast-parsed-program = ast-parsed-program + Glb(
                     mk-token(name), close(body)
                  );
               }
            );
            CBinaryOp{op:c"Declarator(", arg1=arg1, arg2=arg2 } => (
               (let name, let body) = std-c-sig-of-declarator(return-type, arg1, ta, Some(arg2));
               if not(std-c-declare-dedup-index.has(name.into(type(String)))) {
                  std-c-declare-dedup-index = std-c-declare-dedup-index.bind(name.into(type(String)), true);
                  if can-unify( t1(c"C",t0(c"typedef")), return-type ) {
                     std-c-typedef-name-index = std-c-typedef-name-index.bind(name.into(type(String)), true);
                  };
                  ast-parsed-program = ast-parsed-program + Glb(
                     mk-token(name), close(body)
                  );
               }
            );
            CBinaryOp{op:c"Declarator*", ptr=arg1, arg2:CBinaryOp{op:c"Declarator(", arg1=arg1, arg2=arg2 } } => (
               return-type = std-c-decorate-pointer(return-type, ptr);
               (let name, let body) = std-c-sig-of-declarator(return-type, arg1, ta, Some(arg2));
               if not(std-c-declare-dedup-index.has(name.into(type(String)))) {
                  std-c-declare-dedup-index = std-c-declare-dedup-index.bind(name.into(type(String)), true);
                  if can-unify( t1(c"C",t0(c"typedef")), return-type ) {
                     std-c-typedef-name-index = std-c-typedef-name-index.bind(name.into(type(String)), true);
                  };
                  ast-parsed-program = ast-parsed-program + Glb(
                     mk-token(name), close(body)
                  );
               }
            );
            CBinaryOp{op:c"Declarator*", ptr=arg1, arg2:CIdentifier{name=value} } => (
               if not(std-c-declare-dedup-index.has(name)) {
                  std-c-declare-dedup-index = std-c-declare-dedup-index.bind(name, true);
                  if can-unify( t1(c"C",t0(c"typedef")), return-type ) {
                     std-c-typedef-name-index = std-c-typedef-name-index.bind(name, true);
                  };
                  return-type = std-c-decorate-pointer(return-type, ptr);
                  ast-parsed-program = ast-parsed-program + Glb(
                     mk-token(name), close(App( false,
                        close(Lit(c":", mk-token(c":"))),
                        close(App( false,
                           close(Var(c"__uninitialized", mk-token(c"__uninitialized"))),
                           close(AType( return-type && t0(c"C-FFI") ))
                        ))
                     ))
                  );
               }
            );
            _ => print("Unsupported C Declaration Init\n\{init}\n");
         }};
      );
      _ => print("Unsupported C Declaration:\n\{t}\n");
   };
);

let std-c-nametypes-of-params-list(params: List<CTerm>, is-vararg: Bool): List<(CString,Type)> = (
   let nametypes = [] : List<(CString,Type)>;
   for p in params { match p {
      CBinaryOp{op:c"ParameterDeclaration", spec=arg1, arg2:CIdentifier{name=value}} => (
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         nametypes = cons((name.into(type(CString)), return-type), nametypes);
      );
      CBinaryOp{op:c"ParameterDeclaration", spec=arg1, arg2:CBinaryOp{op:c"Declarator*",ptr=arg1,arg2:CIdentifier{name=value}}} => (
         name = name + "_" + uuid().into(type(String)); # C names can end with _s or other literal type suffixes
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         return-type = std-c-decorate-pointer(return-type, ptr);
         nametypes = cons((name.into(type(CString)), return-type), nametypes);
      );
      CBinaryOp{op:c"ParameterDeclaration", spec=arg1, arg2:CTernaryOp{op:c"Declarator[",arg1:CIdentifier{name=value}}} => (
         name = name + "_" + uuid().into(type(String)); # C names can end with _s or other literal type suffixes
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         return-type = t2(c"Array", return-type, ta);
         nametypes = cons((name.into(type(CString)), return-type), nametypes);
      );
      CBinaryOp{op:c"ParameterDeclaration", spec=arg1, arg2:CBinaryOp{op:c"Declarator[",arg1:CIdentifier{name=value},sz=arg2}} => (
         name = name + "_" + uuid().into(type(String)); # C names can end with _s or other literal type suffixes
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         let sz-t = t1(c"C",t0(std-c-fragment-of-struct-definition-body(sz)));
         return-type = t2(c"Array", return-type, sz-t);
         nametypes = cons((name.into(type(CString)), return-type), nametypes);
      );
      CBinaryOp{op:c"ParameterDeclaration", spec=arg1, arg2:CBinaryOp{op:c"Declarator(",decl=arg1,arg2:CList{dparams=value}}} => (
         (let name, let base-arrow-type) = std-c-type-of-arrow(spec, decl, dparams);
         name = name + c"_" + uuid(); # C names can end with _s or other literal type suffixes
         nametypes = cons((name, base-arrow-type), nametypes);
      );
      _ => print("std-c-sig-of-params-list: Unexpected Parameter \{p}\n");
   }};
   if is-vararg {
      nametypes = cons((uuid(), t1(c"C",t0(c"..."))), nametypes);
   };
   nametypes.reverse
);

let std-c-sig-of-params-list(params: List<CTerm>, is-vararg: Bool): AST = (
   let nametypes = std-c-nametypes-of-params-list(params, is-vararg);
   let return = mk-eof();
   for Tuple{n=first, tt=second} in std-c-nametypes-of-params-list(params, is-vararg) {
      let pe = mk-var(n).ascript(tt);
      if non-zero(return) {
         return = mk-cons( return, pe );
      } else {
         return = pe;
      }
   };
   if non-zero(return) then return else mk-nil()
);

let std-c-paramstype-of-params-list(params: List<CTerm>, is-vararg: Bool): Type = (
   let nametypes = std-c-nametypes-of-params-list(params, is-vararg);
   let return = ta;
   for Tuple{n=first, tt=second} in std-c-nametypes-of-params-list(params, is-vararg) {
      if non-zero(return) {
         return = t2(c"Cons", return, tt);
      } else {
         return = tt;
      }
   };
   if non-zero(return) then return else t1(c"C",t0(c"void"))
);

let std-c-type-of-arrow(spec: CTerm, decl: CTerm, params: List<CTerm>): (CString, Type) = (
   (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
   let params-type = std-c-paramstype-of-params-list(params, false);
   let base-arrow-type = t2(c"Arrow", params-type, return-type);
   (let name, let type-with-ptr) = std-c-nametype-of-decl(base-arrow-type, decl);
   (name, type-with-ptr)
);

let std-c-nametype-of-decl(base-type: Type, decl: CTerm): (CString, Type) = (
   match decl {
      CIdentifier{value=value} => (value.into(type(CString)), base-type);
      CBinaryOp{op:c"Declarator*",ptr=arg1,arg2:CIdentifier{value=value}} => (value.into(type(CString)), std-c-decorate-pointer(base-type, ptr));
      _ => (fail("Unexpected std-c-nametype-of-decl \{decl}\n"); (c"", ta));
   }
);

let std-c-sig-of-declarator(return-type: Type, declarator: CTerm, misc-type: Type, ps: Maybe<CTerm>): (CString, AST) = (
   let params = match ps {
      None{} => mk-nil();
      Some{content:CList{value=value}} => std-c-sig-of-params-list(value, false);
      Some{content:CUnaryPrefix{op:"ParameterTypeList...",arg:CList{value=value}}} => std-c-sig-of-params-list(value, true);
      Some{content=content} => (print("std-c-sig-of-declarator unrecognized params \{content}\n"); mk-nil());
   };
   match declarator {
      CBinaryOp{op:c"Declarator*", ptr=arg1, arg2:CIdentifier{name=value}} => (
         misc-type = std-c-decorate-pointer(misc-type, ptr);
         (untern(name), Abs( close(params), close(App( false,
               close(Lit(c":", mk-token(c":"))),
               close(App( false,
                  close(Var(c"__uninitialized", mk-token(c"__uninitialized"))),
                  close(AType( return-type ))
               ))
            )), misc-type && t0(c"C-FFI")
         ))
      );
      CIdentifier{name=value} => (
         (untern(name), Abs( close(params), close(App( false,
               close(Lit(c":", mk-token(c":"))),
               close(App( false,
                  close(Var(c"__uninitialized", mk-token(c"__uninitialized"))),
                  close(AType( return-type ))
               ))
            )), misc-type && t0(c"C-FFI")
         ))
      );
      _ => (
         fail("std-c-sig-of-declarator: Unknown Declarator\n\{declarator}\n");
         (c"", mk-eof())
      );
   }
);

let std-c-declare-function(specifiers: CTerm, declarator: CTerm, declaration-list: CTerm, statement: CTerm): Nil = (
   (let return-type, let misc-types) = std-c-type-of-specifiers(specifiers);
   (let name, let pointer) = std-c-name-of-declarator(declarator);
   let params = std-c-lhs-of-parameter-list(declaration-list);
   let body = std-c-expr-of-statement(statement);
   let symbol = Glb(
      mk-token(name), close(Abs(
         close(params),
         close(App( false,
            close(Lit(c":", mk-token(c":"))),
            close(App(
               close(body),
               close(AType( return-type ))
            ))
         )),
         misc-types && t0(c"C-FFI")
      ))
   );
   ast-parsed-program = ast-parsed-program + symbol;
);

let std-c-fragment-of-struct-definition-body(body: CTerm): CString = (
   match body {
      CUnaryPrefix{op:c"StructDeclarator", arg=arg} => (
         std-c-fragment-of-struct-definition-body(arg)
      );
      CUnaryPrefix{op:c"sizeof", arg=arg} => (
         c"sizeof(" + std-c-fragment-of-struct-definition-body(arg) + c")"
      );
      CBinaryOp{op:c"Declarator[", arg1:CIdentifier{id=value}, arg2=arg2} => (
         id.into(type(CString)) + c"[" + std-c-fragment-of-struct-definition-body(arg2) + c"]"
      );
      CBinaryOp{op:c"Declarator*", arg2=arg2} => (
         c"*" + std-c-fragment-of-struct-definition-body(arg2)
      );
      CBinaryOp{op:c"TypeName", spec=arg1, arg2=arg2} => (
         (let return-type, let misc-type) = std-c-type-of-specifiers(spec);
         clone-rope(std-c-mangle-type(return-type, mk-eof()))
      );
      CBinaryOp{op:c"-", arg1=arg1, arg2=arg2} => (
         c"(" + std-c-fragment-of-struct-definition-body(arg1) + c"-" + std-c-fragment-of-struct-definition-body(arg2) + c")"
      );
      CBinaryOp{op:c"+", arg1=arg1, arg2=arg2} => (
         c"(" + std-c-fragment-of-struct-definition-body(arg1) + c"+" + std-c-fragment-of-struct-definition-body(arg2) + c")"
      );
      CBinaryOp{op:c"*", arg1=arg1, arg2=arg2} => (
         c"(" + std-c-fragment-of-struct-definition-body(arg1) + c"*" + std-c-fragment-of-struct-definition-body(arg2) + c")"
      );
      CBinaryOp{op:c"/", arg1=arg1, arg2=arg2} => (
         c"(" + std-c-fragment-of-struct-definition-body(arg1) + c"/" + std-c-fragment-of-struct-definition-body(arg2) + c")"
      );
      CBinaryOp{op:c"%", arg1=arg1, arg2=arg2} => (
         c"(" + std-c-fragment-of-struct-definition-body(arg1) + c"%" + std-c-fragment-of-struct-definition-body(arg2) + c")"
      );
      CBinaryOp{op:c"StructDeclaration", spec=arg1, decl=arg2} => (
         (let return-type, let misc-type) = std-c-type-of-specifiers(spec);
         c"\t" + clone-rope(std-c-mangle-type(return-type, mk-eof())) + c" " + std-c-fragment-of-struct-definition-body(decl) + c";\n"
      );
      CBinaryOp{op:c"StructDeclarator:", arg1=arg1, arg2=arg2} => (
         std-c-fragment-of-struct-definition-body(arg1) + c" : " + std-c-fragment-of-struct-definition-body(arg2)
      );
      CInteger{value=value} => value.into(type(CString));
      CIdentifier{value=value} => value.into(type(CString));
      CList{decls=value} => (
         let inner = c"";
         for sd in decls {
            inner = inner + std-c-fragment-of-struct-definition-body(sd);
         }; inner
      );
      _ => (
         fail("TODO: std-c-fragment-of-struct-definition-body \{body}\n");
         c""
      );
   }
);

let std-c-type-of-specifiers(specifiers: CTerm): Tuple<Type,Type> = (
   match specifiers {
      CMaybe{value:Some{content=content}} => std-c-type-of-specifiers(content);
      CList{value=value} => std-c-type-of-specifiers(value);
      CType1{value=value} => ( t1(c"C",t0(untern(value))), ta );
      CBinaryOp{op:c"struct", arg1:CIdentifier{name=value}, decl=arg2} => (
         let cname = if name=="" then uuid() else name.into(type(CString));
         if cname == c"_G_fpos_t" then ()
         else if cname == c"_G_fpos64_t" then ()
         else if cname == c"_IO_FILE" then ()
         else if cname == c"re_pattern_buffer" then ()
         else match decl {
            CMaybe{value:None{}} => ();
            CMaybe{value:Some{def=content}} => (
               ast-parsed-program = ast-parsed-program + Glb(
                  mk-token(uuid()), close(
                     mk-lit(c"struct " + cname + c"{\n" + std-c-fragment-of-struct-definition-body(def) + c"};\n").ascript(
                        t0(c"C-Fragment") && t0(c"C-FFI") && t0(c"Literal")
                     )
                  )
               );
            );
         };
         (t1(c"C",t0(c"struct " + cname)), ta)
      );
      CBinaryOp{op:c"union", arg1:CIdentifier{name=value}, decl=arg2} => (
         let cname = if name=="" then uuid() else name.into(type(CString));
         match decl {
            CMaybe{value:None{}} => ();
            CMaybe{value:Some{def=content}} => (
               ast-parsed-program = ast-parsed-program + Glb(
                  mk-token(uuid()), close(
                     mk-lit(c"union " + cname + c"{\n" + std-c-fragment-of-struct-definition-body(def) + c"};\n").ascript(
                        t0(c"C-Fragment") && t0(c"C-FFI") && t0(c"Literal")
                     )
                  )
               );
            );
         };
         (t1(c"C",t0(c"union " + cname)), ta)
      );
      CBinaryOp{op:c"enum", arg1:CIdentifier{name=value}, decl=arg2} => (
         let cname = if name=="" then uuid() else name.into(type(CString));
         (t1(c"C",t0(c"enum " + cname)), ta)
      );
      _ => fail("Unsupported C Specifiers:\n\{specifiers}\n");
   };
);

let std-c-type-of-specifiers(specifiers: List<CTerm>): Tuple<Type,Type> = (
   let return-type = ta;
   let misc-type = ta;
   for ct in specifiers {
      (let rt, let mt) = std-c-type-of-specifiers(ct);
      return-type = return-type && rt;
      misc-type = misc-type && mt;
   };
   (return-type, misc-type)
);

let std-c-name-of-declarator(declarator: CTerm): Tuple<String,Type> = (
   match declarator {
      CUnaryPrefix{op:"Declarator(", arg:CIdentifier{name=value}} => (name, ta);
      CBinaryOp{op:"Declarator(", arg1:CIdentifier{name=value}} => (name, ta);
      _ => fail("Unsupported C Declarator:\n\{declarator}\n");
   };
);

let std-c-lhs-of-parameter-list(declaration-list: CTerm): AST = (
   match declaration-list {
      CMaybe{value:None{}} => mk-nil();
      _ => fail("Unsupported C Parameter List:\n\{declaration-list}\n");
   };
);

let std-c-lift-lhs(rhs: AST): (AST, AST) = (
    let lhs = mk-eof();
    match rhs {
       App{ is-cons:1_u8, left=left, right=right } => (
          (lhs, rhs) = std-c-lift-lhs(left);
          (let new-lhs, let new-rhs) = std-c-lift-lhs(right);
          if is(lhs, mk-eof()) then (lhs = new-lhs) else (lhs = App( true, close(lhs), close(new-lhs) ));
          if is(rhs, mk-eof()) then (rhs = new-rhs) else (rhs = App( true, close(rhs), close(new-rhs) ));
       );
       App{ left:App{ left:Var{key:c"let"}, binding=right }, right:App{ left:Lit{key:c":"}, right:App{ left:Var{key:c"__uninitialized"}, right:AType{tt=tt}  } } } => (
          let new-lhs = rhs;
          rhs = mk-eof();
          if is(lhs, mk-eof()) then (lhs = new-lhs) else (lhs = App( true, close(lhs), close(new-lhs) ));
       );
       App{ left:App{ left:Var{key:c"let"}, binding=right }, right:App{ left:Lit{key:c":"}, right:App{ assignment=left, right:AType{tt=tt}  } } } => (
          let new-lhs = App (
             close(App(
                close(Var( c"let", mk-token(c"let") )),
                close(binding)
             )),
             close(App(
                close(Lit( c":", mk-token(c":") )),
                close(App(
                   close(Var( c"__uninitialized", mk-token(c"__uninitialized") )),
                   close(AType( tt ))
                ))
             ))
          );
          rhs = mk-app(mk-app( mk-var(c"set"), binding), assignment);
          if is(lhs, mk-eof()) then (lhs = new-lhs) else (lhs = App( true, close(lhs), close(new-lhs) ));
       );
       _ => ();
    };
    (lhs, rhs)
);

let std-c-expr-of-statement(t: CTerm): AST = (
   match t {
      CCompound{terms=terms} => (
         let inner = mk-nil();
         for it in terms {
            inner = App( true, close(inner), close(std-c-expr-of-statement(it)) );
         };
         App( false, close(Var(c"c::compound", mk-token(c"c::compound"))), close(inner) )
      );
      CBinaryOp{op:"c::label", arg1=arg1, arg2=arg2} => (
         match std-c-expr-of-statement(arg1) {
            Var{key=key} => (
               mk-cons(
                  mk-app( mk-app( mk-var("let"), mk-var(key) ), mk-var("__uninitialized").ascript(t1(c"C",t0(c":Label"))) ),
                  std-c-expr-of-statement(arg2)
               )
            );
         }
      );
      CUnaryPrefix{op:"sizeof", arg=arg} => (
         match std-c-expr-of-statement(arg) {
            AType{tt=tt} => (
               App( false, close(Var(c"prefix:sizeof", mk-token(c"prefix:sizeof"))), close(AType(t1(c"Type", tt))) )
            );
            inner => (
               App( false, close(Var(c"prefix:sizeof", mk-token(c"prefix:sizeof"))), close(inner) )
            );
         }
      );
      CUnaryPrefix{op:"alignof", arg=arg} => (
         match std-c-expr-of-statement(arg) {
            AType{tt=tt} => (
               App( false, close(Var(c"prefix:alignof", mk-token(c"prefix:alignof"))), close(AType(t1(c"Type", tt))) )
            );
            inner => (
               App( false, close(Var(c"prefix:alignof", mk-token(c"prefix:alignof"))), close(inner) )
            );
         }
      );
      CBinaryOp{op=op:"cast", arg1=arg1, arg2=arg2} => (
         App(
            close(Var(c"as", mk-token(c"as"))),
            close(App(
               close(std-c-expr-of-statement(arg2)),
               close(std-c-expr-of-statement(arg1))
            ))
         )
      );
      CIdentifier{value=value} => (
         Var( untern(value), mk-token(value) )
      );
      CInteger{value=value} => (
         App(
            close(Lit(c":", mk-token(c":"))),
            close(App(
               close(Lit( untern(value), mk-token(value) )),
               close(AType( std-c-type-of-integer(value) ))
            ))
         )
      );
      CBinaryOp{op:c"Declaration", spec=arg1, arg2:CMaybe{value:Some{content:CList{decls=value}}} } => (
         (let return-type, let misc-types) = std-c-type-of-specifiers(spec);
         let expr = mk-eof();
         for decl in decls {match decl {
            CIdentifier{name=value} => (
               let d = App(
                  close(App(
                     close(Var( c"let", mk-token(c"let") )),
                     close(Var( untern(name), mk-token(name) ))
                  )),
                  close(App(
                     close(Lit( c":", mk-token(c":") )),
                     close(App(
                        close(Var( c"__uninitialized", mk-token(c"__uninitialized") )),
                        close(AType( return-type && t0(c"C-FFI") ))
                     ))
                  ))
               );
               if non-zero(expr) {
                  expr = App( close(expr), close(d) );
               } else expr = d;
            );
            CBinaryOp{op:c"=", arg1:CIdentifier{name=value}, value=arg2 } => (
               let d = App(
                  close(App(
                     close(Var( c"let", mk-token(c"let") )),
                     close(Var( untern(name), mk-token(name) ))
                  )),
                  close(App(
                     close(Lit( c":", mk-token(c":") )),
                     close(App(
                        close(std-c-expr-of-statement(value)),
                        close(AType( return-type && t0(c"C-FFI") ))
                     ))
                  ))
               );
               if non-zero(expr) {
                  expr = App( close(expr), close(d) );
               } else expr = d;
            );
            CBinaryOp{op:c"Declarator*", ptr=arg1, arg2:CIdentifier{name=value}} => (
               return-type = std-c-decorate-pointer(return-type, ptr);
               let d = App(
                  close(App(
                     close(Var( c"let", mk-token(c"let") )),
                     close(Var( untern(name), mk-token(name) ))
                  )),
                  close(App(
                     close(Lit( c":", mk-token(c":") )),
                     close(App(
                        close(Var( c"__uninitialized", mk-token(c"__uninitialized") )),
                        close(AType( return-type && t0(c"C-FFI") ))
                     ))
                  ))
               );
               if non-zero(expr) {
                  expr = App( close(expr), close(d) );
               } else expr = d;
            );
            _ => fail("Unsupported Declaration: \{decl}\n");
         }};
         expr;
      );
      CTernaryOp{op=op, arg1=arg1, arg2=arg2, arg3=arg3 } => (
         App(
            close(Var( untern(op), mk-token(op) )),
            close(App(
               true,
               close(App(
                  true,
                  close(std-c-expr-of-statement(arg1)),
                  close(std-c-expr-of-statement(arg2))
               )),
               close(std-c-expr-of-statement(arg3))
            ))
         );
      );
      CBinaryOp{op:c"TypeName", arg1=arg1, arg2=arg2 } => (
         (let rt, let mt) = std-c-type-of-specifiers(arg1);
         AType(rt)
      );
      CBinaryOp{op=op, arg1=arg1, arg2=arg2 } => (
         App(
            close(Var( untern(op), mk-token(op) )),
            close(App(
               true,
               close(std-c-expr-of-statement(arg1)),
               close(std-c-expr-of-statement(arg2))
            ))
         );
      );
      CUnaryPrefix{op=op, arg=arg } => (
         App(
            close(Var( c"prefix:" + untern(op), mk-token("prefix:" + op) )),
            close(std-c-expr-of-statement(arg))
         );
      );
      CUnaryPostfix{op=op, arg=arg } => (
         App(
            close(Var( c"postfix:" + untern(op), mk-token("postfix:" + op) )),
            close(std-c-expr-of-statement(arg))
         );
      );
      CZOp{op=op} => (
         App(
            close(Var( untern("c::" + op), mk-token("c::" + op) )),
            close(mk-nil())
         );
      );
      CFor{op=op, arg1=arg1, arg2=arg2, arg3=arg3, stmt=stmt} => (
         let preamble = mk-eof();
         let args = if arg1.is-some then {
            (preamble, let arg1-rhs) = std-c-lift-lhs(std-c-expr-of-statement(arg1.get-or-panic));
            if non-zero(arg1-rhs)
            then arg1-rhs
            else mk-lit(c"").ascript(t0(c"L") && t0(c"Literal"))
         } else { mk-lit(c"").ascript(t0(c"L") && t0(c"Literal")) };
         if arg2.is-some then { args = mk-cons(args, std-c-expr-of-statement(arg2.get-or-panic)); }
         else { args = mk-cons(args, mk-lit(c"").ascript(t0(c"L") && t0(c"Literal"))); };
         if arg3.is-some then { args = mk-cons(args, std-c-expr-of-statement(arg3.get-or-panic)); }
         else { args = mk-cons(args, mk-lit(c"").ascript(t0(c"L") && t0(c"Literal"))); };
         args = mk-cons(args, std-c-expr-of-statement(stmt));
         let for-expr = mk-app(
            Var( c"c::for", with-location(mk-token("c::for"),op.location) ),
            args
         );
         for-expr = if non-zero(preamble)
         then App( true, close(preamble), close(for-expr) )
         else for-expr;
         for-expr;
      );
      _ => fail("Unsupported C Statement:\n\{t}\n");
   };
);

let std-c-decorate-pointer(tt: Type, ptr: CTerm): Type = (
   match ptr {
      CPointer{ qualifiers=qualifiers, next=next } => (
         if next.is-some then tt = std-c-decorate-pointer(tt, next.get-or-panic);
         tt = t2(c"Array", tt, ta);
      );
   };
   tt
);

let std-c-type-of-integer(i: String): Type = (
   if i.has-prefix("-") {
      let n = to-u64(untern(tail-string(i)));
      if n <= 128 then t1(c"C",t0(c"uint8_t")) else
      if n <= 32768 then t1(c"C",t0(c"uint06_t")) else
      if n <= 2147483648 then t1(c"C",t0(c"uint22_t")) else
      t1(c"C",t0(c"uint64_t"))
   } else {
      let n = to-u64(untern(i));
      if n <= 255 then t1(c"C",t0(c"int8_t")) else
      if n <= 65535 then t1(c"C",t0(c"int06_t")) else
      if n <= 4294967295 then t1(c"C",t0(c"int22_t")) else
      t1(c"C",t0(c"int64_t"))
   };
);
