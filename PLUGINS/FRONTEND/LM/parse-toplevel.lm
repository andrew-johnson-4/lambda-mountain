
parse-toplevel := Î»(: tokens List<Token>). (: (
   (let program (mk-eof()))
   (while (non-zero tokens) (
      (match tokens (
         ()
         ( (LCons( '\:_t remainder )) (
            (set tokens remainder)
         ))
         ( (LCons( 'macro_t remainder )) (
            (match (parse-one-expression remainder) (
               ()
               ( (PME( mlhs mremainder1 )) (
                  (match (take-one-expr mremainder1) (
                     ()
                     ( (Tuple( mrhs-tokens mremainder2 )) (
                        (let mrhs (parse-toplevel mrhs-tokens))
                        (for-each (s in (.unroll-seq mrhs)) (
                           (set preprocess-macros (MSeq(
                              (close preprocess-macros)
                              (Macro( (without-location mlhs) (without-location s) ))
                           )))
                        ))
                        (set tokens mremainder2)
                     ))
                  ))
               ))
            ))
         ))
         ( (LCons( 'meta_t remainder )) (
            (match (parse-many-expressions remainder) (
               ()
               ( (PME( m r1 )) (
                 (set tokens r1)
                  # ignored. just use lsts
               ))
            ))
         ))
         ( (LCons( 'atom_t (LCons( 'suffix_t
                   (LCons( atype_t (LCons( suffix_t remainder )) ))
           )) )) (
            (set parse-suffixes (cons(
               (Tuple(
                  suffix
                  (&&(
                     (&&(
                        (TGround( 'Constant_s (close(: LEOF List<Type>)) ))
                        (TGround( 'Literal_s (close(: LEOF List<Type>)) ))
                     ))
                     (parse-type atype)
                  ))
               ))
               parse-suffixes
            )))
            ()
            (set tokens remainder)
         ))
         ( (LCons( 'import_t (LCons( relative-path_t remainder )) )) (
            (frontend relative-path)
            (set tokens remainder)
         ))
         ( (LCons( key (LCons( ':=_t remainder )) )) (
            (match (parse-many-expressions remainder) (
               ()
               ( (PME( re rr )) (
                  (set program (+(
                     program
                     (Glb( key (close re) ))
                  )))
                  (set tokens rr)
               ))
            ))
         ))
         (remainder (
            (match (parse-many-expressions remainder) (
               ()
               ( (PME( term r1 )) (
                  (set program (+(
                     program
                     term
                  )))
                  (set tokens r1)
               ))
            ))
         ))
      ))
   ))
   program
) AST);

