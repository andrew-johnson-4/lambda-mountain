
# TGround needs to be the first type (tag 0) or else sorted unification will not work right
type Type implies MustRetain, MustRelease zero TAny
        = TGround { tag:String, parameters:Vector<Type> }
        | TAny	
        | TVar { name:String }
        | TAnd { conjugate:Vector<Type> };

# TODO Remove: the problem is that OwnedData<Type> is somehow not reified
# fixing this bug in the V2 compiler is lower priority though than migrating to V3
let todo-remove(tt: Type): Nil = (
   mk-owned-data(type(Type),0); ()
);

let .release(x: Type): Nil = (
   if mem-is-non-zero(x) {
      print(c"Release Type Start\n");
      if x.discriminator-case-tag==(x as Tag::TGround).discriminator-case-tag
      then {
         (x as Tag::TGround).tag.release;
         (x as Tag::TGround).parameters.release;
      };
      if x.discriminator-case-tag==(x as Tag::TVar).discriminator-case-tag
      then {
         (x as Tag::TVar).name.release;
      };
      if x.discriminator-case-tag==(x as Tag::TAnd).discriminator-case-tag
      then {
         (x as Tag::TAnd).conjugate.release;
      };
      print(c"Release Type End\n");
   };
   mark-as-released(x);
);

let .retain(x: Type): Type = (
   if mem-is-non-zero(x) {
      print(c"Retain Type Start\n");
      if x.discriminator-case-tag==(x as Tag::TGround).discriminator-case-tag
      then {
         let x1 = (x as Tag::TGround).tag.retain; mark-as-released(x1);
         let x2 = (x as Tag::TGround).parameters.retain; mark-as-released(x2);
         ()
      };
      if x.discriminator-case-tag==(x as Tag::TVar).discriminator-case-tag
      then {
         let x1 = (x as Tag::TVar).name.retain; mark-as-released(x1);
         ()
      };
      if x.discriminator-case-tag==(x as Tag::TAnd).discriminator-case-tag
      then {
         let x1 = (x as Tag::TAnd).conjugate.retain; mark-as-released(x1);
         ()
      };
      print(c"Retain Type End\n");
   };
   x
);

