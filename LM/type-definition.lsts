
# TGround needs to be the first type (tag 0) or else sorted unification will not work right
type Type implies MustRetain, MustRelease zero TAny
        = TGround { tag:String, parameters:Vector<Type> }
        | TAny	
        | TVar { name:String }
        | TAnd { conjugate:Vector<Type> };

# TODO Remove: the problem is that OwnedData<Type> is somehow not reified
# fixing this bug in the V2 compiler is lower priority though than migrating to V3
let todo-remove(tt: Type): Nil = (
   mk-owned-data(type(Type),0); ()
);

let .release(x: Type): Nil = (
   if mem-is-non-zero(x) {
      #if x.discriminator-case-tag==(x as Tag::TAny).discriminator-case-tag
      #then {};
      if x.discriminator-case-tag==(x as Tag::TGround).discriminator-case-tag
      then {
         (x as Tag::TGround).tag.release;
         (x as Tag::TGround).parameters.release;
      };
      #TAny{} => ();
      #TGround{tag=tag,parameters=parameters} => (tag.retain as MustNotRelease; parameters.retain as MustNotRelase; ());
      #TVar{name=name} => (name.retain as MustNotRelease; ());
      #TAnd{conjugate=conjugate} => (conjugate.retain as MustNotRelease; ());
   };
   mark-as-released(x);
);

let .retain(x: Type): Type = (
   if mem-is-non-zero(x) {
      #if x.discriminator-case-tag==(x as Tag::TAny).discriminator-case-tag
      #then {};
      if x.discriminator-case-tag==(x as Tag::TGround).discriminator-case-tag
      then {
         (x as Tag::TGround).tag.retain;
         (x as Tag::TGround).parameters.retain;
         ()
      };
   };
   x
);

