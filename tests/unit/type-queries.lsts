
import std/default.lsts;
import SRC/unit-types.lsts;

let t-A = t1(c"A");
let t-B = t2(c"B", t-A);
let t-AB = t-A && t-B;
let t-x = tv(c"x");
let t-Ax = t-A && t-x;
let t-C = t2(c"C", t-x);
let t-f = t3(c"Arrow", t-A, t-B);
let t-g = t3(c"Array", t-f, ta);

# .is-t tests
assert( t-A.is-t(c"A") );
assert( not(t-A.is-t(c"B")) );
assert( t-B.is-t(c"B") );
assert( not(t-B.is-t(c"A")) );
assert( t-B.r1.is-t(c"A") );
assert( not(t-B.r1.is-t(c"B")) );
assert( t-AB.is-t(c"A") );
assert( t-AB.is-t(c"B") );
assert( not(t-x.is-t(c"x")) );

# .is-open tests
assert( not(t-A.is-open) );
assert( not(t-B.is-open) );
assert( not(t-AB.is-open) );
assert( t-x.is-open );
assert( t-Ax.is-open );
assert( t-Ax.r1.is-open );
assert( t-C.is-open );

# .is-arrow tests
assert( not(t-A.is-arrow) );
assert( not(t-B.is-arrow) );
assert( not(t-AB.is-arrow) );
assert( not(t-x.is-arrow) );
assert( not(t-Ax.is-arrow) );
assert( not(t-C.is-arrow) );
assert( t-f.is-arrow );
assert( t-g.is-arrow );
assert( t-g.r2.is-arrow );

# domain / range tests
assert( t-f.domain.is-t(c"A") );
assert( t-f.range.is-t(c"B") );
assert( t-g.domain.is-t(c"A") );
assert( t-g.range.is-t(c"B") );

# .has-class tests
assert( t-A.has-class );
assert( t-B.has-class );
assert( t-AB.has-class );
assert( not(t-x.has-class) );
assert( t-Ax.has-class );
assert( t-C.has-class );
assert( t-f.has-class );
assert( t-g.has-class );

# .arity synthesized field
assert( t-A.arity == 0 );
assert( t-B.arity == 1 );
assert( t-AB.arity == 0 );
assert( t-x.arity == 0 );
assert( t-Ax.arity == 0 );
assert( t-C.arity == 1 );
assert( t-f.arity == 2 );
assert( t-g.arity == 2 );

# .arity synthesized field
assert( t-A.slot(c"A") == t-A );
assert( t-A.slot(c"B") == ta );
assert( t-B.slot(c"A") == ta );
assert( t-B.slot(c"B") == t-B );
assert( t-AB.slot(c"A") == t-A );
assert( t-AB.slot(c"B") == t-B );
assert( t-x.slot(c"A") == ta );
assert( t-Ax.slot(c"A") == t-A );
assert( t-C.slot(c"C") == t-C );
assert( t-f.slot(c"Arrow") == t-f );
assert( t-g.slot(c"Array") == t-g );

# .without-tag synthesized field
assert( is(t-A.without-tag, t-A) );
assert( is(t2(c"Constructor", t-A).without-tag, ta) );
assert( is(t2(c"CaseNumber", t1(c"0")).without-tag, ta) );
assert( is(t2(c"Raw", t-A).without-tag, ta) );

