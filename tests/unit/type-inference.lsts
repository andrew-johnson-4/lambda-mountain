
import std/default.lsts;
import SRC/unit-inference.lsts;

let t-A = t1(c"A");
let t-B = t2(c"B", t-A);
let t-C = t1(c"C");
let t-x = tv(c"x");
let t-array-x = t3(c"Array", t-x, TAny);
let t-array-A = t3(c"Array", t-A, TAny);
let t-f = t3(c"Arrow", t-array-x, t-x);
let t-g = t3(c"Arrow", t-x, t-array-x);

add-quick-prop(t-A, TAny, t-C);
add-weaken-quick-prop(t-A, t-C, t-C);
let t-AC = t-A && t-C;

let t-array-A-d = denormalize(t3(c"Array", denormalize(t-A), TAny));

# simple inferences

assert( t-A == t-A );
assert( normalize(t-AC) == t-A );

assert( normalize(denormalize(t-A)) == t-A );
assert( normalize(denormalize(t-B)) == t-B );

if true {
   let tctx = unify(t-array-x, t-array-A-d);
   assert( substitute(tctx, t-array-x) == t-array-A );
};

if true {
   let tctx = unify(t-array-x, t-array-A-d);
   assert( substitute(tctx, t-x) == t-A );
};

let t-f1 = normalize(t3(c"Arrow", t-A, t-A));
let t-f2 = normalize(t3(c"Arrow", t-C, t-A));
let t-f3 = normalize(t3(c"Arrow", t-A, t-C));
let t-f4 = t3(c"Arrow", t-x, t-x);
let t-f5 = t3(c"Arrow", t-x, t-A);
let t-f6 = t3(c"Arrow", t-A, t-x);

# assert( not(can-unify(t-f2, t-f1)) ); # needs strong quick-prop inference
# assert( can-unify(t-f3, t-f1) );

assert( can-unify(t-f1, t-f4) );
assert( not(can-unify(t-f4, t-f1)) );
assert( can-unify(t-f1, t-f5) );
assert( not(can-unify(t-f1, t-f6)) );
