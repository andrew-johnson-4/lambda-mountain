
import std/default.lsts;

typed macro ast-macros-test-add(x: U64, y: lazy): lazy = (
   x + y
);
typed macro ast-macros-test-add(x: I64, y: lazy): lazy = (
   x + y
);

assert( ast-macros-test-add(1_u64, 2_u64) == 3_u64 );
assert( ast-macros-test-add(2_i64, 3_i64) == 5_i64 );

(
   let x = mk-vector(type(U64)).push(1).push(2);
   $"macro::set"($"macro::lhs-index"(x,0), 3);
   $"macro::set"($"macro::lhs-index"(x,1), 4);
   print(x);
);

type A = {a:U64};
(
   let a = A(1);
   $"macro::set"($"macro::lhs-field"(a,a), 2);
   print(a.a);
);

(
   let wi = 0_u64;
   macro::while( wi < 4, ( print(wi); wi = wi + 1; ) )
);

macro::assert(true);

match2 123 { _ => print("_"); };
match2 123 { 123 => print(123); };
match2 456 { x => print(x); };
match2 789 { x where x < 100 => print("no"); x where x > 456 => print(x); };
match2 "abc" { "a"..bc => print("a\{bc}"); };
match2 "def" { d.."ef" => print("\{d}ef"); };
match2 "abc" { a="a"..bc => print("\{a}\{bc}"); };
match2 "def" { d..ef="ef" => print("\{d}\{ef}"); };

match2 [1,2,3] { [x=1.. y.. z] => print("\{x}\{y}\{z}"); };
match2 [4,5,6] { [xyz] => print("\{xyz}"); };
match2 [] : List<U64> { [] => print("[]"); };

match2 (A(123)) {
   _{} => print("_");
};

match2 (A(123)) {
   A => print("A");
};

match2 (A(123)) {
   A{a:123} => print(".");
};
match2 (A(123)) {
   A{a=a} => print(a);
};
match2 (A(123)) {
   A{a=a:123} => print(a);
};
match2 (A(123)) {
   A{let a=a} => print(a);
};
match2 (A(123)) {
   A{let raw a=a} => print(a);
};
match2 (A(123)) {
   A{let a=a:123} => print(a);
};
match2 (A(123)) {
   A{let raw a=a:123} => print(a);
};
(
   let x = 555;
   match2 (A(123)) {
      A{set x=a} => print(x);
   };
   match2 (A(123)) {
      A{set x=a:123} => print(x);
   };
   match2 (A(123)) {
      A{set raw x=a} => print(x);
   };
   match2 (A(123)) {
      A{set raw x=a:123} => print(x);
   };
);

type ABCD = AB{ab:U64} | CD{cd:U64};

match2 AB(1) { AB{ab=ab} => print(ab); };
match2 CD(1) { CD{cd=cd} => print(cd); };

type ABC = { a:U64, b:U64, c:U64 };
match2 ABC(1,2,3) { ABC{a:1, b=b, let c=c} => print("1\{b}\{c}"); };

print(match2 ABC(1,2,3) {
   ABC{} => (1; 2);
});

