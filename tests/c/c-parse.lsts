
import std/default.lsts;
import SRC/unit-ast.lsts;
import SRC/unit-drivers.lsts;
import SRC/unit-globals.lsts;
import SRC/unit-inference.lsts;
import SRC/unit-fragments.lsts;
import SRC/unit-orphans.lsts;
import SRC/unit-error.lsts;
import PLUGINS/FRONTEND/C/index-index.lm;
import PLUGINS/FRONTEND/C/index-index.lm;

std-c-enumeration-constant-index = std-c-enumeration-constant-index.bind("enum1case", true);
std-c-typedef-name-index = std-c-typedef-name-index.bind("td1", true);

# helpers
if true then { 
   let tokens = std-c-tokenize-string("[+]", "+");
   assert( tokens.length == 1 );
   assert( is(tokens, std-c-take-maybe(tokens, "-")) );
   assert( std-c-can-take(tokens, "-") == false );
   assert( std-c-can-take(tokens, "+") == true );
   assert( is(tail(tokens), std-c-take-expect(tokens, "+")) );
   assert( is(tail(tokens), std-c-take-maybe(tokens, "+")) );
};

# assignment operators
if true then { 
   let abc = std-c-tokenize-string("ab", "ab");
   assert( std-c-parse-assignment-operator(abc).first == None : Maybe<String> );
   if true then {
      let tokens = std-c-tokenize-string("[=]", "=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[*=]", "*=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"*="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[/=]", "/=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"/="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[%=]", "%=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"%="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[+=]", "+=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"+="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[-=]", "-=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"-="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[<<=]", "<<=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"<<="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[>>=]", ">>=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{">>="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[&=]", "&=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"&="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[^=]", "^=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"^="} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[|=]", "|=");
      assert( std-c-parse-assignment-operator(tokens).first == Some{"|="} );
   };
};

if true then { 
   let abc = std-c-tokenize-string("ab", "ab");
   assert( std-c-parse-unary-operator(abc).first == None : Maybe<String> );
   if true then {
      let tokens = std-c-tokenize-string("[&]", "&");
      assert( std-c-parse-unary-operator(tokens).first == Some{"&"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[*]", "*");
      assert( std-c-parse-unary-operator(tokens).first == Some{"*"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[+]", "+");
      assert( std-c-parse-unary-operator(tokens).first == Some{"+"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[-]", "-");
      assert( std-c-parse-unary-operator(tokens).first == Some{"-"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[~]", "~");
      assert( std-c-parse-unary-operator(tokens).first == Some{"~"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[!]", "!");
      assert( std-c-parse-unary-operator(tokens).first == Some{"!"} );
   };
};

if true then { 
   let abc = std-c-tokenize-string("ab", "ab");
   assert( std-c-parse-struct-or-union(abc).first == None : Maybe<String> );
   if true then {
      let tokens = std-c-tokenize-string("[struct]", "struct");
      assert( std-c-parse-struct-or-union(tokens).first == Some{"struct"} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[union]", "union");
      assert( std-c-parse-struct-or-union(tokens).first == Some{"union"} );
   };
};

if true then { 
   if true then {
      let tokens = std-c-tokenize-string("[abc]", "ab");
      assert( std-c-parse-identifier(tokens).first == Some{CIdentifier{"ab"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[ABC]", "AB");
      assert( std-c-parse-identifier(tokens).first == Some{CIdentifier{"AB"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("_0", "_0");
      assert( std-c-parse-identifier(tokens).first == Some{CIdentifier{"_0"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[int]", "int");
      assert( std-c-parse-identifier(tokens).first == None : Maybe<CTerm> );
   };
};

if true then { 
   let abc = std-c-tokenize-string("ab", "ab");
   assert( std-c-parse-constant(abc).first == None : Maybe<CTerm> );
   if true then {
      let tokens = std-c-tokenize-string("[0123456789]", "0123456789");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0123456789"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0x0123456789aAbBcCdDeEfF]", "0x0123456789aAbBcCdDeEfF");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0x0123456789aAbBcCdDeEfF"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0b01]", "0b01");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0b01"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0ulwb]", "0ulwb");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0ulwb"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0UllWB]", "0UllWB");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0UllWB"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0ULLWB]", "0ULLWB");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0ULLWB"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("[0ULWB]", "0ULWB");
      assert( std-c-parse-constant(tokens).first == Some{CInteger{"0ULWB"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("'a'", "'a'");
      assert( std-c-parse-constant(tokens).first == Some{CCharacter{"'a'"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("u8'\\''", "u8'\\''");
      assert( std-c-parse-constant(tokens).first == Some{CCharacter{"u8'\\''"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("L'\\0'", "L'\\0'");
      assert( std-c-parse-constant(tokens).first == Some{CCharacter{"L'\\0'"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("u'\\u123'", "u'\\u123'");
      assert( std-c-parse-constant(tokens).first == Some{CCharacter{"u'\\u123'"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("0.2", "0.2");
      assert( std-c-parse-constant(tokens).first == Some{CFloating{"0.2"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("1e2f", "1e2f");
      assert( std-c-parse-constant(tokens).first == Some{CFloating{"1e2f"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("0x3p2", "0x3p2");
      assert( std-c-parse-constant(tokens).first == Some{CFloating{"0x3p2"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("enum1case", "enum1case");
      assert( std-c-parse-constant(tokens).first == Some{CEnumeration{"enum1case"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("\"abc\"", "\"abc\"");
      assert( std-c-parse-string(tokens).first == Some{CString{"\"abc\""}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("u8\"abc\"", "u8\"abc\"");
      assert( std-c-parse-string(tokens).first == Some{CString{"u8\"abc\""}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("__func__", "__func__");
      assert( std-c-parse-string(tokens).first == Some{CString{"__func__"}} );
   };
};

if true then { 
   if true then {
      let tokens = std-c-tokenize-string("123", "123");
      assert( std-c-parse-identifier-list(tokens).first.is-none );
      assert( is(std-c-parse-identifier-list(tokens).second, tokens) );
   };
   if true then {
      let tokens = std-c-tokenize-string("a", "a");
      assert( std-c-parse-identifier-list(tokens).first == Some{["a"]} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a, _1", "a, _1");
      assert( std-c-parse-identifier-list(tokens).first == Some{["a","_1"]} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a", "a");
      assert( std-c-parse-primary-expression(tokens).first == Some{CIdentifier{"a"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("1", "1");
      assert( std-c-parse-primary-expression(tokens).first == Some{CInteger{"1"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("1.0", "1.0");
      assert( std-c-parse-primary-expression(tokens).first == Some{CFloating{"1.0"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("enum1case", "enum1case");
      assert( std-c-parse-primary-expression(tokens).first == Some{CEnumeration{"enum1case"}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("\"a\"", "\"a\"");
      assert( std-c-parse-primary-expression(tokens).first == Some{CString{"\"a\""}} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a++", "a++");
      assert( std-c-parse-postfix-expression(tokens).first == Some{CUnaryPostfix{"++",close(CIdentifier{"a"})}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a--", "a--");
      assert( std-c-parse-postfix-expression(tokens).first == Some{CUnaryPostfix{"--",close(CIdentifier{"a"})}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a.f", "a.f");
      assert( std-c-parse-postfix-expression(tokens).first == Some{CAccessor{".","f",close(CIdentifier{"a"})}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a->f", "a->f");
      assert( std-c-parse-postfix-expression(tokens).first == Some{CAccessor{"->","f",close(CIdentifier{"a"})}} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("++a++", "++a++");
      assert( std-c-parse-unary-expression(tokens).first == Some{CUnaryPrefix{"++",close(CUnaryPostfix{"++",close(CIdentifier{"a"})})}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("--a++", "--a++");
      assert( std-c-parse-unary-expression(tokens).first == Some{CUnaryPrefix{"--",close(CUnaryPostfix{"++",close(CIdentifier{"a"})})}} );
   };
   if true then {
      let tokens = std-c-tokenize-string("sizeof a++", "sizeof a++");
      assert( std-c-parse-unary-expression(tokens).first == Some{CUnaryPrefix{"sizeof",close(CUnaryPostfix{"++",close(CIdentifier{"a"})})}} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a * b * c", "a * b * c");
      assert( std-c-parse-multiplicative-expression(tokens).first == Some{CBinaryOp{"*",
         close(CBinaryOp{"*",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a / b / c", "a / b / c");
      assert( std-c-parse-multiplicative-expression(tokens).first == Some{CBinaryOp{"/",
         close(CBinaryOp{"/",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a % b % c", "a % b % c");
      assert( std-c-parse-multiplicative-expression(tokens).first == Some{CBinaryOp{"%",
         close(CBinaryOp{"%",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a + b + c", "a + b + c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"+",
         close(CBinaryOp{"+",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a - b - c", "a - b - c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"-",
         close(CBinaryOp{"-",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a + b * c", "a + b * c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"+",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"*",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a - b * c", "a - b * c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"-",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"*",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a * b + c", "a * b + c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"+",
         close(CBinaryOp{"*",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a * b - c", "a * b - c");
      assert( std-c-parse-additive-expression(tokens).first == Some{CBinaryOp{"-",
         close(CBinaryOp{"*",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a >> b >> c", "a >> b >> c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{">>",
         close(CBinaryOp{">>",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a << b << c", "a << b << c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{"<<",
         close(CBinaryOp{"<<",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a >> b + c", "a >> b + c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{">>",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"+",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a << b + c", "a << b + c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{"<<",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"+",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a + b >> c", "a + b >> c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{">>",
         close(CBinaryOp{"+",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a + b << c", "a + b << c");
      assert( std-c-parse-shift-expression(tokens).first == Some{CBinaryOp{"<<",
         close(CBinaryOp{"+",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a > b > c", "a > b > c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{">",
         close(CBinaryOp{">",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a < b < c", "a < b < c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{"<",
         close(CBinaryOp{"<",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a >= b >= c", "a >= b >= c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{">=",
         close(CBinaryOp{">=",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a <= b <= c", "a <= b <= c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{"<=",
         close(CBinaryOp{"<=",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a > b >> c", "a > b >> c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{">",
         close(CIdentifier{"a"}),
         close(CBinaryOp{">>",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a >> b > c", "a >> b > c");
      assert( std-c-parse-relational-expression(tokens).first == Some{CBinaryOp{">",
         close(CBinaryOp{">>",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a == b == c", "a == b == c");
      assert( std-c-parse-equality-expression(tokens).first == Some{CBinaryOp{"==",
         close(CBinaryOp{"==",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a != b != c", "a != b != c");
      assert( std-c-parse-equality-expression(tokens).first == Some{CBinaryOp{"!=",
         close(CBinaryOp{"!=",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a == b > c", "a == b > c");
      assert( std-c-parse-equality-expression(tokens).first == Some{CBinaryOp{"==",
         close(CIdentifier{"a"}),
         close(CBinaryOp{">",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a > b == c", "a > b == c");
      assert( std-c-parse-equality-expression(tokens).first == Some{CBinaryOp{"==",
         close(CBinaryOp{">",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a & b & c", "a & b & c");
      assert( std-c-parse-and-expression(tokens).first == Some{CBinaryOp{"&",
         close(CBinaryOp{"&",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a & b == c", "a & b == c");
      assert( std-c-parse-and-expression(tokens).first == Some{CBinaryOp{"&",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"==",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a == b & c", "a == b & c");
      assert( std-c-parse-and-expression(tokens).first == Some{CBinaryOp{"&",
         close(CBinaryOp{"==",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a ^ b ^ c", "a ^ b ^ c");
      assert( std-c-parse-exclusive-or-expression(tokens).first == Some{CBinaryOp{"^",
         close(CBinaryOp{"^",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a ^ b & c", "a ^ b & c");
      assert( std-c-parse-exclusive-or-expression(tokens).first == Some{CBinaryOp{"^",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"&",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a & b ^ c", "a & b ^ c");
      assert( std-c-parse-exclusive-or-expression(tokens).first == Some{CBinaryOp{"^",
         close(CBinaryOp{"&",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a | b | c", "a | b | c");
      assert( std-c-parse-inclusive-or-expression(tokens).first == Some{CBinaryOp{"|",
         close(CBinaryOp{"|",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a | b ^ c", "a | b ^ c");
      assert( std-c-parse-inclusive-or-expression(tokens).first == Some{CBinaryOp{"|",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"^",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a ^ b | c", "a ^ b | c");
      assert( std-c-parse-inclusive-or-expression(tokens).first == Some{CBinaryOp{"|",
         close(CBinaryOp{"^",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a && b && c", "a && b && c");
      assert( std-c-parse-logical-and-expression(tokens).first == Some{CBinaryOp{"&&",
         close(CBinaryOp{"&&",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a && b | c", "a && b | c");
      assert( std-c-parse-logical-and-expression(tokens).first == Some{CBinaryOp{"&&",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"|",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a | b && c", "a | b && c");
      assert( std-c-parse-logical-and-expression(tokens).first == Some{CBinaryOp{"&&",
         close(CBinaryOp{"|",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a || b || c", "a || b || c");
      assert( std-c-parse-logical-or-expression(tokens).first == Some{CBinaryOp{"||",
         close(CBinaryOp{"||",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a || b && c", "a || b && c");
      assert( std-c-parse-logical-or-expression(tokens).first == Some{CBinaryOp{"||",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"&&",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a && b || c", "a && b || c");
      assert( std-c-parse-logical-or-expression(tokens).first == Some{CBinaryOp{"||",
         close(CBinaryOp{"&&",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a *= b *= c", "a *= b *= c");
      assert( std-c-parse-assignment-expression(tokens).first == Some{CBinaryOp{"*=",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"*=",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a = b && c", "a = b && c");
      assert( std-c-parse-assignment-expression(tokens).first == Some{CBinaryOp{"=",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"&&",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a , b , c", "a , b , c");
      assert( std-c-parse-expression(tokens).first == Some{CBinaryOp{",",
         close(CBinaryOp{",",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a = b , c", "a = b , c");
      assert( std-c-parse-expression(tokens).first == Some{CBinaryOp{",",
         close(CBinaryOp{"=",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("a , b = c", "a , b = c");
      assert( std-c-parse-expression(tokens).first == Some{CBinaryOp{",",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"=",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
};

if true then {
   if true then {
      let tokens = std-c-tokenize-string("a + (b + c)", "a + (b + c)");
      assert( std-c-parse-expression(tokens).first == Some{CBinaryOp{"+",
         close(CIdentifier{"a"}),
         close(CBinaryOp{"+",
            close(CIdentifier{"b"}),
            close(CIdentifier{"c"})
         })
      }} );
   };
   if true then {
      let tokens = std-c-tokenize-string("(a + b) + c", "(a + b) + c");
      assert( std-c-parse-expression(tokens).first == Some{CBinaryOp{"+",
         close(CBinaryOp{"+",
            close(CIdentifier{"a"}),
            close(CIdentifier{"b"})
         }),
         close(CIdentifier{"c"})
      }} );
   };
};

if true then {
   assert( std-c-parse-type-specifier(std-c-tokenize-string("void", "void")).first == Some{CType1{"void"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("char", "char")).first == Some{CType1{"char"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("short", "short")).first == Some{CType1{"short"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("int", "int")).first == Some{CType1{"int"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("long", "long")).first == Some{CType1{"long"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("float", "float")).first == Some{CType1{"float"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("double", "double")).first == Some{CType1{"double"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("signed", "signed")).first == Some{CType1{"signed"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("unsigned", "unsigned")).first == Some{CType1{"unsigned"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("_Bool", "_Bool")).first == Some{CType1{"_Bool"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("_Complex", "_Complex")).first == Some{CType1{"_Complex"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("_Imaginary", "_Imaginary")).first == Some{CType1{"_Imaginary"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("td1", "td1")).first == Some{CType1{"td1"}} );
   assert( std-c-parse-type-specifier(std-c-tokenize-string("td2", "td2")).first == (None : Maybe<CTerm>) );
};

if true then {
   assert( std-c-parse-specifier-qualifier(std-c-tokenize-string("void", "void")).first == Some{CType1{"void"}} );
   assert( std-c-parse-specifier-qualifier(std-c-tokenize-string("const", "const")).first == Some{CType1{"const"}} );
   assert( std-c-parse-specifier-qualifier(std-c-tokenize-string("volatile", "volatile")).first == Some{CType1{"volatile"}} );
   assert( std-c-parse-specifier-qualifier(std-c-tokenize-string("restrict", "restrict")).first == Some{CType1{"restrict"}} );
   assert( std-c-parse-specifier-qualifier(std-c-tokenize-string("_Atomic", "_Atomic")).first == Some{CType1{"_Atomic"}} );
};

if true then {
   assert( std-c-parse-specifier-qualifier-list(std-c-tokenize-string("td2", "td2")).first == (None : Maybe<List<CTerm>>) );
   assert( std-c-parse-specifier-qualifier-list(std-c-tokenize-string("void", "void")).first == Some{[CType1{"void"}]} );
   assert( std-c-parse-specifier-qualifier-list(std-c-tokenize-string("void void", "void void")).first == Some{[CType1{"void"},CType1{"void"}]} );
};

if true then {
   assert( std-c-parse-jump-statement(std-c-tokenize-string("continue;", "continue;")).first == Some{CZOp{"continue"}} );
   assert( std-c-parse-jump-statement(std-c-tokenize-string("break;", "break;")).first == Some{CZOp{"break"}} );
   assert( std-c-parse-jump-statement(std-c-tokenize-string("return;", "return;")).first == Some{CZOp{"return"}} );
   assert( std-c-parse-jump-statement(std-c-tokenize-string("goto a;", "goto a;")).first == Some{CUnaryPrefix{"goto",close(CIdentifier{"a"})}} );
   assert( std-c-parse-jump-statement(std-c-tokenize-string("return a;", "return a;")).first == Some{CUnaryPrefix{"return",close(CIdentifier{"a"})}} );
};

if true then {
   assert( std-c-parse-statement(std-c-tokenize-string(";", ";")).first == Some{CZOp{";"}} );
   assert( std-c-parse-statement(std-c-tokenize-string("a;", "a;")).first == Some{CIdentifier{"a"}} );
   assert( std-c-parse-statement(std-c-tokenize-string("return a;", "return a;")).first == Some{CUnaryPrefix{"return",close(CIdentifier{"a"})}} );
};

if true then {
   assert( std-c-parse-statement(std-c-tokenize-string("while(a) b;", "while(a) b;")).first == Some{CBinaryOp{"while",close(CIdentifier{"a"}),close(CIdentifier{"b"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("do a; while(b);", "do a; while(b);")).first == Some{CBinaryOp{"do",close(CIdentifier{"a"}),close(CIdentifier{"b"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("for(a;b;c)d;", "for(a;b;c)d;")).first ==
           Some{CFor{"for",close(Some{CIdentifier{"a"}}),close(Some{CIdentifier{"b"}}),close(Some{CIdentifier{"c"}}),close(CIdentifier{"d"})}} );
};

if true then {
   assert( std-c-parse-statement(std-c-tokenize-string("if(a) b;", "if(a) b;")).first == Some{CTernaryOp{"if",close(CIdentifier{"a"}),close(CIdentifier{"b"}),close(CZOp{";"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("if(a) b; else c;", "if(a) b; else c;")).first == Some{CTernaryOp{"if",close(CIdentifier{"a"}),close(CIdentifier{"b"}),close(CIdentifier{"c"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("switch(a) b;", "switch(a) b;")).first == Some{CBinaryOp{"switch",close(CIdentifier{"a"}),close(CIdentifier{"b"})}} );
};

if true then {
   assert( std-c-parse-statement(std-c-tokenize-string("a: b;", "a: b;")).first == Some{CBinaryOp{":",close(CIdentifier{"a"}),close(CIdentifier{"b"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("case 1: b;", "case 1: b;")).first == Some{CBinaryOp{"case",close(CInteger{"1"}),close(CIdentifier{"b"})}} );
   assert( std-c-parse-statement(std-c-tokenize-string("default: b;", "default: b;")).first == Some{CUnaryPrefix{"default",close(CIdentifier{"b"})}} );
};

if true then {
   assert( std-c-parse-statement(std-c-tokenize-string("{}", "{}")).first == Some{CCompound{close([] : List<CTerm>)}} );
   assert( std-c-parse-statement(std-c-tokenize-string("{a;}", "{a;}")).first == Some{CCompound{close([CIdentifier{"a"}])}} );
   assert( std-c-parse-statement(std-c-tokenize-string("{a; b;}", "{a; b;}")).first == Some{CCompound{close([CIdentifier{"a"},CIdentifier{"b"}])}} );
};

if true then {
   assert( std-c-parse-initializer(std-c-tokenize-string("{a,b}", "{a,b}")).first ==
      Some{CInitializerList{close([
         CInitializer{ close([] : List<CTerm>), close(CIdentifier{"a"}) },
         CInitializer{ close([] : List<CTerm>), close(CIdentifier{"b"}) }
      ])}}
   );
   assert( std-c-parse-initializer(std-c-tokenize-string("{.a[b]=c}", "{.a[b]=c}")).first ==
      Some{CInitializerList{close([
         CInitializer{ close([
            CUnaryPrefix{".",close(CIdentifier{"a"})},
            CUnaryPrefix{"[",close(CIdentifier{"b"})}
         ]), close(CIdentifier{"c"}) },
      ])}}
   );
};

if true then {
   assert( std-c-parse-pointer(std-c-tokenize-string("*", "*")).first ==
      Some{CPointer{ close(None : Maybe<List<CTerm>>), close(None : Maybe<CTerm>) }}
   );
   assert( std-c-parse-pointer(std-c-tokenize-string("*const", "*const")).first ==
      Some{CPointer{ close(Some{[ CType1("const") ]}), close(None : Maybe<CTerm>) }}
   );
   assert( std-c-parse-pointer(std-c-tokenize-string("*const*", "*const*")).first ==
      Some{CPointer{ close(Some{[ CType1("const") ]}), close(
         Some{CPointer{ close(None : Maybe<List<CTerm>>), close(None : Maybe<CTerm>) }}
      )}}
   );
};

if true then {
   assert( std-c-parse-abstract-declarator(std-c-tokenize-string("()", "()")).first == Some{CUnaryPrefix{
      "AbstractDeclarator",
      close(CZOp{"("})
   }} );
   assert( std-c-parse-abstract-declarator(std-c-tokenize-string("*()", "*()")).first == Some{CBinaryOp{
      "AbstractDeclarator",
      close(CPointer{ close(None : Maybe<List<CTerm>>), close(None : Maybe<CTerm>) }),
      close(CUnaryPrefix{"AbstractDeclarator", close(CZOp{"("}) })
   }} );
   assert( std-c-parse-abstract-declarator(std-c-tokenize-string("[]", "[]")).first == Some{CUnaryPrefix{
      "AbstractDeclarator",
      close(CZOp{"["})
   }} );
   assert( std-c-parse-abstract-declarator(std-c-tokenize-string("[*]", "[*]")).first == Some{CBinaryOp{
      "AbstractDeclarator",
      close(CZOp{"["}),
      close(CType1{"*"})
   }} );
};

if true then {
   assert( std-c-parse-type-name(std-c-tokenize-string("short int", "short int")).first == Some{CBinaryOp{
      "TypeName",
      close(CList{close([ CType1{"short"}, CType1{"int"} ])}),
      close(CMaybe{close( None : Maybe<CTerm> )})
   }} );
};

if true then {
   assert( std-c-parse-type-name(std-c-tokenize-string("_Atomic(short int)", "_Atomic(short int)")).first == Some{CBinaryOp{
      "TypeName",
      close(CList{close([
         CUnaryPrefix{
            "_Atomic",
            close(CBinaryOp{
               "TypeName",
               close(CList{close([ CType1{"short"}, CType1{"int"} ])}),
               close(CMaybe{close( None : Maybe<CTerm> )})
            })
         }
      ])}),
      close(CMaybe{close( None : Maybe<CTerm> )})
   }});
};

if true then {
   assert( std-c-parse-generic-association(std-c-tokenize-string("default: a", "default: a")).first == Some{CUnaryPrefix{
      "GenericAssociation",
      close(CIdentifier{"a"})
   }} );
   assert( std-c-parse-generic-association(std-c-tokenize-string("short int: a", "short int: a")).first == Some{CBinaryOp{
      "GenericAssociation",
      close(CBinaryOp{
         "TypeName",
         close(CList{close([ CType1{"short"}, CType1{"int"} ])}),
         close(CMaybe{close( None : Maybe<CTerm> )})
      }),
      close(CIdentifier{"a"})
   }} );
};

if true then {
   assert( std-c-parse-generic-association(std-c-tokenize-string("default: a", "default: a")).first == Some{CUnaryPrefix{
      "GenericAssociation",
      close(CIdentifier{"a"})
   }} );
   assert( std-c-parse-generic-association(std-c-tokenize-string("short int: a", "short int: a")).first == Some{CBinaryOp{
      "GenericAssociation",
      close(CBinaryOp{
         "TypeName",
         close(CList{close([ CType1{"short"}, CType1{"int"} ])}),
         close(CMaybe{close( None : Maybe<CTerm> )})
      }),
      close(CIdentifier{"a"})
   }} );
};

if true then {
   assert( std-c-parse-expression(std-c-tokenize-string("_Generic(1, default: a)", "_Generic(1, default: a)")).first == Some{CBinaryOp{
      "_Generic",
      close(CInteger{"1"}),
      close(CList{close([
         CUnaryPrefix{
            "GenericAssociation",
            close(CIdentifier{"a"})
         }
      ])})
   }} );
   assert( std-c-parse-expression(std-c-tokenize-string("_Generic(1, short int: a, default: b)", "_Generic(1, short int: a, default: b)")).first == Some{CBinaryOp{
      "_Generic",
      close(CInteger{"1"}),
      close(CList{close([
         CBinaryOp{
            "GenericAssociation",
            close(CBinaryOp{
               "TypeName",
               close(CList{close([ CType1{"short"}, CType1{"int"} ])}),
               close(CMaybe{close( None : Maybe<CTerm> )})
            }),
            close(CIdentifier{"a"})
         },
         CUnaryPrefix{
            "GenericAssociation",
            close(CIdentifier{"b"})
         }
      ])})
   }} );
};

if true then {
   assert( std-c-parse-declaration-specifiers(std-c-tokenize-string("extern _Noreturn", "extern _Noreturn")).first == Some{CList{close([
      CType1{"extern"},
      CType1{"_Noreturn"}
   ])}} );
};

if true then {
   assert( std-c-parse-enumerator(std-c-tokenize-string("abc = 1", "abc = 1")).first == Some{CBinaryOp{
      "Enumerator",
      close(CIdentifier{"abc"}),
      close(CMaybe{close(Some{ CInteger{"1"} })})
   }} );
   assert( std-c-parse-enumerator(std-c-tokenize-string("abc", "abc")).first == Some{CBinaryOp{
      "Enumerator",
      close(CIdentifier{"abc"}),
      close(CMaybe{close( None : Maybe<CTerm> )})
   }} );
};
