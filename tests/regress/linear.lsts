
import lib/std/default.lsts;

type phi MustChomp = ToChomp { x: 'a } | Chomped;

let to-chomp(x: U64): U64+MustChomp::ToChomp<'a> = x;

let chomp(x: x+(MustChomp::ToChomp<'a> ~> MustChomp::Chomped)): Nil = ();
let send-chomp(x: U64+MustChomp::ToChomp<'s>): Nil = (
   chomp(x);
);

type A implied phi MustChomp::ToChomp<'a> = { a: U64 };

# simple case: open linear type and close it
if true {
   let x = to-chomp(1);
   chomp(x);
};

# merge case: open two linear types and merge them
if true {
   let x = $"if" (true) (
      let inner = to-chomp(1);
      print("typeof(inner) = \{typeof(inner)}\n");
      inner
   ) (
      let outer = to-chomp(2);
      print("typeof(outer) = \{typeof(outer)}\n");
      outer
   );
   chomp(x);
   send-chomp(to-chomp(3));
};

# move case: transfer ownership during move
if true {
   let x = to-chomp(1);
   let y = to-chomp(1);
   chomp(y);
   y = x;
   chomp(y);
};

let f(x: A): A = (
   x
);

chomp(f(A(1)));
