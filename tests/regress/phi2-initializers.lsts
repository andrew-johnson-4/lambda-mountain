
import lib/std/default.lsts;

let f(): U64+Phi::Initialize<A>;
let g(): U64+T<Phi::Initialize<B>>;

let x = f();
print("typeof(x) = \{typeof(x)}\n"); # x : U64+Phi::State<A>

let y = g();
print("typeof(y) = \{typeof(y)}\n"); # y : U64+T<Phi::State<B>>

# Let's just start with phi annotations directly on locals and globals
# nested phi on fields is complicated and potentially unnecessary distraction and/or unsound

# This is enough to implement garbage collection, so let's be conservative to start and extend later
