
import LIB/default.lsts;

type Inner = { x: U64+Phi::State<X> } | InnerA { y: U64+Phi::State<Y> } || InnerB{ z: U64+Phi::State<Z> };
type Outer = { x: Inner } | OuterA { y: Inner } | OuterB { z: Inner } ;

let inner1 = InnerA(1, 2); # inner1 : Inner+Field::x<U64+Phi:State<123>>+Field::y<U64+Phi:State<456>>+Phi::State<123,X>+Phi::State<456,Y>
print("typeof(inner1)           = \{typeof(inner1)}\n")

let inner2 = InnerB(1, 2); # inner2 : Inner+Field::x<U64+Phi:State<789>>+Field::z<U64+Phi:State<000>>+Phi::State<789,X>+Phi::State<000,Z>
print("typeof(inner2)           = \{typeof(inner2)}\n")

let outer1 = OuterA(inner1, inner1); # outer1 : Outer
                                     # +Field::x<Inner+Field::x<U64+Phi:State<123>+Field::y<U64+Phi:State<456>>
                                     # +Field::y<Inner+Field::x<U64+Phi:State<123>+Field::y<U64+Phi:State<456>>
print("typeof(outer1)           = \{typeof(outer1)}\n")

let outer2 = OuterB(inner1, inner2); # outer2 : Outer
                                     # +Field::x<Inner+Field::x<U64+Phi:State<123>+Field::y<U64+Phi:State<456>>
                                     # +Field::z<Inner+Field::x<U64+Phi:State<789>+Field::z<U64+Phi:State<000>>
print("typeof(outer2)           = \{typeof(outer2)}\n")

outer1.x = inner2;                   # outer1 : Outer
                                     # +Field::x<Inner+Field::x<U64+Phi:State<789>+Field::z<U64+Phi:State<000>>
                                     # +Field::y<Inner+Field::x<U64+Phi:State<123>+Field::y<U64+Phi:State<456>>
print("typeof(outer1) post edit = \{typeof(outer1)}\n")
