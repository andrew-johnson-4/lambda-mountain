
import lib/std/default.lsts;

type phi MustRelease = ToRelease { x: 'a } | Released;

let :Phi::Source to-delete(x: U64): U64+MustRelease::ToRelease<'a> = x;

let mark-as-deleted(x: U64+(MustRelease::ToRelease<'a> ~> MustRelease::Released)): Nil = ();

let .release(x: U64+MustRelease::ToRelease<'a>): Nil = (
   print("Deleted\n");
   mark-as-Released(x);
);

let f(): Nil = (
   to-delete(123);         # delete if expression is unused
   let x = to-delete(123); # delete at end of scope
   let y = to-delete(456); # delete at end of scope
   ()
);

f();
