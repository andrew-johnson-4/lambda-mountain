
import lib2/core/bedrock.lsts;

assert( 1_u8 == 1_u8 );
assert( 2_u8 == 2_u8 );
assert( not(2_u8 == 1_u8) );
assert( 2_u8 != 1_u8 );
assert( 1_u8 != 2_u8 );
assert( not(1_u8 != 1_u8) );
assert( 2_u8 <= 2_u8 );
assert( 2_u8 <= 3_u8 );
assert( not(2_u8 < 2_u8) );
assert( 2_u8 < 3_u8 );
assert( 2_u8 >= 2_u8 );
assert( 3_u8 >= 2_u8 );
assert( not(2_u8 >= 3_u8) );
assert( 3_u8 > 2_u8 );
assert( not(2_u8 > 2_u8) );

assert( 4_u8 & 4_u8 == 4_u8 );
assert( 12_u8 & 4_u8 == 4_u8 );
assert( 4_u8 | 4_u8 == 4_u8 );
assert( 12_u8 | 4_u8 == 12_u8 );
assert( 4_u8 ^ 4_u8 == 0_u8 );
assert( 12_u8 ^ 4_u8 == 8_u8 );
assert( ~4_u8 == 251_u8 );

assert( 2_u8 + 2_u8 == 4_u8 );
assert( 2_u8 - 2_u8 == 0_u8 );
assert( 5_u8 / 3_u8 == 1_u8 );
assert( 5_u8 % 3_u8 == 2_u8 );
assert( 5_u8 * 3_u8 == 15_u8 );

assert( min(1_u8, 2_u8) == 1_u8 );
assert( min(3_u8, 2_u8) == 2_u8 );
assert( max(1_u8, 2_u8) == 2_u8 );
assert( max(3_u8, 2_u8) == 3_u8 );
