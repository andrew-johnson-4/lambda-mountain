
import LM23COMMON/unit-type-core.lsts;

assert( (t0(c"A") && t0(c"B")) <: t0(c"A") );
assert( (t0(c"A") && t0(c"B")) <: t0(c"B") );
assert( not((t0(c"A") && t0(c"B")) <: t0(c"C")) );
assert( safe-alloc-block-count == 0 );

assert( t0(c"A") <: (t0(c"A") && t0(c"A")) );
assert( not(t0(c"A") <: (t0(c"A") && t0(c"B"))) );
assert( safe-alloc-block-count == 0 );

assert( t0(c"Any") <: ta );
assert( ta <: t0(c"Any") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"Arrow",t0(c"A"),t0(c"A")) <: t2(c"Arrow",t0(c"A"),t0(c"A")) );
assert( not(t2(c"Arrow",t0(c"A") && t0(c"B"),t0(c"A")) <: t2(c"Arrow",t0(c"A"),t0(c"A"))) );
assert( t2(c"Arrow",t0(c"A"),t0(c"A")) <: t2(c"Arrow",t0(c"A") && t0(c"B"),t0(c"A")) );
assert( t2(c"Arrow",t0(c"A"),t0(c"A") && t0(c"B")) <: t2(c"Arrow",t0(c"A"),t0(c"A")) );
assert( not(t2(c"Arrow",t0(c"A"),t0(c"A")) <: t2(c"Arrow",t0(c"A"),t0(c"A") && t0(c"B"))) );
assert( safe-alloc-block-count == 0 );

