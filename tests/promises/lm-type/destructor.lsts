
import LM23COMMON/unit-type-core.lsts;

assert( ta.l1 == ta );
assert( ta.l2 == ta );
assert( safe-alloc-block-count == 0 );

assert( ta.r1 == ta );
assert( ta.r2 == ta );
assert( safe-alloc-block-count == 0 );

assert( ta.l(0) == ta );
assert( ta.l(1) == ta );
assert( safe-alloc-block-count == 0 );

assert( ta.r(0) == ta );
assert( ta.r(1) == ta );
assert( safe-alloc-block-count == 0 );

assert( t2(c"A",t0(c"A"),t0(c"B")).l1 == t0(c"A") );
assert( t2(c"A",t0(c"A"),t0(c"B")).l2 == t0(c"B") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"A",t0(c"A"),t0(c"B")).r1 == t0(c"B") );
assert( t2(c"A",t0(c"A"),t0(c"B")).r2 == t0(c"A") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"A",t0(c"A"),t0(c"B")).l(0) == t0(c"A") );
assert( t2(c"A",t0(c"A"),t0(c"B")).l(1) == t0(c"B") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"A",t0(c"A"),t0(c"B")).l(1) == t0(c"B") );
assert( t2(c"A",t0(c"A"),t0(c"B")).l(0) == t0(c"A") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"Arrow",t0(c"A"),t0(c"B")).domain == t0(c"A") );
assert( t2(c"Arrow",t0(c"A"),t0(c"B")).range == t0(c"B") );
assert( safe-alloc-block-count == 0 );

assert( t2(c"Array",t2(c"Arrow",t0(c"A"),t0(c"B")),ta).domain == t0(c"A") );
assert( t2(c"Array",t2(c"Arrow",t0(c"A"),t0(c"B")),ta).range == t0(c"B") );
assert( safe-alloc-block-count == 0 );

assert( (t0(c"A") && t0(c"B")).slot(c"A",0) == t0(c"A") );
assert( (t0(c"A") && t0(c"B")).slot(c"B",0) == t0(c"B") );
assert( (t0(c"A") && t0(c"B")).slot(c"C",0) == ta );
assert( safe-alloc-block-count == 0 );

assert( ta.simple-tag == c"" );
assert( tv(c"a").simple-tag == c"" );
assert( t0(c"A").simple-tag == c"A" );
assert( t1(c"A",t0(c"B")).simple-tag == c"A" );
assert( safe-alloc-block-count == 0 );

assert( ta.cons-root == ta );
assert( tv(c"a").cons-root == tv(c"a") );
assert( t0(c"A").cons-root == t0(c"A") );
assert( t2(c"Cons",t0(c"A"),t0(c"B")).cons-root == t0(c"A") );
assert( safe-alloc-block-count == 0 );

assert( ta.without-phi == ta );
assert( tv(c"a").without-phi == tv(c"a") );
assert( t0(c"A").without-phi == t0(c"A") );
assert( t2(c"Cons",t0(c"A"),t0(c"B")).without-phi == t2(c"Cons",t0(c"A"),t0(c"B")) );
assert( t2(c"Cons",t0(c"A") && t1(c"Phi::Id",ta),t0(c"B")).without-phi == t2(c"Cons",t0(c"A"),t0(c"B")) );
assert( t2(c"Cons",t0(c"A") && t2(c"Phi::Transition",ta,ta),t0(c"B")).without-phi == t2(c"Cons",t0(c"A"),t0(c"B")) );
assert( t2(c"Cons",t0(c"A") && t1(c"Phi::State",ta),t0(c"B")).without-phi == t2(c"Cons",t0(c"A"),t0(c"B")) );
assert( t2(c"Arrow",t0(c"A") && t1(c"Phi::State",ta),t0(c"B")).without-phi == t2(c"Arrow",t0(c"A") && t1(c"Phi::State",ta),t0(c"B")) );
assert( safe-alloc-block-count == 0 );
