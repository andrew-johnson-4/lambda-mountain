
import LM23COMMON/unit-type-core.lsts;

assert( ta == ta );
assert( safe-alloc-block-count == 0 );

assert( t0(c"A") == t0(c"A") );
assert( t0(c"A") <= t0(c"A") );
assert( t0(c"A") >= t0(c"A") );
assert( not(t0(c"A") == t0(c"B")) );
assert( t0(c"A") != t0(c"B") );
assert( t0(c"A") < t0(c"B") );
assert( t0(c"A") <= t0(c"B") );
assert( not(t0(c"A") > t0(c"B")) );
assert( not(t0(c"A") >= t0(c"B")) );
assert( not(t0(c"B") == t0(c"A")) );
assert( t0(c"B") != t0(c"A") );
assert( not(t0(c"B") < t0(c"A")) );
assert( not(t0(c"B") <= t0(c"A")) );
assert( t0(c"B") > t0(c"A") );
assert( t0(c"B") >= t0(c"A") );
assert( safe-alloc-block-count == 0 );

assert( t1(c"A",t0(c"T")) == t1(c"A",t0(c"T")) );
assert( t1(c"A",t0(c"T")) < t1(c"B",t0(c"T")) );
assert( t1(c"T",t0(c"A")) < t1(c"T",t0(c"B")) );
assert( t1(c"T",t0(c"A")) < t2(c"T",t0(c"A"),t0(c"B")) );
assert( safe-alloc-block-count == 0 );

assert( tv(c"A") == tv(c"A") );
assert( tv(c"A") <= tv(c"A") );
assert( tv(c"A") >= tv(c"A") );
assert( not(tv(c"A") == tv(c"B")) );
assert( tv(c"A") != tv(c"B") );
assert( tv(c"A") < tv(c"B") );
assert( tv(c"A") <= tv(c"B") );
assert( not(tv(c"A") > tv(c"B")) );
assert( not(tv(c"A") >= tv(c"B")) );
assert( not(tv(c"B") == tv(c"A")) );
assert( tv(c"B") != tv(c"A") );
assert( not(tv(c"B") < tv(c"A")) );
assert( not(tv(c"B") <= tv(c"A")) );
assert( tv(c"B") > tv(c"A") );
assert( tv(c"B") >= tv(c"A") );
assert( safe-alloc-block-count == 0 );

assert( (t0(c"A") && t0(c"B")) == (t0(c"A") && t0(c"B")) );
assert( (t0(c"A") && t0(c"B")) == (t0(c"B") && t0(c"A")) );
assert( safe-alloc-block-count == 0 );

assert( ts(c"B",[t0(c"A")]) == t1(c"B",t0(c"A")) );
assert( safe-alloc-block-count == 0 );

assert( tand(mk-vector(type(Type)).push(t0(c"A")).push(t0(c"B"))) == (t0(c"B") && t0(c"A")) );
assert( safe-alloc-block-count == 0 );

assert( (ta || t0(c"A")) == t0(c"A") );
assert( (t0(c"A") || ta) == t0(c"A") );
assert( safe-alloc-block-count == 0 );
