
import LM23COMMON/unit-type-core.lsts;

assert( (t0(c"A") && t0(c"B")).is-t(c"A",0) );
assert( (t0(c"A") && t0(c"B")).is-t(c"B",0) );
assert( not((t0(c"A") && t0(c"B")).is-t(c"C",0)) );
assert( safe-alloc-block-count == 0 );

assert( not((t0(c"A") && t0(c"B")).is-arrow) );
assert( (t2(c"Arrow",t0(c"A"),t0(c"B")) && t0(c"B")).is-arrow );
assert( (t2(c"Array",t2(c"Arrow",t0(c"A"),t0(c"B")),ta) && t0(c"B")).is-arrow );
assert( safe-alloc-block-count == 0 );

assert( ta.is-open );
assert( tv(c"a").is-open );
assert( not(t0(c"A").is-open) );
assert( not((t0(c"A") && t0(c"B")).is-open) );
assert( (t0(c"A") && tv(c"a")).is-open );
assert( not(t2(c"Array",ta,ta).is-open) );
assert( t2(c"Array",tv(c"a"),ta).is-open );
assert( safe-alloc-block-count == 0 );

assert( not(ta.is-moved) );
assert( not(tv(c"a").is-moved) );
assert( not(t0(c"A").is-moved) );
assert( t1(c"Phi::State",t1(c"Linear",t0(c"Phi::Moved"))).is-moved );
assert( (t0(c"A") && t1(c"Phi::State",t1(c"Linear",t0(c"Phi::Moved")))).is-moved );
assert( safe-alloc-block-count == 0 );

assert( not(ta.is-linear-live) );
assert( not(tv(c"a").is-linear-live) );
assert( not(t0(c"A").is-linear-live) );
assert( not(t1(c"Phi::State",t1(c"Linear",t0(c"Phi::Moved"))).is-linear-live) );
assert( not((t0(c"A") && t1(c"Phi::State",t1(c"Linear",t0(c"Phi::Moved")))).is-linear-live) );
assert( t1(c"Phi::State",t1(c"Linear",t0(c"Phi::A"))).is-linear-live );
assert( (t0(c"A") && t1(c"Phi::State",t1(c"Linear",t0(c"Phi::A")))).is-linear-live );
assert( safe-alloc-block-count == 0 );

assert( not(ta.is-any-arg-t(c"A",0)) );
assert( not(tv(c"a").is-any-arg-t(c"A",0)) );
assert( not(t0(c"B").is-any-arg-t(c"A",0)) );
assert( t0(c"A").is-any-arg-t(c"A",0) );
assert( (t0(c"A") && t0(c"B")).is-any-arg-t(c"A",0) );
assert( not(t2(c"Cons",ta,ta).is-any-arg-t(c"A",0)) );
assert( not(t2(c"Cons",tv(c"a"),tv(c"a")).is-any-arg-t(c"A",0)) );
assert( not(t2(c"Cons",t0(c"B"),t0(c"B")).is-any-arg-t(c"A",0)) );
assert( t2(c"Cons",t0(c"A"),t0(c"B")).is-any-arg-t(c"A",0) );
assert( t2(c"Cons",t0(c"B"),t0(c"A")).is-any-arg-t(c"A",0) );
assert( t2(c"Cons",t0(c"B"),t0(c"A") && t0(c"B")).is-any-arg-t(c"A",0) );
assert( t2(c"Cons",t0(c"B") && t0(c"A"),t0(c"B")).is-any-arg-t(c"A",0) );
assert( safe-alloc-block-count == 0 );

assert( (t0(c"A") && t0(c"B")).is-and );
assert( not(t0(c"A").is-and) );
assert( not(ta.is-and) );
assert( not(tv(c"a").is-and) );
assert( safe-alloc-block-count == 0 );
