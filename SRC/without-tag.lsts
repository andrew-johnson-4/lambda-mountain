

let .without-tag(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match c.without-tag {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround { tag:c"Constructor" } => ta;
      TGround { tag:c"CaseNumber" } => ta;
      TGround { tag:c"C-FFI", parameters:[] } => ta;
      TGround { tag:c"Raw" } => ta;
      TGround { tag:c"LMStruct" } => ta;
      TGround { tag:c"Constant" } => ta;
      TGround { tag:c"Literal" } => ta;
      TGround { tag:c"LocalVariable" } => ta;
      TGround { tag:c"GlobalVariable" } => ta;
      TGround { tag:tag } => if tag.has-prefix(c"Tag::") then ta
                        else if tag.has-prefix(c"Field::") then ta
                        else tt;
      _ => tt;
   }
);

let .without-tag(tt: List<Type>): List<Type> = (
   match tt {
      [hd..tl] => cons( hd.without-tag, tl.without-tag );
      tl => tl;
   }
);
