

let plugin-current-backend = (&plugins-backend-c-compile) : Arrow<Nil,Nil>[];

import PLUGINS/BACKEND/C/index.lsts;
import PLUGINS/BACKEND/BLOB/index.lsts;

import PLUGINS/FRONTEND/LM/index-index.lm;
import PLUGINS/FRONTEND/LSTS/index.lsts;
import PLUGINS/FRONTEND/C/index.lsts;

let frontend-has-seen = {} : HashtableEq<CString,U64>;

let frontend(fp: CString): Nil = (
   if not(frontend-has-seen.has(fp)) {
      frontend-has-seen = frontend-has-seen.bind(fp,true);
      if fp.has-prefix(c"core/") then fp = config-platform-prefix + fp;
      if fp.has-prefix(c"std/") then fp = config-platform-prefix + fp;
      let found-file = false;
      if fp.has-suffix(c".h") then found-file = true;
      if plugins-frontends-index.has(fp.file-extension) then found-file = true;
      if not(found-file) {
         if file-exists(fp) {
            found-file = true
         };
      };
      if not(found-file) then fail("Unable To Find Path To File: \{fp}");
      let todo = true;
      if todo && (fp.has-suffix(c".lm") || fp.has-suffix(c".html")) {
         let text = c"";
         if not(is-already-tokenized(fp)) {
            text = read-file(fp);
            already-tokenized = cons(fp, already-tokenized);
         };
         lm-frontend(fp, text);
         todo = false;
      };
      if todo then plugins-frontends-index.lookup(fp.file-extension, plugin-null-frontend)(fp);
   }; ()
);
