
let .without-any-phi(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            c = c.without-any-phi;
            if non-zero(c) then result = result.push(c);
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround { tag:c"Phi::Id", parameters:[_..] } => ta;
      TGround { tag:c"Phi::Transition", parameters:[_.._..] } => ta;
      TGround { tag:c"Phi::Initialize", parameters:[_..] } => ta;
      TGround { tag:c"Phi::State", parameters:[_..] } => ta;
      TGround { tag=tag, parameters=parameters } => ts(tag, parameters.without-any-phi);
      _ => tt;
   }
);

let .without-any-phi(tt: List<Type>): List<Type> = (
   match tt {
      [hd..tl] => cons( hd.without-any-phi, tl.without-any-phi );
      tl => tl;
   }
);

let .without-phi-id(tctx: TypeContext?): TypeContext? = (
   let inner-tctx = tctx.get-or(mk-tctx());
   let next-tctx = [] : List<TypeContextRow>;
   for TypeContextRow{key=key,nt=nt,dt=dt,def=def} in inner-tctx.tctx {
      next-tctx = cons( TypeContextRow(key, nt.without-phi-id, dt.without-phi-id, def), next-tctx );
   };
   inner-tctx.tctx = next-tctx;
   Some(inner-tctx)
);

let .without-phi-id(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            c = c.without-phi-id;
            if non-zero(c) then result = result.push(c);
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround { tag:c"Arrow", parameters:[_.._..] } => tt;
      TGround { tag:c"Phi::Id", parameters:[_..] } => ta;
      TGround { tag=tag, parameters=parameters } => ts(tag, parameters.without-phi-id);
      _ => tt;
   }
);

let .without-phi-id(tt: List<Type>): List<Type> = (
   match tt {
      [hd..tl] => cons( hd.without-phi-id, tl.without-phi-id );
      tl => tl;
   }
);
