
let .without-phi(tt: Type): Type = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            c = c.without-phi;
            if non-zero(c) then result = result.push(c);
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround { tag:c"Arrow", parameters:[_.._..] } => tt;
      TGround { tag:c"Phi::Transition" } => ta;
      TGround { tag:c"Phi::Initialize" } => ta;
      TGround { tag:c"Phi::State" } => ta;
      TGround { tag=tag, parameters=parameters } => ts(tag, parameters.without-phi);
      _ => tt;
   }
);

let .without-phi(tt: List<Type>): List<Type> = (
   match tt {
      [hd..tl] => cons( hd.without-tag, tl.without-tag );
      tl => tl;
   }
);
