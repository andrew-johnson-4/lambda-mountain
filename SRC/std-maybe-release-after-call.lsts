
let std-maybe-release-after-call(tctx: TypeContext?, function-type: Type, args: AST): (TypeContext?, AST, AST, AST, AST) = (
   if function-type.domain.is-any-arg-t(c"MustReleaseAfterCall",0)
   && is-paired-release(function-type.domain, typeof-term(args))
   then (
      let tmpresult = mk-var(uuid());
      (tctx, let prefix, let postfix, args) = std-release-after-call(tctx, function-type.domain, mk-eof(), mk-eof(), args);
      print("Release After Call \{function-type}\nPrefix \{prefix}\nPostfix \{postfix}\nArgs \{args}\nResult \{tmpresult}\n");
      (tctx, prefix, postfix, tmpresult, args)
   );
   else (tctx, mk-eof(), mk-eof(), mk-eof(), args)
);

let is-paired-release(pt: Type, at: Type): U64 = (
   if pt.is-t(c"Cons",2) or at.is-t(c"Cons",2)
   then (is-paired-release(pt.slot(c"Cons",2).l1, at.slot(c"Cons",2).l1)
      or is-paired-release(pt.slot(c"Cons",2).l2, at.slot(c"Cons",2).l2))
   else (pt.is-t(c"MustReleaseAfterCall",0) and at.is-t(c"MustRelease",0))
);

let std-release-after-call(tctx: TypeContext?, param-types: Type, prefix: AST, postfix: AST, args: AST): (TypeContext?, AST, AST, AST) = (
   if param-types.is-t(c"Cons",2) { match args {
      App{ left=left, right=right } => (
         (tctx, prefix, postfix, left) = std-release-after-call(tctx, param-types.slot(c"Cons",2).l1, prefix, postfix, left);
         (tctx, prefix, postfix, right) = std-release-after-call(tctx, param-types.slot(c"Cons",2).l2, prefix, postfix, right);
         let new-args = mk-cons(left, right);
         tctx.ascript(new-args, typeof-term(args));
         (tctx, prefix, postfix, new-args)
      );
   }} else {
      (tctx, prefix, postfix, args)
   }
);
