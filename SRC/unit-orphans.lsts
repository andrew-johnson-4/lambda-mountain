
import SRC/typeof-var.lsts;
import SRC/bind-varargs.lsts;
import SRC/index-types.lsts;
import SRC/index-plugins.lsts;
import SRC/index-tokenize.lsts;
import SRC/substitute.lsts;
import SRC/validate-interfaces.lsts;
import SRC/find-global-callable.lsts;
import SRC/tctx-to-string.lsts;
import SRC/std-infer-expr.lsts;
import SRC/apply-and-specialize.lsts;
import SRC/decorate-var-to-def.lsts;
import SRC/macro-table.lsts;
import SRC/std-apply-macro.lsts;
import SRC/std-apply-macro-candidates.lsts;
import SRC/std-direct-destructure-macro.lsts;
import SRC/infer-global-terms.lsts;
import SRC/infer-type-definition.lsts;
import SRC/assert-no-infinite-types.lsts;
import SRC/phi-initialize.lsts;
import SRC/phi-state.lsts;
import SRC/phi-merge.lsts;
import SRC/without-phi.lsts;
import SRC/phi-override.lsts;
import SRC/phi-as-state.lsts;
import SRC/phi-as-initialize.lsts;
import SRC/validate-type.lsts;
import SRC/validate-pctx-del.lsts;
import SRC/is-linear.lsts;
import SRC/least-upper-bound.lsts;
import SRC/phi-linear-moved.lsts;
import SRC/phi-move.lsts;
import SRC/phi-fresh.lsts;
import SRC/has-moved.lsts;
import SRC/expand-implied-phi.lsts;

let .unroll-seq(t: AST): Vector<AST> = (
   match t {
      Seq{seq=seq} => seq;
      _ => mk-vector(type(AST));
   }
);

