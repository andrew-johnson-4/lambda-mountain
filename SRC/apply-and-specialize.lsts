
let apply-and-specialize(tctx: TypeContext?, fname: CString, ft: Type, ft-denormal: Type, at: Type, blame: AST): (TypeContext?, Type) = (
   if not(can-apply(ft-denormal, at)) then exit-error("Unable to apply and specialize: \{fname}\nFunction: \{ft}\nArguments: \{at}", blame);
   if fname=="id-phi" || fname==c"f" then print("apply id-phi\nFunction \{ft}\nArgs \{at}\n");
   let inner-tctx = unify(ft-denormal.domain, at, blame);
   let phi-modified = mk-vector(type(CString));
   for PhiContextRow{pn=phi-id, pt=phi-tt, pblame=blame} in inner-tctx.get-or(mk-tctx()).pctx {
      tctx = tctx.bind-phi(pn, pt, pblame);
      phi-modified = phi-modified.push(pn);
   };
   if ft-denormal.domain.is-linear then (
      for PhiContextRow{pn=phi-id, pt=phi-tt, pblame=blame} in phi-move(Some(mk-tctx()), at, blame).get-or(mk-tctx()).pctx {
         if not(phi-modified.contains(pn))
         then tctx = tctx.bind-phi(pn, pt, pblame);
      };
   );
   if fname=="id-phi" || fname==c"f" then print("apply id-phi tctx \{inner-tctx.get-or(mk-tctx()).tctx}\n");
   if inner-tctx.has-moved then exit-error("Linear Value Used After Move", blame);
   if inner-tctx.is-none then exit-error("Unable to apply and specialize (unify): \{fname}\nFunction: \{ft}\nArguments: \{at}", blame);
   (tctx, let initialized-ft) = phi-initialize(tctx, ft, blame);
   print("Initialized \{initialized-ft}\n");
   let closed-type = substitute(inner-tctx, ft);
   if not(ft.is-t(c"Blob",0) || ft.is-t(c"FFI",0)) then closed-type = closed-type.phi-specialize(tctx, blame);
   if fname=="id-phi" then print("apply id-phi closed type \{closed-type}\n");
   if closed-type.is-open then exit-error("Unification Did Not Close Before Specialization\nfunction: \{fname} \{ft}\nargs: \{at}", blame);
   let r = substitute(inner-tctx, initialized-ft.range);
   if ft.is-t(c"Prop",0) then r = r && cons-root(at);
   if ft.is-open then try-specialize(fname, ft, inner-tctx, closed-type);
   (tctx, r)
);

