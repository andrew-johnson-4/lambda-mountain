
let without-size-unless-class(tt: List<Type>): List<Type> = (
   match tt {
      LCons{head=head,tail=tail} => LCons(without-size-unless-class(head),close(without-size-unless-class(tail)));
      _ => tt;
   }
);

let without-size-unless-class(tt: Type): Type = (
   match tt {
      TGround{tag=tag,parameters=parameters} => TGround(tag,close(without-size-unless-class(parameters)));
      _ => without-size-unless-class-inner(tt);
   }
);

let without-size-unless-class-inner(tt: Type): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match without-size-unless-class-inner(c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag:c"Sized"} => ta;
      TGround{tag=tag,parameters=parameters} => TGround(tag,close(without-size-unless-class(parameters)));
      _ => tt;      
   }
);
