
let unique(t: Token): Token = (
   Token( t.key, iuid(), t.location )
);
let .unique(t: Token): Token = unique(t);

let .unique(term: AST): AST = (
   match term {
      Var{key=key, token=token} => Var(key, token.unique);
      Lit{key=key, token=token} => Lit(key, token.unique);
      Seq{seq=seq} => (
         let ret = mk-vector(type(AST), seq.length);
         for s in seq { ret = ret.push(s.unique) };
         Seq(ret)
      );
      App{is-cons=is-cons,left=left,right=right} => mk-cons-or-app(is-cons,left.unique,right.unique);
      Abs{lhs=lhs,rhs=rhs,tt=tt} => mk-abs(lhs.unique, rhs.unique, tt);
      Glb{key=key,val=val} => mk-glb(key, val.unique);
      _ => term;
   }
);
