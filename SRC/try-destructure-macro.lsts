
let try-destructure-macro(loc: SourceLocation, lhs: AST, term: AST): AContext? = (
   let r = None : AContext?;
   let yes = Some([] : AContext);
   match (lhs, term) {
      Tuple{first:ASTNil{}, second:ASTNil{}} => r = yes;
      Tuple{
         first:App{left:App{left:Var{}, right:Var{}}, right:Var{}},
         second:App{left:App{left:Lit{}}}
      } => ();
      Tuple{
         first:App{left:Lit{key:c":Literal:"},right:Var{pv=key}},
         second:App{left:Lit{key:c":",ctk=token}, right:App{left:Lit{},right:AType{}}}
      } => r = r.bind(pv,with-location(term,ctk.location));
      Tuple{
         first:App{left:Var{},right:Var{}},
         second:App{left:Lit{tag=key}}
      } => (
         if is-lone-tag(tag) || tag.is-suffixed {
            match (lhs,term) {
               Tuple{first:App{pl=left,pr=right}, second:App{el=left,er=right}} => (
                  let ll = try-destructure-macro(loc,pl,el);
                  if non-zero(ll) {
                     let rl = try-destructure-macro(loc,pr,er);
                     if non-zero(rl) then r = union(ll,rl);
                  }
               );
            }
         }
      );
      Tuple{ first:App{pl=left,pr=right}, second:App{el=left,er=right} } => (
         let ll = try-destructure-macro(loc,pl,el);
         if non-zero(ll) {
            let rl = try-destructure-macro(loc,pr,er);
            if non-zero(rl) then r = union(ll,rl);
         }
      );
      Tuple{ first:Abs{pl=lhs,pr=rhs,ptlt=tt}, second:Abs{el=lhs,er=rhs,etlt=tt} } => (
         let ll = try-destructure-macro(loc,pl,el);
         if non-zero(ll) {
            let rl = try-destructure-macro(loc,pr,er);
            if non-zero(rl) then r = union(ll,rl);
         }
      );
      Tuple{ first:Lit{key:c":Any:"}, second:Var{key:c"_"} } => r = yes;
      Tuple{ first:Lit{pl=key}, second:Var{el=key} } => if pl==el then r = yes;
      Tuple{ first:Lit{pl=key}, second:Lit{el=key} } => if pl==el then r = yes;
      Tuple{ first:App{left:Lit{key:c":Literal:"}, right:Var{pv=key}}, second:Lit{el=key,eltk=token} } => (
         if index-of-tag(el)==unknown-index-of-tag then r = r.bind(pv,with-location(term,eltk.location));
      );
      Tuple{ first:App{left:Lit{key:c":Field:"}, right:Var{pv=key}}, second:Lit{el=key,eltk=token} } => (
         if el.has-prefix(c".") then r = r.bind(pv,with-location(term,eltk.location));
      );
      Tuple{ first:App{left:Lit{key:c":Variable:"}, right:Var{pv=key}}, second:Var{key:c"_"} } => (
      );
      Tuple{ first:App{left:Lit{key:c":Variable:"}, right:Var{pv=key}}, second:Var{el=key,eltk=token} } => (
         r = r.bind(pv,with-location(term,eltk.location));
      );
      Tuple{ first:App{ left:App{ left:Lit{key:c":Tag:"}, right:Var{pv=key} }, right:Var{pt=key} }, second:Lit{el=key,eltk=token} } => (
         if index-of-tag(el)!=unknown-index-of-tag {
            r = yes;
            let tag-i = to-string(index-of-tag(el));
            r = r.bind(pv, mk-app( mk-lit(c":",with-key(eltk,c":")), mk-app( mk-lit(tag-i,with-key(eltk,tag-i)), mk-atype(t0(c"Constant") && t0(c"Literal") && t0(c"U64")) ) ));
            let tag-tt = c"Tag::" + el;
            r = r.bind(pt, mk-lit(tag-tt,with-key(eltk,tag-tt)));
         }
      );
      Tuple{ first:Var{pv=key}, t=second } => r = r.bind(pv,with-location(term,t.location));
      _ => ();
   }; r
);
