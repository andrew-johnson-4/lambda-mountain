
let type-ast-inserts = mk-vector(type(AST));
let complex-type-index = {} : HashtableEq<(CString,U64),U64>;

let visit-field-template(field-name: CString, base-type: Type, field-type: Type, blame: AST, field-ordinal: U64, case-number: U64): Nil = (
   let mangled-field-name = to-string(case-number) + c"_" + field-name;
   let ctx = (None : Maybe<TypeContext>)();
   ctx = ctx.bind( c"base-type", base-type, denormalize(base-type), mk-eof() );
   ctx = ctx.bind( c"field-type", field-type, denormalize(field-type), mk-eof() );
   ctx = ctx.bind( c"field-name", ta, ta, mk-lit(mangled-field-name) );
   ctx = ctx.bind( c"primitive::field-get", ta, ta, mk-var(c"."+field-name) );
   ctx = ctx.bind( c"primitive::field-set", ta, ta, mk-var(c"set."+field-name) );
   ctx = ctx.bind( c"primitive::field-get-indirect", ta, ta, mk-var(c"."+field-name) );
   ctx = ctx.bind( c"primitive::field-set-indirect", ta, ta, mk-var(c"set."+field-name) );
   let field-get = substitute(ctx, find-global-callable(c"primitive::field-get", base-type, blame));
   let field-set = substitute(ctx, find-global-callable(c"primitive::field-set", t2(c"Cons", base-type, field-type), blame));
   let field-get-indirect = substitute(ctx, find-global-callable(c"primitive::field-get-indirect", t2(c"Array",base-type,ta), blame));
   let field-set-indirect = substitute(ctx, find-global-callable(c"primitive::field-set-indirect", t2(c"Cons", t2(c"Array",base-type,ta), field-type), blame));

   ctx = (None : Maybe<TypeContext>)();
   ctx = ctx.bind( c"base-type", base-type, denormalize(base-type), mk-eof() );
   ctx = ctx.bind( c"field-type", field-type, denormalize(field-type), mk-eof() );
   ctx = ctx.bind( c"field-name", ta, ta, mk-lit(mangled-field-name) );
   ctx = ctx.bind( c"primitive::field-get", ta, ta, mk-var(c"."+to-string(field-ordinal)) );
   let field-ordinal-get = substitute(ctx, find-global-callable(c"primitive::field-get", base-type, blame));

   type-ast-inserts = type-ast-inserts.push(field-get);
   type-ast-inserts = type-ast-inserts.push(field-set);
   type-ast-inserts = type-ast-inserts.push(field-get-indirect);
   type-ast-inserts = type-ast-inserts.push(field-set-indirect);
   type-ast-inserts = type-ast-inserts.push(field-ordinal-get);
   ()
);

let type-base-type-index = {} : HashtableEq<(CString,U64),U64>;
let phi-type-index = {} : HashtableEq<(CString,U64),U64>;
let phi-parameters-index = {} : HashtableEq<(CString,U64),Type>;

let phi-parameters(tag: CString, ps: U64): Type = phi-parameters-index.lookup((tag,ps),ta);

let .is-type(tt: Type): U64 = (
   let gta = normalize(tt).ground-tag-and-arity;
   type-base-type-index.has(gta)
);

let .is-phi-type(tt: Type): U64 = (
   phi-type-index.has(tt.ground-tag-and-arity)
);

let infer-type-definition(term: AST): Nil = (
   match term { Typedef{} => (); };
   let lhs-type = (term as Tag::Typedef).lhs-type;
   let implies = (term as Tag::Typedef).implies;
   let implements = (term as Tag::Typedef).implements;
   let size = (term as Tag::Typedef).size;
   let alias = (term as Tag::Typedef).alias;
   let opaque-alias = (term as Tag::Typedef).opaque-alias;
   let cases = (term as Tag::Typedef).cases;
   let misc-type = (term as Tag::Typedef).misc-type;
   for rhs-type in implies {
      add-quick-prop(lhs-type, lhs-type, rhs-type);
      add-weaken-quick-prop(lhs-type, lhs-type, rhs-type);
   };
   if non-zero(alias) then add-type-alias(lhs-type, alias);
   if non-zero(opaque-alias) then add-opaque-type-alias(lhs-type, opaque-alias);
   for rhs-type in implements {
      add-quick-prop(lhs-type, lhs-type, rhs-type);
      add-weaken-quick-prop(lhs-type, lhs-type, rhs-type);
      interface-implementors = cons( (lhs-type, rhs-type, term), interface-implementors );
   };
   if misc-type.is-t(c"Phi",0) {
      let common-tags-length = 0_u64;
      let common-parameters = [] : List<Type>;
      for Tuple{ case-tag=first, case-fields=second } in cases {
         if case-tag==c"" {
            common-tags-length = case-fields.length;
            for Tuple{field-name=first, field-type=second} in case-fields {
               common-parameters = cons(field-type, common-parameters);
            };
         } else {
            let case-parameters = common-parameters;
            for Tuple{field-name=first, field-type=second} in case-fields {
               case-parameters = cons(field-type, case-parameters);
            };
            let case-name = lhs-type.simple-tag+c"::"+case-tag;
            phi-type-index = phi-type-index.bind((case-name, common-tags-length + case-fields.length), true);
            phi-parameters-index = phi-parameters-index.bind((case-name, common-tags-length + case-fields.length), ts(case-name,case-parameters));
         }
      }
   } else {
      add-quick-prop(lhs-type, ta, t0(c"Sized"));
      add-weaken-quick-prop(lhs-type, t0(c"Sized"), t0(c"Sized"));

      let case-number = 0_u64;
      for Tuple{ case-tag=first, case-fields=second } in cases {
         complex-type-index = complex-type-index.bind( lhs-type.ground-tag-and-arity, 1 );
         type-base-type-index = type-base-type-index.bind( lhs-type.ground-tag-and-arity, 1 );
         let field-ordinal = 0_u64;
         for Tuple{ field-name=first, field-type=second } in case-fields {
            let guard = lhs-type && (if non-zero(case-tag) then t0(c"Tag::"+case-tag) else ta);
            let field-wrapped-type = t1(c"Field::"+field-name, field-type);
            add-quick-prop(lhs-type, guard, field-wrapped-type);
            add-weaken-quick-prop(lhs-type, guard, field-wrapped-type);
            visit-field-template(field-name, guard, field-type, term, case-fields.length - field-ordinal, case-number);
            field-ordinal = field-ordinal + 1;
         };
         case-number = case-number + 1;
      };
      let common-fields = [] : List<(CString,Type)>;
      let has-tag-case = false;
      let has-any-case = false;
      for Tuple{ case-tag=first, case-fields=second } in cases {
         if case-tag==c"" {
            for Tuple{ field-name=first, field-type=second } in case-fields {
               common-fields = cons((field-name, field-type), common-fields);
            };
         } else has-tag-case = true;
         has-any-case = true;
      };
      if not(has-tag-case) && has-any-case then infer-type-yield-constructor(lhs-type, lhs-type.simple-tag, 0, common-fields, [] : List<(CString,Type)>, term, has-tag-case);
      if has-any-case {
         add-quick-prop(lhs-type, lhs-type, t0(c"LM2Struct"));
         add-weaken-quick-prop(lhs-type, lhs-type, t0(c"LM2Struct"));
      };
      if not(has-tag-case) && has-any-case then {
         let tag-case-number = t1(c"CaseNumber", t0(c"0"));
         add-quick-prop(lhs-type, lhs-type, tag-case-number);
         add-weaken-quick-prop(lhs-type, lhs-type, tag-case-number);
      };
      let case-index = 0_u64;
      for Tuple{ case-tag=first, case-fields=second } in cases {
         if case-tag!=c"" {
            let o-case-fields = [] : List<(CString,Type)>;
            for Tuple{ field-name=first, field-type=second } in case-fields {
               o-case-fields = cons((field-name, field-type), o-case-fields);
            };
            let tag-guard = lhs-type && t0(c"Tag::"+case-tag);
            let tag-case-number = t1(c"CaseNumber", t0(to-string(case-index)));
            add-quick-prop(tag-guard, tag-guard, tag-case-number);
            add-weaken-quick-prop(tag-guard, tag-guard, tag-case-number);
            infer-type-yield-constructor(lhs-type, case-tag, case-index, common-fields, o-case-fields, term, has-tag-case);
         };
         case-index = case-index + 1;
      };
   };
);

let type-constructor-tag-ordinal-index = {} : HashtableEq<(CString,U64,CString),U64>;

let infer-type-yield-constructor(base-type: Type, case-tag: CString, case-number: U64, common-fields: List<(CString,Type)>, case-fields: List<(CString,Type)>, blame: AST, has-tag-case: U64): Nil = (
   (let base-tag, let base-arity) = base-type.ground-tag-and-arity;
   type-constructor-tag-ordinal-index = type-constructor-tag-ordinal-index.bind( (base-tag,base-arity,case-tag), case-number );

   # The constructor is hard-coded for now
   # This only works for C-backend...

   let args = mk-eof();
   for Tuple{field-name=first, field-type=second} in common-fields.reverse {
      let mangled-field-name = c"0_" + field-name;
      let par = mk-var(mangled-field-name).ascript(field-type);
      if non-zero(args)
      then args = mk-cons(args, par)
      else args = par
   };
   for Tuple{field-name=first, field-type=second} in case-fields.reverse {
      let mangled-field-name = to-string(case-number) + c"_" + field-name;
      let par = mk-var(mangled-field-name).ascript(field-type);
      if non-zero(args)
      then args = mk-cons(args, par)
      else args = par
   };
   if not(non-zero(args)) then args = mk-nil();

   let return-id = uuid();
 
   let body = mk-lit(c"({").ascript(t0(c"L"));
   body = mk-cons(body, mk-app(mk-var(c"mangle-pre"),mk-atype(t1(c"Type",base-type))) );
   body = mk-cons(body, mk-lit(c" ").ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")));
   body = mk-cons(body, mk-app(mk-var(c"mangle-post"),mk-atype(t1(c"Type",base-type))) );
   body = mk-cons(body, mk-lit(c";").ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(c"memset(&").ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(c",0,sizeof ").ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(c");").ascript(t0(c"L")));

   if has-tag-case {
      body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")) );
      body = mk-cons(body, mk-lit(c".discriminator_case_tag=").ascript(t0(c"L")));
      body = mk-cons(body, mk-lit(to-string(case-number)).ascript(t0(c"L")) );
      body = mk-cons(body, mk-lit(c";").ascript(t0(c"L")));
   };

   for Tuple{field-name=first, field-type=second} in common-fields.reverse {
      let mangled-field-name = c"0_" + field-name;
      body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")) );
      body = mk-cons(body, mk-lit(c".").ascript(t0(c"L")));
      body = mk-cons(body, mk-app(mk-var(c"mangle"),mk-lit(mangled-field-name).ascript(t0(c"L"))) );
      body = mk-cons(body, mk-lit(c"=").ascript(t0(c"L")));
      body = mk-cons(body, mk-var(mangled-field-name) );
      body = mk-cons(body, mk-lit(c";").ascript(t0(c"L")));
   };

   for Tuple{field-name=first, field-type=second} in case-fields.reverse {
      let mangled-field-name = to-string(case-number) + c"_" + field-name;
      body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")) );
      body = mk-cons(body, mk-lit(c".").ascript(t0(c"L")));
      body = mk-cons(body, mk-app(mk-var(c"mangle"),mk-lit(mangled-field-name).ascript(t0(c"L"))) );
      body = mk-cons(body, mk-lit(c"=").ascript(t0(c"L")));
      body = mk-cons(body, mk-var(mangled-field-name) );
      body = mk-cons(body, mk-lit(c";").ascript(t0(c"L")));
   };

   body = mk-cons(body, mk-lit(return-id).ascript(t0(c"L")));
   body = mk-cons(body, mk-lit(c";})").ascript(t0(c"L")));

   let constructor = mk-glb( mk-token(case-tag).with-location(blame.location), mk-abs(args, body.ascript(base-type.expand-implied-phi.phi-as-initialize), t0(c"Blob") ) );

   type-ast-inserts = type-ast-inserts.push(constructor); ()
);

