
let .into(tctx: Maybe<TypeContext>, tt: Type<String>): String = (
   let result = "";
   for Tuple{first=first,second=second} in tctx.get-or(mk-tctx()).tctx {
      result = result + "\{first} : \{second}\n";
   };
   result
);

let to-smart-string(tctx: Maybe<TypeContext>): String = tctx.into(type(String));

let .into(ctx: Maybe<AContext>, tt: Type<String>): String = (
   let result = "";
   for Tuple{first=first,second=second} in ctx.get-or([] : AContext) {
      result = result + "\{first} : \{second}\n";
   };
   result
);

let to-smart-string(ctx: Maybe<AContext>): String = ctx.into(type(String));
