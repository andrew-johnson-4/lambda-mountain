
substitute := Î»(: tctx Maybe<TypeContext>)(: t AST). (: (
   (match t (
      ()
      ( ASTEOF () )
      ( ASTNil () )
#      ( (App( (Lit( ':_s ctk )) (App( (Lit( v vtk )) (AType vt) )) )) (
#         (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
#            (close(Lit( v (unique vtk) )))
#            (close(AType( (substitute( tctx vt )) )))
#         ))) )))
#         (let found 0_u64)
#         (for-each ( (Tuple( tk tv ta )) in
#             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
#         ) (
#            (if (&&( (not found) (==( tk v )) )) (
#               (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
#                  (close(substitute( tctx ta )))
#                  (close(AType( (substitute( tctx vt )) )))
#               ))) )))
#               (set found 1_u64)
#            ) ())
#         ))
#      ))
      ( (App( (Lit( ':_s ctk )) (App( (Var( v vtk )) (AType vt) )) )) (
         (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
            (close(Var( v (unique vtk) )))
            (close(AType( (substitute( tctx vt )) )))
         ))) )))
         (let found 0_u64)
         (for-each ( (Tuple( tk tv ta )) in
             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
         ) (
            (if (&&( (not found) (==( tk v )) )) (
               (set t (App( (close(Lit( ':_s (unique ctk) ))) (close(App(
                  (close(substitute( tctx ta )))
                  (close(AType( (substitute( tctx vt )) )))
               ))) )))
               (set found 1_u64)
            ) ())
         ))
      ))
      ( (Lit( v vtk )) (set t (Lit( v (unique vtk) ))) )
      ( (Var( v vtk )) (set t (Var( v (unique vtk) ))) )
      ( (Abs( lhs rhs tt )) (
         (set t (Abs(
            (close(substitute-lhs( tctx lhs )))
            (close(substitute( tctx rhs )))
            (substitute( tctx tt ))
         )))
      ))
      ( (AType( tt )) (
         (set t (AType( (substitute( tctx tt )) )))
      ))
      ( (App( is-cons lt rt )) (
         (set t (App( is-cons
            (close(substitute( tctx lt )))
            (close(substitute( tctx rt )))
         )))
      ))
      ( (Seq( seq )) (
         (set t (mk-eof()))
         (for-each-v (s in seq) (
            (set t (+( t (substitute( tctx s )) )))
         ))
      ))
      ( (Glb( k rt )) (
         (let found 0_u64)
         (for-each ( (Tuple( tk tv ta )) in
             (.get-or( tctx (: LEOF List<Tuple<String,Type,AST>>) ))
         ) (
            (if (&&( (not found) (==( (.key k) tk )) )) (
               (match ta (
                  ()
                  ( (Var( tvk tvtk )) (
                     (set k tvtk)
                  ))
               ))
               (set found 1_u64)
            ) ())
         ))
         (set t (Glb(
            (unique k)
            (close(substitute( tctx rt )))
         )))
      ))
      ( _ (exit-error( 'Unexpected\sSubstitution\sTerm:_s t )) )
   ))
   t
) AST);
