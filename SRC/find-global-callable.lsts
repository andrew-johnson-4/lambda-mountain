
let apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST): (TypeContext?, Type) = apply-global-callable(tctx,fname,arg-types,blame,true);
let maybe-apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST): (TypeContext?, Type) = apply-global-callable(tctx,fname,arg-types,blame,false);

let apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST, can-fail: Bool): (TypeContext?, Type) = (
   arg-types = denormalize-strong(arg-types);
   let match-set = mk-vector(type((Type,Type,AST)), 16);
   for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
      if can-apply(kt, arg-types) {
         match-set = match-set.push( (ot, kt, t) );
      }
   };
   let result-normal = ta;
   let result-denormal = ta;
   for Tuple{ot0=first, kt0=second, t0=third} in match-set { if not(non-zero(result-normal)) {
      let all-accept = true;
      for Tuple{kt1=second, t1=third} in match-set {
         if is(t0,t1) then ()
         else if most-special(kt0,kt1)!=kt0 then all-accept = false;
      };
      if all-accept { result-normal = ot0; result-denormal = kt0; };
   }};
   if result-denormal.is-t(c"Unsafe",0) && not(tctx.get-or(mk-tctx()).is-unsafe)
   then exit-error("Call to unsafe function outside of unsafe block", blame);
   if can-fail && not(non-zero(result-normal)) && match-set.length > 0 {
      eprint("Unable to find unambiguous global callable: \{fname} \{arg-types}\nAt \{blame.location}\n");
      for Tuple{kt=second, t=third} in match-set {
         eprint("\{kt}\n");
      };
      exit(1);
   };
   if can-fail && not(non-zero(result-normal)) then {
      print("Unable to find appropriate global callable: \{fname} \{arg-types}\nAt: \{blame.location}\n");
      for Tuple{kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
         print("Candidate: \{kt}\n");
      };
      exit(1);
   };
   if non-zero(result-normal) then apply-and-specialize(tctx, fname, result-normal, result-denormal, arg-types, blame) else (tctx, ta)
);
