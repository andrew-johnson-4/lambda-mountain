
let find-global-constructor(fname: CString, hint: Type, arg-types: Type, blame: AST): AST = (
   hint = hint.rewrite-type-alias.without-phi;
   let result = ASTEOF();
   for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
      if not(ot.is-open) && (not(non-zero(hint)) || can-receive(ot, hint)) && can-apply(ot, arg-types) {
         if non-zero(result) then fail("Duplicate global constructor: \{fname} :: \{hint} (\{arg-types})At: \{blame.location}\n1: \{result}\n2: \{t}\n");
         result = t;
      }
   };
   if not(non-zero(result)) then {
      for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
         print("Candidate \{fname} : \{kt}\n");
      };
      exit-error("Unable to find appropriate global constructor: \{fname} :: \{hint} (\{arg-types})", blame);
   };
   result
);

let apply-global-constructor(tctx: TypeContext?, fname: CString, hint: Type, arg-types: Type, blame: AST): (TypeContext?, Type) = (
   hint = hint.rewrite-type-alias;
   let result = ta;
   let simple = ta;
   if non-zero(hint) && hint.is-type {
      for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
         if (not(non-zero(hint)) || can-receive(ot, hint)) && (not(non-zero(arg-types)) || can-apply(ot, arg-types)) {
            let next = if non-zero(hint)
            then unify(ot.range,hint,blame).normalize.substitute(kt)
            else kt;
            simple = ot;
            if non-zero(result) then result = result && next else result = next;
         }
      };
   } else {
      for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
         if not(non-zero(arg-types)) || can-apply(ot, arg-types) {
            let next = if non-zero(hint)
            then hint
            else kt;
            simple = ot;
            if non-zero(result) then result = result && next else result = next;
         }
      };
   };
   if not(non-zero(result)) && non-zero(hint) && not(hint.is-type) then result = hint
   else if not(non-zero(result)) then exit-error("Unable to apply appropriate global constructor: \{fname} :: \{hint} (\{arg-types})", blame);
   if result.is-arrow && non-zero(arg-types) {
      let inner-tctx = if non-zero(hint)
      then unify(simple.range, hint, blame).normalize
      else unify(simple.domain, arg-types, blame).normalize;
      let closed-type = inner-tctx.substitute(simple);
      if simple.is-open then try-specialize(fname, simple, inner-tctx, closed-type);
      result = inner-tctx.substitute(simple.range);
      for prow in inner-tctx.get-or(mk-tctx()).pctx {
         tctx = tctx.bind-phi(prow.phi-id, prow.phi-tt, blame);
      };
   };
   tctx = tctx.apply-move-args(simple, arg-types, blame);
   (tctx, result)
);

let apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST): (TypeContext?, Type) = apply-global-callable(tctx,fname,arg-types,blame,true);
let maybe-apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST): (TypeContext?, Type) = apply-global-callable(tctx,fname,arg-types,blame,false);

let apply-global-callable(tctx: TypeContext?, fname: CString, arg-types: Type, blame: AST, can-fail: Bool): (TypeContext?, Type) = (
   arg-types = denormalize-strong(arg-types);
   let match-set = mk-vector(type((Type,Type,AST)), 16);
   for Tuple{ot=first, kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
      if can-apply(kt, arg-types) {
         match-set = match-set.push( (ot, kt, t) );
      }
   };
   let result-normal = ta;
   let result-denormal = ta;
   for Tuple{ot0=first, kt0=second, t0=third} in match-set { if not(non-zero(result-normal)) {
      let all-accept = true;
      for Tuple{kt1=second, t1=third} in match-set {
         if is(t0,t1) then ()
         else if most-special(kt0,kt1)!=kt0 then all-accept = false;
      };
      if all-accept { result-normal = ot0; result-denormal = kt0; };
   }};
   if result-denormal.is-t(c"Unsafe",0) && not(tctx.get-or(mk-tctx()).is-unsafe)
   then exit-error("Call to unsafe function outside of unsafe block", blame);
   if can-fail && not(non-zero(result-normal)) && match-set.length > 0 {
      eprint("Unable to find unambiguous global callable: \{fname} \{arg-types}\nAt \{blame.location}\n");
      for Tuple{kt=second, t=third} in match-set {
         eprint("\{kt}\n");
      };
      exit(1);
   };
   if can-fail && not(non-zero(result-normal)) then {
      print("Unable to find appropriate global callable: \{fname} \{arg-types}\nAt: \{blame.location}\n");
      for Tuple{kt=second, t=third} in global-type-context-denormal.lookup(fname, [] : List<Tuple<Type,Type,AST>>) {
         print("Candidate: \{kt}\n");
      };
      exit(1);
   };
   if non-zero(result-normal) then apply-and-specialize(tctx, fname, result-normal, result-denormal, arg-types, blame) else (tctx, ta)
);
