
let can-unify(fpt: List<Type>, pt: List<Type>): U64 = (
   if fpt.length == pt.length {
      let ok = true;
      while ok && non-zero(fpt) {
         if not(can-unify(head(fpt), head(pt))) then (ok = false);
         fpt = tail(fpt); pt = tail(pt);
      };
      ok
   } else false
);

let can-unify(fpt: Type, pt: Type): U64 = (
   match (Tuple(fpt, pt)) {
      Tuple{ first:TAny{} } => true;
      Tuple{ first:TGround{tag:c"Any"} } => true;
      Tuple{ first:TGround{tag:c"Phi::Initialize"} } => true;
      Tuple{ first:TVar{}, second:TGround{tag:c"Cons"} } => false;
      Tuple{ first:TVar{} } => true;
      Tuple{ first:TAnd{ lconjugate=conjugate }, second:TAnd{ rconjugate=conjugate } } => (
         let result = true as U64;
         let ri = 0_u64;
         for lc in lconjugate {
            if result then (match lc {
               TGround{tag:c"Any"} => ();
               TGround{tag:c"Phi::Initialize"} => ();
               TGround{ltag=tag} => (
                  let this-result-ok = false as U64;
                  let rc = rconjugate[ri];
                  let rtag = rc.simple-tag;
                  if not(non-zero(rtag)) then () else (
                     while ri<rconjugate.length && rtag < ltag {
                        ri = ri + 1;
                        if ri < rconjugate.length {
                           rc = rconjugate[ri];
                           rtag = rc.simple-tag;
                        }
                     };
                     let scan-ri = ri;
                     while scan-ri<rconjugate.length && rtag==ltag {
                        this-result-ok = this-result-ok || can-unify(lc,rc);
                        scan-ri = scan-ri + 1;
                        if scan-ri < rconjugate.length {
                           rc = rconjugate[scan-ri];
                           rtag = rc.simple-tag;
                        }
                     };
                  );
                  result = result && this-result-ok;
               );
               _ => result = result && can-unify(lc,pt);
            });
         };
         result;
      );
      Tuple{ first:TAnd{ lconjugate=conjugate }, rt=second } => (
         let result = true as U64;
         for c in lconjugate { result = result && can-unify(c,rt) };
         result
      );
      Tuple{ lt=first, second:TAnd{ rconjugate=conjugate } } => (
         let result = false as U64;
         for c in rconjugate { result = result || can-unify(lt,c) };
         result
      );

      # Ignore C Access Modifiers For Now
      Tuple{ first:TGround{tag:c"C", parameters:[TGround{tag:c"const"}..]} } => true;

      # Literal Constants
      Tuple{ first:TGround{tag:c"CONST"}, second:TGround{c=tag} } => (
         c.is-digit || c==c"CONST"
      );

      # Varargs
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         if can-unify(lp1,rp1) then can-unify(fpt,rpr) else can-unify(lpr,pt)
      );
      Tuple{
          first:TGround{tag:c"Cons", parameters:[
             TGround{tag:c"...", parameters:[lp1..]}..
             lpr..
          ]},
          second:rp1
      } => (
         if can-unify(lp1,rp1) then can-unify(lpr,t1(c"Nil")) else can-unify(lpr,rp1)
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Cons", parameters:[rp1..rpr..]}
      } => (
         can-unify(lp1,rp1) && can-unify(fpt,rpr)
      );
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:TGround{tag:c"Nil", parameters:[]}
      } => true;
      Tuple{
          first:TGround{tag:c"...", parameters:[lp1..]},
          second:rp1
      } => can-unify(lp1,rp1);

      Tuple{
          first:TGround{tag:c"Arrow", parameters:[lrng.. ldom..]},
          second:TGround{tag:c"Arrow", parameters:[rrng.. rdom..]}
      } => (
         if can-unify(rdom, ldom) {
            if rdom.is-open {
               let tctx = unify(rdom, ldom);
               can-unify(lrng, substitute(tctx,rrng));
            } else {
               can-unify(lrng, rrng)
            }
         } else false
      );

      Tuple{
          first:TGround{ltn=tag, lps=parameters},
          second:TGround{rtn=tag, rps=parameters}
      } => ltn==rtn && can-unify(lps,rps);
      _ => false;
   };
);
