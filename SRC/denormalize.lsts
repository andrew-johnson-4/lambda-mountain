
let denormalize-cache = mk-hashtable-is(type(Type), type(Type));

let denormalize(tt: Type): Type = (
   let ct = denormalize-cache.lookup(tt, ta);
   if non-zero(ct) then ct else (
      ct = tt.rewrite-type-alias;
      ct = with-size(ct);
      ct = enrich-quick-prop(ct);
      ct = ct.sanitize-phi;
      denormalize-cache = denormalize-cache.bind(tt, ct);
      ct
   )
);

let denormalize-arrow(pt: Type): Type = (
   match pt {
      TAnd{ conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match denormalize-arrow(c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag:c"Arrow", parameters:[rng.. dom..]} => (
         t3( c"Arrow", denormalize-cons(dom), rng )
      );
      TGround{tag:c"Array", parameters:[rng.. dom..]} => (
         t3( c"Array", denormalize-arrow(dom), rng )
      );
      TGround{} => denormalize(pt);
      _ => pt;
   }
);

let denormalize-cons(pt: Type): Type = (
   match pt {
      TAnd{ conjugate=conjugate } => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match denormalize-cons(c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag:c"Cons", parameters:[rng.. dom..]} => (
         t3( c"Cons", denormalize-cons(dom), denormalize-cons(rng) )
      );
      TGround{} => denormalize(pt);
      _ => pt;
   }
);
