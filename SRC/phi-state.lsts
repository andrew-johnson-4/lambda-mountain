
let phi-state(tctx: TypeContext?, tt: Type, blame: AST): Type = phi-state-internal(tctx, tt, tt, blame);

let phi-state-internal(tctx: TypeContext?, tt: Type, top-level-tt: Type, blame: AST): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let new-conjugate = mk-vector(type(Type), conjugate.length);
         for c in conjugate {
            match phi-state-internal(tctx, c, top-level-tt, blame) {
               TAnd{c-conjugate=conjugate} => (
                  for small-c in c-conjugate {
                     new-conjugate = new-conjugate.push(small-c);
                  }
               );
               TAny{} => ();
               _ => new-conjugate = new-conjugate.push(c);
            }
         };
         TAnd(new-conjugate)
      );
      TGround{tag:c"Phi::Id",parameters:[TGround{phi-id=tag,parameters:[]}..]} => (
         let phi-state = tctx.get-or(mk-tctx()).pctx.lookup(phi-id, ta);
         if not(non-zero(phi-state)) then exit-error("Unable to find Phi::Id<\{phi-id}> \{top-level-tt} \{blame}\n", blame);
         tt && t2(c"Phi::State",phi-state);
      );
      TGround{tag:c"Phi::Initialize",parameters:[init-tt..]} => ta;
      TGround{tag:c"Phi::State",parameters:[init-tt..]} => ta;
      TGround{tag:c"Arrow",parameters:[init-tt..]} => tt;
      TGround{tag=tag, parameters=parameters} => (
         let new-parameters = [] : List<Type>;
         for p in parameters.reverse {
            p = phi-state-internal(tctx, p, top-level-tt, blame);
            new-parameters = cons(p, new-parameters);
         };
         ts(tag,new-parameters)
      );
      _ => tt;
   };
);
