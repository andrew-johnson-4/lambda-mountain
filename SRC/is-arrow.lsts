
let .is-arrow(tt: Type): U64 = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = false as U64;
         for c in conjugate { result = result || c.is-arrow };
         result
      );
      TGround { tag:c"Arrow" } => true;
      TGround { tag:c"Array", parameters:[_.. array-base..] } => array-base.is-arrow;
      _ => false;
   }
);

let .contains-arrow(tt: Type): U64 = (
   match tt {
      TAnd { conjugate=conjugate } => (
         let result = false as U64;
         for c in conjugate { result = result || c.contains-arrow };
         result
      );
      TGround { tag:c"Arrow" } => true;
      TGround { parameters=parameters } => parameters.contains-arrow;
      _ => false;
   }
);

let .contains-arrow(tt: List<Type>): U64 = (
   match tt {
      [hd.. tl] => hd.contains-arrow || tl.contains-arrow;
      _ => false;
   };
);
