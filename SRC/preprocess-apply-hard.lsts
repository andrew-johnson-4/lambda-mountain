
let preprocess-apply-hard(macro-name: CString, arity: U64, program: AST): AST = (
   let return = program;
   let macros = preprocess-macros;
   let matched = false;
   while non-zero(macros) { match macros {
      MSeq{ rst=k, v:Macro{ lhs=lhs, rhs=rhs } } => (
         macros = rst;
         let go = false;
         match lhs {
            App{ left:Lit{m=key} } => if macro-name==m && arity==1 then go = true;
            App{ left:App{ left:Lit{m=key} } } => if macro-name==m && arity==2 then go = true;
         };
         if go {
            let des = try-destructure-macro(program.location, lhs, program);
            if des.is-some {
               let ctx = des.get-or([] : AContext);
               rhs = with-location(rhs, program.location);
               rhs = preprocess-apply-literals(rhs);
               let p = apply(ctx, rhs);
               let c = extract-uuids(p);
               p = substitute-uuids(c,p);
               return = preprocess-apply(p);
               macros = MEOF;
               matched = true;
            }
         }
      );
   }};
   if not(matched) then fail("Invalid Macro Application \{macro-name}");
   return
);
