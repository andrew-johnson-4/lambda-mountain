
let with-location(term: AST, loc: SourceLocation): AST = (
   match term {
      Var{key=key,token=token} => Var(key,with-location(token,loc));
      Lit{key=key,token=token} => Lit(key,with-location(token,loc));
      App{left=left,right=right} => App(close(with-location(left,loc)),close(with-location(right,loc)));
      Seq{seq=seq} => (
         let ret = mk-vector(type(AST), seq.length);
         for s in seq { ret = ret.push(with-location(s,loc)) };
         Seq(ret)
      );
      Abs{lhs=lhs,rhs=rhs,tt=tt} => Abs(close(with-location(lhs,loc)),close(with-location(rhs,loc)),tt);
      Glb{key=key,val=val} => Glb(with-location(key,loc),close(with-location(val,loc)));
      _ => term;
   }
);

let .with-location(term: AST, loc: SourceLocation): AST = with-location(term, loc);

let with-location(t: Token, loc: SourceLocation): Token = (
   if non-zero(t.location) then t else Token( t.skey, t.key, iuid(), loc )
);
let .with-location(term: Token, loc: SourceLocation): Token = with-location(term, loc);

let with-location-preserve(term: AST, loc: SourceLocation): AST = (
   match term {
      Var{key=key,token=token} => Var(key,with-location(token,loc));
      Lit{key=key,token=token} => Lit(key,with-location(token,loc));
      App{is-cons=is-cons,left=left,right=right} => mk-cons-or-app(is-cons,with-location-preserve(left,loc),with-location-preserve(right,loc));
      Seq{seq=seq} => (
         let ret = mk-vector(type(AST), seq.length);
         for s in seq { ret = ret.push(with-location-preserve(s,loc)) };
         Seq(ret)
      );
      Abs{lhs=lhs,rhs=rhs,tt=tt} => Abs(close(with-location-preserve(lhs,loc)),close(with-location-preserve(rhs,loc)),tt);
      Glb{key=key,val=val} => Glb(with-location(key,loc),close(with-location-preserve(val,loc)));
      _ => term;
   }
);
