
let print-toks-json(fp: CString): Nil = (
   if not(fp.has-suffix(c".lsts")) {
      fail("only implemented for lsts files");
   };

   let toks = lsts-tokenize(fp);
   print("\"");
   print(fp);
   print("\":[");
   let first = true;
   for tok in toks {
      if first {
         first = false;
      } else {
         print(",\n");
      };
      print("{\n \"key\":\"");
      print(tok.key);
      print("\",\n \"skey\":\"");
      print(tok.skey);
      print("\",\n \"line\": ");
      print(tok.location.line);
      print(",\n \"column\": ");
      print(tok.location.column);
      print("\n}");
   };
   print("]");
);

let main(argc: C_int, argv: CString[]): Nil = (
   let argi = 1_u64;
   let input = [] : List<CString>;
   let highlight = false;
   let dump-tokens = false;
   let has-args = false;
   while argi < (argc as U64) {
      has-args = true;
      match argv[argi] {
         c"--typecheck" => config-mode = ModeTypecheck();
         c"--compile" => config-mode = ModeCompile();
         c"--v3" => config-v3 = true;
         c"--highlight" => (
            config-mode = ModeTokenize();
            highlight = true;
         );
         c"--tokens" => (
            config-mode = ModeTokenize();
            highlight = false;
         );
         c"--stripdebug" => config-strip-debug = true;
         c"-o" => (
            argi = argi + 1;
            config-target = argv[argi];
         );
         fp => (
            if plugins-backends-index.has(fp) {
               plugin-current-backend = plugins-backends-index.lookup(fp,&plugin-null-backend);
            } else { input = cons(fp, input); };
         );
      };
      argi = argi + 1;
   };
   if not(has-args) then doby-say();
   match config-mode {
      ModeTokenize{} => (
         if highlight {
            # TODO
         } else {
            print("{");
            let first-outer = true;
            for fp in input {
               if first-outer {
                  first-outer = false;
               } else {
                  print(",\n");
               };
               print-toks-json(fp);
            };
            print("\n}\n");
         };
      );
      _ => (
         for fp in input.reverse { frontend(fp); };
         match config-mode {
            ModeTypecheck{} => (preprocess(); typecheck(););
            ModeCompile{} => (preprocess(); typecheck(); plugin-current-backend(););
         };
      );
   }
);

let doby-say(): Nil = (
   print("  ______________                \n");
   print(" < Like No Udder >              \n");
   print("  --------------                \n");
   print("         \\   ^__^               \n");
   print("          \\  (oo)\\_______       \n");
   print("             (__)\\       )\\/\\   \n");
   print("                 ||-----||      \n");
   print("                 ||     ||      \n");
   print("                                \n");
   print(" OPTIONS:                       \n");
   print("    [input-file]                \n");
   print("    -o [output-file]            \n");
   print("    --typecheck                 \n");
);
