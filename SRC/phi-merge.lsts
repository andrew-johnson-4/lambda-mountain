
let phi-merge(tctx-globals: TypeContext?, tctx-primary: List<PhiContextRow>, tctx-secondary: List<PhiContextRow>, blame: AST): List<PhiContextRow> = (
   let seen = mk-vector(type(CString));
   for Tuple{ sid=phi-id, st=phi-tt, pblame=blame } in tctx-secondary {
      if not(seen.contains(sid)) {
         let pt = tctx-primary.lookup(sid).phi-tt;
         if not(non-zero(pt)) then tctx-primary = cons( PhiContextRow(sid,st,pblame), tctx-primary )
         else (
            let rt = tctx-globals.phi-merge(pt, st, blame);
            if not(is(pt,rt)) then tctx-primary = cons( PhiContextRow(sid,rt,blame), tctx-primary );
         );
         seen = seen.push(sid);
      };
   };
   tctx-primary
);

let phi-append(tctx-primary: List<PhiContextRow>, tctx-secondary: List<PhiContextRow>): List<PhiContextRow> = (
   let seen = mk-vector(type(CString));
   for Tuple{ sid=phi-id, st=phi-tt, pblame=blame } in tctx-secondary {
      if not(seen.contains(sid)) {
         let pt = tctx-primary.lookup(sid).phi-tt;
         if not(non-zero(pt)) then tctx-primary = cons( PhiContextRow(sid,st,pblame), tctx-primary );
         seen = seen.push(sid);
      };
   };
   tctx-primary
);
