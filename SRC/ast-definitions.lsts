
type SourceLocation = { filename: CString, line: U64, column: U64 };
type Token = { skey: String, key: CString, nonce: U64, location: SourceLocation };

type AST zero ASTEOF implements DefaultFormattable
         = Meta { val: AST[] }
         | ASTEOF
         | ASTNil
         | App { is-cons: U64, left: AST[], right: AST[] }
         | Var { key: CString, token: Token }
         | Lit { key: CString, token: Token }
         | Abs { lhs: AST[], rhs: AST[], tt: Type }
         | AType { tt: Type }
         | Seq { seq: Vector<AST> }
         | Glb { key: Token , val: AST[] }
         | Typedef2 { location: SourceLocation, lhs-type: Type, implies: Vector<Type>, implements: Vector<Type>,
                      size: Type, alias: Type, opaque-alias: Type, cases: Vector<(CString,Vector<(CString,Type)>)> };

# constructor with a default argument
let $"App"(left: AST[], right: AST[]): AST = App ( false, left, right );

type alias TypeContext = List<Tuple<CString,Type,AST>>;
type alias AContext = List<Tuple<CString,AST>>;

type StackToSpecialize = { key:CString, pre-type:Type, ctx:Maybe<TypeContext>, post-type:Type };

type ParsePartial = PME{ term:AST , remainder:List<Token> };

type ApplyResult = { function-type:Type , return-type:Type };

type CompileMode = ModeTokenize | ModeParse | ModePreprocess | ModeTypecheck | ModeCompile;

type IsUsed = Used | Unused | Tail | Return | Call;

type FContext zero FCtxEOF = FCtxEOF | FCtxBind{ remainder:FContext[] , k:CString , kt:Type , kv:Fragment };

type Macro = { lhs:AST, rhs:AST };
type MacroList zero MEOF = MEOF | MSeq{ k:MacroList[], v:Macro };
