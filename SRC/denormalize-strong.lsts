
let denormalize-strong(tt: type): Type = (
   denormalize(denormalize-strong-inner(tt))
);

let denormalize-strong-inner(tt: Type): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match denormalize-strong-inner(c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag:c"Arrow", parameters:[rng..dom..]} => t3(c"Arrow",denormalize-strong(dom),denormalize-strong(rng));
      TGround{tag:c"Cons", parameters:[p2..p1..]} => t3(c"Cons",denormalize-strong(p1),denormalize-strong(p2));
      _ => tt;
   }
);
