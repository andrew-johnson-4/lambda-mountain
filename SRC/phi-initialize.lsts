
let phi-initialize(tctx: TypeContext?, tt: Type, blame: AST): (TypeContext?, Type) = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let new-conjugate = mk-vector(type(Type), conjugate.length);
         for c in conjugate {
            (tctx, c) = phi-initialize(tctx, c, blame);
            if non-zero(c) then new-conjugate = new-conjugate.push(c);
         };
         (tctx, TAnd(new-conjugate))
      );
      TGround{tag:c"Phi::Initialize",parameters:[init-tt..]} => (
         let phi-id = uuid();
         init-tt = phi-initialize-linear(init-tt,blame);
         tctx = tctx.bind-phi(phi-id, init-tt, blame);
         (tctx, t2(c"Phi::Id",t1(phi-id)))
      );
      TGround{tag=tag, parameters=parameters} => (
         let new-parameters = [] : List<Type>;
         for p in parameters.reverse {
            (tctx, p) = phi-initialize(tctx, p, blame);
            new-parameters = cons(p, new-parameters);
         };
         (tctx, ts(tag,new-parameters))
      );
      _ => (tctx, tt);
   };
);

let phi-initialize-linear(tt: Type, blame: AST): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let new-conjugate = mk-vector(type(Type), conjugate.length);
         for c in conjugate {
            c = phi-initialize-linear(c,blame);
            new-conjugate = new-conjugate.push(c);
         };
         TAnd(new-conjugate)
      );
      TGround{tag:"Linear",parameters:[TVar{}..]} => t2(c"Linear", t1(uuid()));
      TGround{tag=tag,parameters=parameters} => (
         let new-parameters = [] : List<Type>;
         for t in parameters.reverse {
            new-parameters = cons(phi-initialize-linear(t,blame), new-parameters);
         };
         ts(tag,new-parameters);
      );
      _ => tt;
   }
);

let phi-initialize-parameter(tctx: TypeContext?, tt: Type, blame: AST): (TypeContext?, Type) = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let new-conjugate = mk-vector(type(Type), conjugate.length);
         for c in conjugate {
            (tctx, c) = phi-initialize-parameter(tctx, c, blame);
            if non-zero(c) then new-conjugate = new-conjugate.push(c);
         };
         (tctx, TAnd(new-conjugate))
      );
      TGround{tag:c"Phi::State",parameters:[init-tt..]} => (
         let phi-id = uuid();
         tctx = tctx.bind-phi(phi-id, init-tt, blame);
         (tctx, t2(c"Phi::Id",t1(phi-id)))
      );
      TGround{tag:c"Phi::Transition",parameters:[_..init-tt..]} => (
         let phi-id = uuid();
         tctx = tctx.bind-phi(phi-id, init-tt, blame);
         (tctx, t2(c"Phi::Id",t1(phi-id)))
      );
      TGround{tag=tag, parameters=parameters} => (
         let new-parameters = [] : List<Type>;
         for p in parameters.reverse {
            (tctx, p) = phi-initialize-parameter(tctx, p, blame);
            new-parameters = cons(p, new-parameters);
         };
         (tctx, ts(tag,new-parameters))
      );
      _ => (tctx, tt);
   };
);
