
let apply(ctx: AContext, term: AST): AST = (
   match term {
      ASTEOF{} => term;
      ASTNil{} => term;
      Lit{} => term;
      AType{tt=tt} => AType(substitute(ctx,tt));
      Var{n=key} => (
         let nr = ctx.lookup(n, mk-eof());
         if non-zero(nr) then nr else term;
      );
      App{left=left, right=right} => mk-app( apply(ctx,left), apply(ctx,right) );
      Abs{lhs=lhs, rhs=rhs, tt=tt} => mk-abs( apply(ctx,lhs), apply(ctx,rhs), tt );
      Seq{seq=seq} => (
         let return = mk-eof();
         for s in seq { return = return + apply(ctx,s) };
         return
      );
      Glb{key=key, val=val} => mk-glb( substitute(ctx,key), apply(ctx,val) );
   }
);
