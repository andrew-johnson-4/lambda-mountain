
let substitute(tctx: Maybe<TypeContext>, tt: List<Type>): List<Type> = (
   match tt {
      LCons{head=head,tail=tail} => cons( substitute(tctx,head), substitute(tctx,tail) );
      _ => tt;
   }
);

let substitute(tctx: Maybe<TypeContext>, tt: Type): Type = (
   match tt {
      TAnd{conjugate=conjugate} => (
         let result = mk-vector(type(Type), 0_u64);
         for c in conjugate {
            match substitute(tctx,c) {
               TAnd{rconjugate=conjugate} => for rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      TGround{tag=tag,parameters=parameters} => TGround(tag,close(substitute(tctx,parameters)));
      TVar{name=name} => (
         let ta = tctx.get-or([] : List<Tuple<CString,Type,AST>>).lookup(name,Tuple(ta,mk-eof()));
         if non-zero(ta.first) then ta.first else tt;
      );
      _ => tt;
   }
);
