
let std-infer-expr(tctx: Maybe<TypeContext>, term: AST, is-scoped: Bool, used: IsUsed, hint: Type): (TypeContext?, AST) = (
   match term {
      App{ left:Abs{def=lhs:Var{lname=key}, rhs:ASTNil{}, misc-tt=tt}, rhs=right } => (
         if typeof-var-raw(term, tctx, lname).is-t(c"LocalVariable",0)
         then exit-error("Variable Name Is Already Bound In Outer Scope \{lname}", term);
         (tctx, let new-rhs) = std-infer-expr(tctx, rhs, false, Tail(), ta);
         if not(is(rhs,new-rhs)) then { rhs = new-rhs; term = mk-app(mk-abs(def,mk-nil(),misc-tt),rhs); };
         let rhs-tt = phi-state(tctx,typeof-term(rhs),term);
         let tt = rhs-tt && t1(c"LocalVariable");
         (tctx, tt) = phi-fresh(tctx, tt, term);
         tctx = phi-move(tctx, rhs-tt, term);
         tctx = tctx.bind(lname, ta, tt, def);
         ascript(def, tt);
         ascript(term, t1(c"Nil"));
      );
      App{o-t=left:Var{key:c"typeof"}, r=right} => (
         (tctx, let new-r) = std-infer-expr(tctx, r, is-scoped, Used, ta);
         if not(is(r,new-r)) then { r = new-r; term = mk-app(o-t, r); };
         ascript(o-t, t3(c"Arrow",typeof-term(r),t2(c"Type",typeof-term(r))));
         ascript(term, t2(c"Type",typeof-term(r)));
      );
      App{o-t=left:Var{key:c"open"}, r=right} => (
         (tctx, let new-r) = std-infer-expr(tctx, r, false, Used(), ta);
         if not(is(r,new-r)) then { r = new-r; term = mk-app(o-t, r); };
         let deref-type = typeof-term-plain(r);
         match deref-type.slot(c"Array",2) {
            TGround{tag:c"Array", parameters:[_.. TAny{}..]} => ();
            TGround{tag:c"Array", parameters:[TAny{}.. array-base..]} => (
               mark-var-to-def-todo(tctx, c"open", deref-type, o-t);
               maybe-apply-global-callable(tctx, c"open", deref-type, term);
               deref-type = array-base;
            );
            _ => (
               mark-var-to-def-todo(tctx, c"open", deref-type, o-t);
               apply-global-callable(tctx, c"open", deref-type, term);
            );
         };
         ascript(term, deref-type);
      );
      App{szof=left:Var{key:c"sizeof"}, right:AType{}} => (
         let tt = t1(c"U64");
         ascript(term, tt);
         ascript(szof, tt);
      );
      App{szof=left:Var{key:c"scope"}, r=right} => (
         (let inner-tctx, let new-r) = std-infer-expr(tctx, r, true, Tail(), ta);
         if not(is(r,new-r)) then { r = new-r; term = mk-app(szof, r); };
         ascript(term, typeof-term-plain(r));
         tctx = tctx.with-pctx(inner-tctx.get-or(mk-tctx()).pctx);
      );
      App{asc=left:Lit{key:c":"}, right:App{t=left,right:AType{tt=tt}}} => (
         tt = tt.rewrite-type-alias;
         add-concrete-type-instance(tt, term);
         (tctx, let new-t) = std-infer-expr(tctx, t, false, Tail(), tt);
         if not(is(t,new-t)) then { t = new-t; term = mk-app(asc, mk-app(t, mk-atype(tt))); };
         ascript(term, typeof-term-plain(t));
         if tt.is-t(c"String",0) then maybe-apply-global-callable(tctx, c"intern", tt, term);
      );
      App{asc=left:Var{key:c"as"}, right:App{t=left,right:AType{tt=tt}}} => (
         tt = tt.rewrite-type-alias;
         add-concrete-type-instance(tt, term);
         (tctx, let new-t) = std-infer-expr(tctx, t, false, used, ta);
         if not(is(t,new-t)) then { t = new-t; term = mk-app(asc, mk-app(t, mk-atype(tt))); };
         let inner-tt = normalize(typeof-term-plain(t));
         if tt.tag.has-prefix(c"Tag::") then tt = tt && inner-tt
         else tt = tt && inner-tt.with-only-class;
         ascript(term, tt);
      );
      App{left:App{ left:App{ ifv=left:Var{key:c"if"}, cond=right }, t=right }, f=right} => (
         if is-scoped {
            (let tctx-inner, let new-cond) = std-infer-expr(tctx, cond, false, Tail(), ta);
            tctx = tctx.with-pctx(tctx-inner.get-or(mk-tctx()).pctx);
            (let tctx-t, let new-t) = std-infer-expr(tctx-inner, t, false, Tail(), ta);
            (let tctx-f, let new-f) = std-infer-expr(tctx, f, false, Tail(), ta);
            if not(is(cond,new-cond)) || not(is(t,new-t)) || not(is(f,new-f))
            then { cond = new-cond; t = new-t; f = new-f; term = mk-app(mk-app(mk-app(ifv,new-cond),new-t),new-f) };
            tctx = tctx.with-pctx( phi-merge(tctx,tctx-t.get-or(mk-tctx()).pctx,tctx-f.get-or(mk-tctx()).pctx,term) );
         } else {
            (tctx, let new-cond) = std-infer-expr(tctx, cond, false, Tail(), ta);
            (let tctx-t, let new-t) = std-infer-expr(tctx, t, false, Tail(), ta);
            (let tctx-f, let new-f) = std-infer-expr(tctx, f, false, Tail(), ta);
            tctx = tctx-t;
            if not(is(cond,new-cond)) || not(is(t,new-t)) || not(is(f,new-f))
            then { cond = new-cond; t = new-t; f = new-f; term = mk-app(mk-app(mk-app(ifv,new-cond),new-t),new-f) };
            tctx = tctx.with-pctx( phi-merge(tctx,tctx-t.get-or(mk-tctx()).pctx,tctx-f.get-or(mk-tctx()).pctx,term) );
         };
         apply-global-callable(tctx, c"into-branch-conditional", typeof-term-plain(cond), cond);
         let lub = if typeof-term(t).is-t(c"Never",0) then typeof-term(f)
         else if typeof-term(f).is-t(c"Never",0) || typeof-term(f).is-t(c"Nil",0) then typeof-term(t)
         else { (tctx, let lub) = least-upper-bound(tctx, typeof-term(t), typeof-term(f), term); lub.get-or(ta); };
         ascript(term, lub);
      );
      ASTEOF{} => ascript(term, t1(c"Nil"));
      ASTNil{} => ascript(term, t1(c"Nil"));
      Meta{} => ascript(term, t1(c"Nil"));
      Typedef2{} => ();
      AType{tt=tt} => ascript(term, tt);
      Seq{seq=seq} => (
         let def-i = 0_u64;
         while def-i < seq.length { match seq[def-i] {
            Glb{val:Abs{}} => (
               (_, let new-r) = std-infer-expr(tctx, seq[def-i], false, Used(), hint);
               seq[def-i] = new-r;
               def-i = def-i + 1;
            );
            _ => def-i = def-i + 1;
         }};
      );
      Glb{key=key, val=val} => (
         let rough-tt = typeof-term-plain(term);
         if rough-tt.is-arrow && not(rough-tt.is-open) && not(rough-tt.is-t(c"TypedMacro",0)) {
            (let inner-tctx, let new-val) = std-infer-expr(tctx, val, is-scoped, Used(), ta);
            match new-val {
               Abs{rhs:App{ left:Lit{key:c":"}, right:App{ rhs=left, right:AType{rhs-tt=tt} } }, tlt=tt} => (
                  if not(tlt.is-t(c"Blob",0) || tlt.is-t(c"C-FFI",0) || tlt.is-t(c"FFI",0) || tlt.is-t(c"Phi::Source",0) ) {
                     rhs-tt = rhs-tt.rewrite-type-alias;
                     if not(can-unify(rhs-tt, typeof-term(rhs)))
                     then exit-error("Return value does not match declared type:\nExpected \{rhs-tt}\nFound \{typeof-term(rhs)}\n", term);
                  };
                  inner-tctx = phi-move(inner-tctx, typeof-term(rhs), term);
                  if not(tlt.is-t(c"Blob",0) || tlt.is-t(c"C-FFI",0) || tlt.is-t(c"FFI",0) || tlt.is-t(c"Phi::Source",0) ) {
                     validate-pctx-del(inner-tctx);
                  }
               );
               _ => ();
            };
            if not(is(val,new-val)) then {
               let new-term = mk-glb(key,new-val);
               mark-var-to-def(new-term, term);
               term = new-term;
            };
         };
      );
      Var{key=key, token=token} => (
         if key==c"__uninitialized" then ascript(term, hint)
         else (
            let vt = typeof-var(term, tctx, key);
            vt = phi-state(tctx, vt, term);
            ascript(term, vt);
         );
         mark-var-to-def-todo(tctx, key, ta, term);
      );
      Lit{key=key, token=token} => (
         if hint.is-t(c"Literal",0) {
            ascript(term,hint);
         } else if not(non-zero(typeof-term-plain(term))) {
            if hint.is-t(c"List",1) && hint.is-type && key==c"LEOF"
            then ascript(term,apply-global-constructor(tctx, key, hint, t1(c"Nil"), term).second)
            else if hint.is-t(c"HashtableEq",2) && hint.is-type && key==c"HashtableEqEOF"
            then ascript(term,apply-global-constructor(tctx, key, hint, t1(c"Nil"), term).second)
            else ascript(term,apply-global-constructor(tctx, key, hint, ta, term).second);
         }
      );
      Abs{lhs=lhs, rhs=rhs:App{asc=left:Lit{key:c":"},right:App{inner-rhs=left, right:AType{return-type=tt}}}, misc-tt=tt} => (
         tctx = infer-ctx(tctx, lhs);
         (tctx, let new-inner-rhs) = std-infer-expr(tctx, inner-rhs, false, Tail(), return-type);
         if not(is(inner-rhs,new-inner-rhs))
         then {
            inner-rhs = new-inner-rhs;
            rhs = mk-app(asc.unique,mk-app(inner-rhs,mk-atype(return-type)));
            term = mk-abs(lhs,rhs,misc-tt);
         };
         if not(misc-tt.is-t(c"Blob",0)) && not(misc-tt.is-t(c"C-FFI",0)) then ascript(inner-rhs, return-type);
         ascript(rhs, return-type);
         let domain-tt = typeof-lhs(lhs);
         ascript(term, t3(c"Arrow", typeof-lhs(lhs), return-type) && misc-tt);
      );
      App{ is-cons=is-cons, l=left, r=right } => (
         let is-macro = false;
         if is-cons {
            (tctx, let new-l) = std-infer-expr(tctx, l, false, Used(), ta);
            (tctx, let new-r) = std-infer-expr(tctx, r, false, if is(used,Tail()) then used else Used(), ta);
            if not(is(l,new-l)) || not(is(r,new-r)) then { l = new-l; r = new-r; term = mk-cons(new-l, new-r) };
            ascript(term, if is(used, Tail()) then typeof-term(r) else t3(c"Cons", typeof-term(l), typeof-term(r)));
         } else {
            let rt = ta;
            if var-name-if-var(l)==c"list::cons" { match r {
               App{k=left, m=right} => (
                  (_, let new-k) = std-infer-expr(tctx, k, false, Call(), ta);
                  (_, let new-m) = std-infer-expr(tctx, m, false, Used(), t2(c"List",normalize(typeof-term(k))));
                  if not(is(k,new-k)) || not(is(m,new-m)) then { r = mk-cons(new-k, new-m) };
               );
               _ => ();
            }};
            if var-name-if-var(l)==c"map::cons" { match r {
               App{kv=left, m=right} => (
                  (_, let new-kv) = std-infer-expr(tctx, kv, false, Call(), ta);
                  (_, let new-m) = std-infer-expr(tctx, m, false, Used(), t3(c"HashtableEq",normalize(typeof-term(kv)).r2,normalize(typeof-term(kv)).r1));
                  if not(is(kv,new-kv)) || not(is(m,new-m)) then { r = mk-cons(new-kv, new-m) };
               );
               _ => ();
            }};

            if index-macro-table.has(var-name-if-var(l)) {
               (tctx, term) = std-apply-macro(tctx, term, used);
               is-macro = true;
            } else {
               (tctx, let new-l) = std-infer-expr(tctx, l, false, used, ta);
               if typeof-term(l).is-arrow {
                  (tctx, let new-r) = std-infer-expr(tctx, r, false, Call(), ta);
                  if not(is(l,new-l)) || not(is(r,new-r)) then { l = new-l; r = new-r; term = mk-app(l,r); };
               } else {
                  (tctx, let new-r) = std-infer-expr(tctx, r, false, Used(), ta);
                  if not(is(l,new-l)) || not(is(r,new-r)) then { l = new-l; r = new-r; term = mk-app(l,r); };
               };
               (tctx, rt) = if typeof-term(l).is-arrow && non-zero(lit-name-if-lit(l)) {
                  let direct-hint = hint-if-hint(l);
                  apply-global-constructor(tctx, lit-name-if-lit(l), direct-hint, typeof-term(r), term);
               } else if typeof-term(l).is-arrow && non-zero(var-name-if-var-or-lit(l)) {
                  apply-global-callable(tctx, var-name-if-var-or-lit(l), typeof-term(r), term);
               } else {
                  (tctx, t3(c"Cons", typeof-term(l), typeof-term(r)))
               };
               if not(is(used,Call())) { rt = cons-tail-or-self(rt); };
               if var-name-if-var-or-lit(l)==c"mov" && typeof-term-plain(r).is-t(c"Cons",2) {
                  let from-tt = typeof-term-plain(r).slot(c"Cons",2).l1;
                  let to-tt = typeof-term-plain(r).slot(c"Cons",2).l2;
                  tctx = phi-override(tctx, from-tt, to-tt, term);
                  tctx = phi-move(tctx, from-tt, term);
               };
               rt = phi-state(tctx, rt, term);
               ascript(term, rt);
            };
         };

         if not(is-macro) && not(is-cons) && typeof-term(l).is-arrow && non-zero(var-name-if-var(l)) {
            mark-var-to-def-todo(tctx, var-name-if-var(l), typeof-term(r), l);
         };
      );
      _ => fail("Unexpected Term in std-infer-expr\n\{term}\n");
   };
   (tctx, term);
);

