
let substitute(ctx: AContext, v: Token): Token = (
   match ctx.lookup(v.key, mk-eof()) {
      Lit{t=token} => t;
      Var{t=token} => t;
      _ => v;
   }
);

let substitute(ctx: AContext, tt: Type): Type = (
   match tt {
      TVar{v=name} => match ctx.lookup(v, mk-eof()) {
         Lit{tv=key} => parse-type(tv);
         Var{tv=key} => parse-type(tv);
         AType{tv=tt} => tv;
         _ => tt;
      };
      TGround{tag=tag,parameters=parameters} => (
         TGround( tag, close(substitute(ctx,parameters)) )
      );
      TAnd{conjugate=conjugate} => (
         let result = mk-vector(type(Type), 0_u64);
         for vector c in conjugate {
            match substitute(ctx,c) {
               TAnd{rconjugate=conjugate} => for vector rc in rconjugate { result = result.push(rc) };
               TAny{} => ();
               rc => ( result = result.push(rc); () );
            }
         };
         if result.length==0 then ta
         else if result.length==1 then result[0]
         else tand(result)
      );
      _ => tt;
   }
);

let substitute(ctx: AContext, tt: List<Type>): List<Type> = (
   match tt {
      LCons{head=head,tail=tail} => cons( substitute(ctx,head), substitute(ctx,tail) );
      _ => tt;
   }
);

let substitute(ctx: AContext, term: AST): AST = (
   match term {
      App{left:Var{key:c"uuid"}, right:Var{x=key}} => ctx.lookup(x,term).unique;
      Var{x=key} => ctx.lookup(x,term).unique;
      Lit{} => term.unique;
      Seq{seq=seq} => (
         let ret = mk-vector(type(AST), seq.length);
         for vector s in seq { ret = ret.push(substitute(ctx,s)) };
         Seq(ret)
      );
      App{is-cons=is-cons,left=left,right=right} => mk-cons-or-app(is-cons,substitute(ctx,left),substitute(ctx,right));
      Abs{lhs=lhs,rhs=rhs,tt=tt} => mk-abs(substitute(ctx,lhs), substitute(ctx,rhs), tt);
      Glb{key=key,val=val} => mk-glb(key, substitute(ctx,val));
      _ => term;
   }
);

let substitute-lhs(tctx: TypeContext?, t: AST): AST = substitute-lhs(tctx, t, 0);

let substitute-lhs(tctx: TypeContext?, t: AST, idx: U64): AST = (
   match t {
      App{ ps=left, right:App{ left:Lit{key:c":",ctk=token}, right:App{ left:Var{v=key,vtk=token}, right:AType{vt=tt} } } } => (
         mk-app( substitute-lhs(tctx,ps,idx+1), 
            mk-app( mk-lit(c":",unique(ctk)), mk-app(
               mk-var(v,unique(vtk)), mk-atype(substitute(tctx, vt.accept-interface(idx)))
            ))
         )
      );
      App{ left:Lit{key:c":",ctk=token}, right:App{ left:Var{v=key,vtk=token}, right:AType{vt=tt} } } => (
         mk-app( mk-lit(c":",unique(ctk)), mk-app(
            mk-var(v,unique(vtk)), mk-atype(substitute(tctx, vt.accept-interface(idx)))
         ))
      );
      App{ ps=left, right:Var{v=key,vtk=token} } => mk-app(substitute-lhs(tctx,ps),mk-var(v,unique(vtk)));
      Var{v=key,vtk=token} => mk-var(v,unique(vtk));
      ASTNil{} => t;
   }
);

