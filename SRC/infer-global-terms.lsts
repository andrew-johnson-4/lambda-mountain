
let infer-global-terms(term: AST): AST = (
   match term {
      Seq{seq=seq} => (
         let def-i = 0_u64;
         while def-i < seq.length {
            seq[def-i] = infer-global-terms(seq[def-i]);
            def-i = def-i + 1;
         };
      );
      Glb{val:Abs{}} => ();
      Glb{k=key, rhs=val} => (
         (_, let new-rhs) = std-infer-expr((None : TypeContext?)(), rhs, false, Used(), ta);
         if not(is(rhs,new-rhs)) then {
            let new-term = mk-glb(k, new-rhs);
            mark-var-to-def(new-term, term);
            term = new-term;
         };
         let ktn = normalize(typeof-term(rhs));
         let ktd = typeof-term(rhs) && t1(c"GlobalVariable");
         global-type-context-normal = global-type-context-normal.bind(k.key, ktn, term);
         global-type-context-denormal = global-type-context-denormal.bind(k.key, ktd, term);
         mark-global-as-seen(k.key, ktd, ta);
         ascript(term, ktd);
         maybe-apply-global-callable(c"mov", t3(c"Cons",ktd,ktd), term);
      );
      _ => (
         (_, term) = std-infer-expr(None : TypeContext?, term, false, Used, ta);
      );
   }; term
);

let infer-global-context-prim(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context-prim(s) }
      );
      Glb{ k=key, frhs=val:Abs{lhs=lhs, rhs:App{left:Lit{key:c":"}, right:App{rhs=left, right:AType{return-type=tt}}}, misc-tt=tt} } => (
         if k.key.has-prefix(c"primitive::") then {
            let ft = t3(c"Arrow", typeof-lhs(lhs), return-type) && misc-tt;
            mark-global-as-seen(k.key, ft, misc-tt);
            ascript(term, ft);
            ascript(frhs, ft);
            global-type-context-normal = global-type-context-normal.bind(k.key, ft, term);
            global-type-context-denormal = global-type-context-denormal.bind(k.key, ft, term);
         };
      );
      _ => ();
   }
);

let infer-global-context-td(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context-td(s) };
         for s in type-ast-inserts { ast-parsed-program = ast-parsed-program + s; };
      );
      Typedef2{} => infer-type-definition(term);
      _ => ();
   }
);

let infer-global-context(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context(s) }
      );
      Glb{ k=key, frhs=val:Abs{lhs=lhs, rhs:App{left:Lit{key:c":"}, right:App{rhs=left, right:AType{return-type=tt}}}, misc-tt=tt} } => (
         if k.key.has-prefix(c"primitive::") then ()
         else if misc-tt.is-t(c"TypedMacro",0) then bind-new-macro(k.key, frhs)
         else {
            let ft = t3(c"Arrow", typeof-lhs(lhs), return-type) && misc-tt;
            mark-global-as-seen(k.key, ft, misc-tt);
            ascript(term, ft);
            ascript(frhs, ft);
            global-type-context-normal = global-type-context-normal.bind(k.key, ft, term);
            global-type-context-denormal = global-type-context-denormal.bind(k.key, ft, term);
         };
      );
      _ => ();
   }
);

