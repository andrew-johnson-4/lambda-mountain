
let infer-bind-global(tctx: TypeContext?, key: CString, nt: Type, dt: Type, blame: AST): TypeContext? = (
   tctx.bind-global(key, nt, dt, blame)
);

let infer-global-terms(tctx: TypeContext?, term: AST): (TypeContext?, AST) = (
   match term {
      Seq{seq=seq} => (
         let def-i = 0_u64;
         while def-i < seq.length {
            (tctx, let rterm) = infer-global-terms(tctx, seq[def-i]);
            seq[def-i] = rterm;
            def-i = def-i + 1;
         };
      );
      Glb{val:Abs{}} => ();
      Glb{k=key, rhs=val} => (
         (tctx, let new-rhs) = std-infer-expr(tctx, rhs, false, Used, ta);
         if not(is(rhs,new-rhs)) then {
            tctx = phi-move(tctx, typeof-term(rhs), term);
            let new-term = mk-glb(k, new-rhs);
            mark-var-to-def(new-term, term);
            term = new-term;
            rhs = new-rhs;
         };
         let kto = typeof-term(rhs);
         match rhs {
            App{left:Lit{key:c":"}, right:App{right:AType{hint=tt}}} => (
               if not(hint.is-t(c"MustNotMove",0)) {
                  (tctx, let new-kto) = phi-fresh(tctx, kto, term);
                  tctx = phi-move(tctx, kto, term);
                  kto = new-kto;
               } else {
                  (tctx, let new-kto) = phi-fresh(tctx, kto, term);
                  kto = new-kto;
               }
            );
            _ => (
               (tctx, let new-kto) = phi-fresh(tctx, kto, term);
               tctx = phi-move(tctx, kto, term);
               kto = new-kto;
            );
         };
         let ktn = kto.normalize;
         let ktd = kto && t0(c"GlobalVariable");
         global-type-context-normal = global-type-context-normal.bind(k.key, ktn, term);
         global-type-context-denormal = global-type-context-denormal.bind(k.key, ktd, term);
         tctx = tctx.bind-global(k.key, ktn, ktd, term);
         mark-global-as-seen(k.key, ktd, ta);
         ascript(term, ktd);
         (tctx, _) = maybe-apply-global-callable(tctx,c"mov", t2(c"Cons",ktd,ktd), term);
      );
      _ => (tctx, term) = std-infer-expr(tctx, term, false, Unused, ta);
   };
   (tctx, term)
);

let infer-global-context-prim(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context-prim(s) }
      );
      Glb{ k=key, frhs=val:Abs{lhs=lhs, rhs:App{left:Lit{key:c":"}, right:App{rhs=left, right:AType{return-type=tt}}}, misc-tt=tt} } => (
         if k.key.has-prefix(c"primitive::") then {
            let ft = t2(c"Arrow", typeof-lhs(lhs), return-type) && misc-tt;
            mark-global-as-seen(k.key, ft, misc-tt);
            ascript(term, ft);
            ascript(frhs, ft);
            global-type-context-normal = global-type-context-normal.bind(k.key, ft, term);
            global-type-context-denormal = global-type-context-denormal.bind(k.key, ft, term);
            Some(mk-tctx()).bind-global(k.key, ft, ft, term);
         };
      );
      _ => ();
   }
);

let infer-global-context-td(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context-td(s) };
         for s in type-ast-inserts { ast-parsed-program = ast-parsed-program + s; };
      );
      Typedef{} => infer-type-definition(term);
      _ => ();
   }
);

let infer-global-context(term: AST): Nil = (
   match term {
      Seq{seq=seq} => (
         for s in seq { infer-global-context(s) }
      );
      Glb{ k=key, frhs=val:Abs{lhs=lhs, rhs:App{left:Lit{key:c":"}, right:App{rhs=left, right:AType{return-type=tt}}}, misc-tt=tt} } => (
         if k.key.has-prefix(c"primitive::") then ()
         else if misc-tt.is-t(c"TypedMacro",0) then bind-new-macro(k.key, frhs)
         else {
            let ft = t2(c"Arrow", typeof-lhs(lhs), return-type) && misc-tt;
            mark-global-as-seen(k.key, ft, misc-tt);
            ascript(term, ft);
            ascript(frhs, ft);
            global-type-context-normal = global-type-context-normal.bind(k.key, ft, term);
            global-type-context-denormal = global-type-context-denormal.bind(k.key, ft, term);
            Some(mk-tctx()).bind-global(k.key, ft, denormalize-strong(ft), term);
         };
      );
      _ => ();
   }
);

