
deprecated macro ( rl"assert"(c) ) (
   $"if"( not(c) )
        ( fputs(c"Assertion Failed At ", stderr); fputs(p(rl":Location:") : Constant+Literal+CString, stderr); exit(1); )
        ()
);

typed macro macro::let(lhs: lazy, rhs: lazy): lazy = (
   (fn(lhs) = ()) (rhs)
);

typed macro macro::set(lhs: lazy, rhs: lazy): lazy = (
   mov(rhs, lhs)
);

typed macro macro::set(base index: macro::lhs-index, rhs: lazy): lazy = (
   $"set[]"( base, index, rhs )
);

typed macro macro::set(base field: macro::lhs-field, rhs: lazy): lazy = (
   macro::concat($"set.", field) (base, rhs)
);

typed macro macro::lhs-as-rhs(v: macro::variable): lazy = (
   v
);

typed macro macro::lhs-as-rhs(base: macro::lhs-address-of): lazy = (
   &v
);

typed macro macro::lhs-address-of(base: lazy): lazy = (
   base
);

typed macro macro::lhs-field(base: lazy, field: lazy): lazy = (
   base; field
);

typed macro macro::lhs-as-rhs(base field: macro::lhs-index): lazy = (
   macro::concat(l".", field)(base)
);

typed macro macro::lhs-index(base: lazy, index: lazy): lazy = (
   base; index
);

typed macro macro::lhs-index(base field: macro::lhs-field, index: lazy): lazy = (
   macro::concat($".", field)(base); index
);

typed macro macro::while(cond: lazy, body: lazy): lazy = (
   primitive::while( cond, body as Nil )
);

deprecated macro ( rl"while"(cond)(body) )
      ( $"primitive::while"( cond, body as Nil ) );
