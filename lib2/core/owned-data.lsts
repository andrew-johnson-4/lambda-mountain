
type OwnedData<t> = {
   reference-count: USize,
   occupied: USize,
   capacity: USize,
   data: t[]+FlexibleArrayMember
};

let mk-owned-data(tt: Type<t>, capacity: USize, occupied: USize): OwnedData<t>[] = (
   let od = safe-alloc(
      # TODO: make sizeof return USize
      (sizeof(OwnedData<t>) as USize) + (sizeof(t) as USize) * capacity,
      type(OwnedData<t>)
   );
   od.reference-count = 1;
   od.occupied = occupied;
   od.capacity = capacity;
   od
);

let mk-owned-data(tt: Type<t>, capacity: USize): OwnedData<t>[] = (
   mk-owned-data(tt, capacity, 0)
);

let $"[]"(od: OwnedData<t>[], idx: USize): t = (
   if (od as USize)==0
   then fail(c"OwnedData [] Access Null Pointer");
   if idx >= od.occupied then fail("OwnedData [\{idx}] Index Access Out of Bounds");
   od.data[idx]
);

let .get-all-occupied(od: OwnedData<t>[], idx: USize): t = (
   if (od as USize)==0
   then fail(c"OwnedData [] Access Null Pointer");
   if idx >= od.capacity then fail("OwnedData [\{idx}] Index Access Out of Bounds");
   od.data[idx]
);

let $"set[]"(od: OwnedData<t>[], idx: USize, val: t): Nil = (
   if (od as USize)==0
   then fail(c"OwnedData set[] Access Null Pointer");
   if idx >= od.occupied then fail("OwnedData set[\{idx}] Index Access Out of Bounds");
   if type(t) <: type(MustRelease) then od.data[idx].release;
   od.data[idx] = val;
);

let .set-all-occupied(od: OwnedData<t>[], idx: USize, val: t): Nil = (
   if (od as USize)==0
   then fail(c"OwnedData set[] Access Null Pointer");
   if idx >= od.capacity then fail("OwnedData set[\{idx}] Index Access Out of Bounds");
   if type(t) <: type(MustRelease) then od.data[idx].release;
   od.data[idx] = val;
);

let .push(od: OwnedData<t>[], d: s): Nil = (
   if (od as USize)==0
   then fail(c"OwnedData .push Into Null Pointer");
   if od.occupied >= od.capacity
   then fail(c"OwnedData .push Exceeds Maximum Length");
   od.data[od.occupied] = d;
   od.occupied = od.occupied + 1;
);

let .pop(od: OwnedData<t>[]): t = (
   if (od as USize)==0
   then fail(c"OwnedData .pop From Null Pointer");
   if od.occupied == 0
   then fail(c"OwnedData .pop From Empty Data");
   od.occupied = od.occupied - 1;
   od.data[od.occupied]
);

let open(od: OwnedData<t>[]): t = (
   od[0];
);

let close(d: t): OwnedData<t>[] = (
   let od = mk-owned-data(type(t), 1);
   od.push(d);
   od
);

let .release(od: OwnedData<t>[]): Nil = (
   if (od as USize)!=0 {
      od.reference-count = od.reference-count - 1;
      if od.reference-count == 0 {
         if type(t) <: type(MustRelease) {
            let dlo = 0_sz;
            let dhi = od.occupied;
            while dlo < dhi {
               od.data[dlo].release;
               dlo = dlo + 1;
            };
         };
         safe-free(od);
      };
   }
);

let .retain(od: OwnedData<t>[]): Nil = (
   if (od as USize)!=0 {
      od.reference-count = od.reference-count + 1;
   }
);
