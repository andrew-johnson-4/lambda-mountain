
type String suffix _ss implies MustRetain, MustRelease
          = { start-offset:USize, end-offset:USize, data:OwnedData<U8>[] };

let .release(x: String): Nil = (
   if mem-is-non-zero(x) {
      print(c"Release String Start\n");
      # normally if x is not released by the end of scope, then it will be auto-released
      # however, mark-as-released prevents this case of infinite recursion
      # this is necessary when writing custom .release implementations
      # but normally most users won't need to use "mark-as-released" very often
      x.data.release;
   };
   mark-as-released(x);
);

let .retain(x: String): String = (
   if mem-is-non-zero(x) {
      print(c"Retain String Start\n");
      # Several inference rules are at play here
      # > normally a reference to a variable will auto-retain
      # > however field access is marked as MustNotRetain, so x.data does not auto-retain
      # > the second case of the return value is also not retained
      # > when a local variable is returned
      #    1) the local variable is referenced (retain)
      #    2) the local variable goes out of scope (release)
      #    3) so they cancel each other out
      x.data.retain;
   };
   x
);

let .length(s: String): USize = s.end-offset - s.start-offset;

let cmp(l: String, r: String): Ord = (
   let l_size = l.end-offset - l.start-offset;
   let r_size = r.end-offset - r.start-offset;
   let c = memcmp(
      (l.data.data + l.start-offset) as C<"void">[],
      (r.data.data + r.start-offset) as C<"void">[],
      min(l_size, r_size)
   ) as I64;
   if c < 0 then LessThan
   else if c > 0 then GreaterThan
   else if l_size < r_size then LessThan
   else if l_size > r_size then GreaterThan
   else Equal
);

let intern(cs: CString): String = cs.into(type(String));
let .into(s: String, tt: Type<String>): String = s;
let .into(cs: CString, tt: Type<String>): String = (
   print(c"mk-string\n");
   let cs_length = cs.length;
   let od = mk-owned-data(type(U8), cs_length);
   let csi = 0_sz;
   while csi < cs_length {
      od.push(cs[csi] as U8);
      csi = csi + 1;
   };
   # This constructor will call .retain on itself before exiting
   String(0 as USize, cs_length, od)
);

let $"[:]"(s: String, begin: I64, end: I64): String = (
   let s_length = s.length as I64;
   if end == minimum-I64 then end = s_length;
   if begin < 0_i64 then begin = s_length + begin;
   if end < 0_i64 then end = s_length + end;
   if begin < 0_i64 or begin > s_length then fail(c"String [:] Slice Start Index Out of Bounds");
   if end < 0_i64 or end > s_length then fail(c"String [:] Slice End Index Out of Bounds");
   let start_offset = ((s.start-offset as I64) + begin) as USize;
   let end_offset = ((s.start-offset as I64) + end) as USize;
   String(start_offset, end_offset, s.data)
);

let print(s: String): Nil = (
   fwrite((s.data.data + s.start-offset) as C<"void">[], sizeof(U8) as USize, s.length as USize, stdout);
   ()
);

let eprint(s: String): Nil = (
   fwrite((s.data.data + s.start-offset) as C<"void">[], sizeof(U8) as USize, s.length as USize, stderr);
   ()
);

let $"+"(l: String, r: String): String = (
   let l_length = l.length;
   let r_length = r.length;
   let cs_length = l_length + r_length;
   let od = mk-owned-data(type(U8), cs_length);
   memcpy(od.data as C<"void">[], l.data.data as C<"void">[], l_length as USize);
   memcpy((od.data + l_length) as C<"void">[], r.data.data as C<"void">[], r_length as USize);
   String(0 as USize, cs_length, od) 
);

let fail(msg: String): Never = (
   fwrite((msg.data.data + msg.start-offset) as C<"void">[], sizeof(USize) as USize, msg.length, stderr);
   exit(1) as Never;
);
