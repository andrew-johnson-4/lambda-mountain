
declare-binop-retain( $"[]", raw-type(base-type[]), raw-type(USize), raw-type(base-type), ( l"("; x; l"["; y; l"])"; ) );
declare-ternop( $"set[]", raw-type(base-type[]), raw-type(USize), raw-type(base-type), raw-type(Nil), ( l"("; x; l"["; y; l"]="; z; l")"; ) );

declare-binop( $"!=", raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l"!="; y; l")"; ) );
declare-binop( $"==", raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l"=="; y; l")"; ) );
declare-binop( $"<",  raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l"<"; y; l")"; ) );
declare-binop( $"<=", raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l"<="; y; l")"; ) );
declare-binop( $">",  raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l">"; y; l")"; ) );
declare-binop( $">=", raw-type(base-type[]), raw-type(base-type[]), raw-type(Bool), ( l"("; x; l">="; y; l")"; ) );

declare-binop( $"+", raw-type(base-type[]), raw-type(USize), raw-type(base-type[]), ( l"("; x; l"+"; y; l")"; ) );
declare-binop( $"-", raw-type(base-type[]), raw-type(USize), raw-type(base-type[]), ( l"("; x; l"-"; y; l")"; ) );
declare-binop( $"-", raw-type(base-type[]), raw-type(base-type[]), raw-type(USize), ( l"("; x; l"-"; y; l")"; ) );

declare-unop( $"&", raw-type(t+MustNotRetain), raw-type(t[]), (l"(&"; x; l")";) );

let mark-memory-as-safe(ptr: t[], len: USize): Nil = (
   # BEFORE CHANGING THIS: talk to alex

   while len > 0_sz {
      let ignored = ptr[0_sz];
      len = len - 1_sz;
      ptr = ((ptr as U8[]) + (sizeof(t) as USize)) as t[];
   };
);

# TODO: configure this with conditional compilation to remove if unused
# EXAMPLE: # if CFG.debug
#          # endif
let safe-alloc-block-count = 0_u64;

let safe-alloc-impl(nb: USize): ?[] = (
   # BEFORE CHANGING THIS: talk to alex

   let ptr = malloc(nb) as ?[];

   # Zero Out Memory
   memset(ptr as C<"void">[], 0, nb);

   if ptr as USize == 0_sz {
      fail(c"malloc fail");
   };

   mark-memory-as-safe(ptr as U8[], nb);
   safe-alloc-block-count = safe-alloc-block-count + 1; # TODO conditional compilation
   ptr
);

let safe-realloc-impl(ptr: ?[], nb: USize): ?[] = (
   # BEFORE CHANGING THIS: talk to alex

   let new_ptr = realloc(ptr as C<"void">[], nb) as ?[];

   # Zero Out Memory
   memset(new_ptr as C<"void">[], 0, nb);

   if new_ptr as USize == 0_sz {
      fail(c"realloc fail");
   };

   mark-memory-as-safe(new_ptr as U8[], nb);
   new_ptr
);

## this will fail() if len is 0
let safe-alloc(len: USize, ty: Type<t>): t[] = (
   # BEFORE CHANGING THIS: talk to alex

   let nb = len * (sizeof(t) as USize);
   safe-alloc-impl(nb) as t[]
);

## this will fail() if len is 0
let safe-realloc(ptr: t[], len: USize, ty: Type<t>): t[] = (
   # BEFORE CHANGING THIS: talk to alex

   let nb = len * (sizeof(t) as USize);
   safe-realloc-impl(ptr as ?[], nb) as t[]
);

let safe-free(ptr: ?[]): Nil = (
   # BEFORE CHANGING THIS: talk to alex

   safe-alloc-block-count = safe-alloc-block-count - 1; # TODO conditional compilation
   free(ptr as C<"void">[]); ()
);

let open(i: x): x = i;
