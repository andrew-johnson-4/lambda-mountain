
type HashtableRowExists = HashtableRowEmpty | HashtableRowFilled | HashtableRowMoved;

type Hashtable<k,v> implies MustRetain, MustRelease
   = { data: OwnedData<(HashtableRowExists,k,v)>[] };


let .release(x: Hashtable<k,v>): Nil = (
   if (x.data as USize) != 0 {
      x.data.release;
   };
   mark-as-released(x);
);

let .retain(x: Hashtable<k,v>): Hashtable<k,v> = (
   if (x.data as USize) != 0 {
      x.data.retain;
   };
   x
);

let mk-hashtable(tyk: Type<k>, tyv: Type<v>, capacity: USize): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((HashtableRowExists,k,v)), capacity) )
);

let mk-hashtable(tyk: Type<k>, tyv: Type<v>): Hashtable<k,v> = (
   # Default initial hashtable size is 16
   Hashtable( mk-owned-data(type((HashtableRowExists,k,v)), 16) )
);

let mk-hashtable(capacity: USize): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((HashtableRowExists,k,v)), capacity) )
);

let mk-hashtable(): Hashtable<k,v> = (
   # Default initial hashtable size is 16
   Hashtable( mk-owned-data(type((HashtableRowExists,k,v)), 16) )
);

let .bind(h: Hashtable<k,v>, key: k, val: v): Hashtable<k,v> = (
   if (h.data as USize) == 0 or h.data.capacity == 0 {
      h = mk-hashtable() : Hashtable<k,v>;
   };
   let occupied = h.data.occupied;
   let capacity = h.data.capacity;
   let contents = h.data;
   # Resize if >= 2/3 full
   if occupied >= capacity * 2 / 3 {
      # Growth factor is 2x
      let new-h = mk-hashtable(capacity * 2) : Hashtable<k,v>;
      let old-i = 0_sz;
      while old-i < capacity {
         let old-kv = contents[old-i];
         if is(old-kv.first,HashtableRowFilled)
         then new-h.bind-direct(old-kv.second, old-kv.third);
         old-i = old-i + 1;
      };
      h.data.replace(new-h.data);
   };
   h.bind-direct(key, val);
   h
);

let .bind-direct(h: Hashtable<k,v>, key: k, val: v): Nil = (
   print("Bind Direct \{key} : \{val}\n");
);

let $"map::cons"(key: k, val: v, h: Hashtable<k,v>): Hashtable<k,v> = (
   h.bind(key,val)
);


let $"[]"(h: Hashtable<k,v>, key: k): Maybe<k> = (
   let row_index = h.find-row-index-by-key(key);
   print("Row Index \{row_index}\n");
   if row_index == (-1 as USize)
   then (None : Maybe<v>)
   else Some(h.data[row_index].third)
);

let .find-row-index-by-key(h: Hashtable<k,v>, key: k): USize = (
   let row_index = -1 as USize;
   if (h.data as USize) != 0 and h.data.capacity > 0 {
      let key_hash = hash(key);
      let found = false;
      let contents = h.data;
      let ki = (key_hash as USize) % contents.capacity;
      let kv = contents[ki];
      if is(kv.first,HashtableRowFilled) and kv.second==key { found = true; };
      while not(is(kv.first,HashtableRowEmpty)) and not(found) {
         ki = (ki + 1) % contents.capacity;
         kv = contents[ki];
         if is(kv.first,HashtableRowFilled) and kv.second==key { found = true; };
      };
      if found then row_index = ki;
   };
   row_index
);
