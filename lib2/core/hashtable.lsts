
type Hashtable<k,v> implies MustRetain, MustRelease
   = { data: OwnedData<(Bool,k,v)>[] };

let .release(x: Hashtable<k,v>): Nil = (
   if (x.data as USize) != 0 {
      x.data.release;
   };
   mark-as-released(x);
);

let .retain(x: Hashtable<k,v>): Hashtable<k,v> = (
   if (x.data as USize) != 0 {
      x.data.retain;
   };
   x
);

let mk-hashtable(tyk: Type<k>, tyv: Type<v>, capacity: USize): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((Bool,k,v)), capacity) )
);

let mk-hashtable(tyk: Type<k>, tyv: Type<v>): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((Bool,k,v)), 0) )
);

let mk-hashtable(capacity: USize): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((Bool,k,v)), capacity) )
);

let mk-hashtable(): Hashtable<k,v> = (
   Hashtable( mk-owned-data(type((Bool,k,v)), 0) )
);

let .bind(h: Hashtable<k,v>, key: k): Hashtable<k,v> = (
   h
);

let $"map::cons"(key: k, val: v, h: Hashtable<k,v>): Hashtable<k,v> = (
   h
);

let $"[]"(h: Hashtable<k,v>, key: k): Maybe<k> = (
   None : Maybe<k>
);
