
type opaque alias U64 suffix _u64 = C<"uint64_t">;

declare-binop( $"!=", raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l"!="; y; l")"; ) );
declare-binop( $"==", raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l"=="; y; l")"; ) );
declare-binop( $"<",  raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l"<"; y; l")"; ) );
declare-binop( $"<=", raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l"<="; y; l")"; ) );
declare-binop( $">",  raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l">"; y; l")"; ) );
declare-binop( $">=", raw-type(U64), raw-type(U64), raw-type(Bool), ( l"("; x; l">="; y; l")"; ) );

declare-binop( $"&", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"&"; y; l")"; ) );
declare-binop( $"|", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"|"; y; l")"; ) );
declare-binop( $"^", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"^"; y; l")"; ) );
declare-binop( $"+", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"+"; y; l")"; ) );
declare-binop( $"-", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"-"; y; l")"; ) );
declare-binop( $"/", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"/"; y; l")"; ) );
declare-binop( $"%", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"%"; y; l")"; ) );
declare-binop( $"*", raw-type(U64), raw-type(U64), raw-type(U64), ( l"("; x; l"*"; y; l")"; ) );

declare-unop( $"~", raw-type(U64), raw-type(U64), ( l"((uint64_t)(~"; x; l"))"; ) );

let min(l: U64, r: U64): U64 = (
   if l < r then l else r
);
let max(l: U64, r: U64): U64 = (
   if l > r then l else r
);

let cmp(l: U64, r: U64): Ord = (
   if l < r then LessThan
   else if l > r then GreaterThan
   else Equal
);

#let .into(i: U64, tt: Type<String>): String = (
#   let od = mk-owned-data(type(U8), 20_sz);
#   let cs_length = 0_sz;
#   if i == 0_u64 {
#      od.push(48);
#      cs_length = cs_length + 1;
#   };
#   while i != 0_u64 {
#      od.push(48 + ((i % 10) as U8));
#      cs_length = cs_length + 1;
#      i = i / 10;
#   };
#   let start_i = 0_sz;
#   let end_i = cs_length - 1_sz;
#   while start_i < end_i {
#      let tmpc = od.data[start_i];
#      od.data[start_i] = od.data[end_i];
#      od.data[end_i] = tmpc;
#      start_i = start_i + 1_sz;
#      end_i = end_i - 1_sz;
#   };
#   String(0 as USize, cs_length, od)
#);
