
let cmp(l: CString, r: String): Ord = (
   cmp( intern(l), r )
);
let $"=="(l: CString, r: String): U64 = cmp(l, r) == Equal();
let $"!="(l: CString, r: String): U64 = cmp(l, r) != Equal();
let $"<"(l: CString, r: String): U64 = cmp(l, r)  <  Equal();
let $"<="(l: CString, r: String): U64 = cmp(l, r) <= Equal();
let $">"(l: CString, r: String): U64 = cmp(l, r)  >  Equal();
let $">="(l: CString, r: String): U64 = cmp(l, r) >= Equal();

let cmp(l: String, r: CString): Ord = (
   cmp( l, intern(r) )
);
let $"=="(l: String, r: CString): U64 = cmp(l, r) == Equal();
let $"!="(l: String, r: CString): U64 = cmp(l, r) != Equal();
let $"<"(l: String, r: CString): U64 = cmp(l, r)  <  Equal();
let $"<="(l: String, r: CString): U64 = cmp(l, r) <= Equal();
let $">"(l: String, r: CString): U64 = cmp(l, r)  >  Equal();
let $">="(l: String, r: CString): U64 = cmp(l, r) >= Equal();

let cmp(x: String, y: String): Ord = (
   let r = Equal();
   if not(is( x, y )) {
      let x-start = x.start;
      let y-start = y.start;
      while x-start < x.end && y-start < y.end {
         if x-start[0_u64] < y-start[0_u64] {
            r = LessThan();
            x-start = x.end;
            y-start = y.end;
         } else if x-start[0_u64] > y-start[0_u64] {
            r = GreaterThan();
            x-start = x.end;
            y-start = y.end;
         } else {
            x-start = x-start + 1_u64;
            y-start = y-start + 1_u64;
         }
      };
      if x-start < x.end { r = GreaterThan() };
      if y-start < y.end { r = LessThan() };
   };
   r
);

let print(io: IO::File, x: String): Nil = (
   let start = x.start;
   while start != x.end {
      fwrite(start, 1_u64, 1_u64, $"io::file::stdout"());
      start = start + 1_u64;
   };
);
let print(x: String): Nil = print( $"io::file::stdout"() as IO::File, x );

let eprint(io: IO::File, x: String): Nil = (
   let start = x.start;
   while start != x.end {
      fwrite(start, 1_u64, 1_u64, $"io::file::stderr"());
      start = start + 1_u64;
   };
);
let eprint(x: String): Nil = print( $"io::file::stderr"() as IO::File, x );

let non-zero(s: String): U64 = s.start < s.end;

let intern(s: CString): String = (
   let data-end = (s as U8[]) + s.length;
   let a1 = s as U8[];
   String( a1, a1, data-end, data-end )
);
let intern(s: String): String = s;

let untern(s: String): CString = (
   let r = SNil;
   let s-start = s.start;
   while s-start < s.end {
      r = r + SAtom(clone-rope(s-start[0]));
      s-start = s-start + 1_u64;
   };
   clone-rope(r);
);

let .length(x: String): U64 = x.end - x.start;

let $"[:]"(x: String, low: U64, hi: U64): String = x[low as I64 : hi as I64];
let $"[:]"(x: String, low: I64, hi: U64): String = x[low : hi as I64];
let $"[:]"(x: String, low: U64, hi: I64): String = x[low as I64 : hi];
let $"[:]"(x: String, low: I64, hi: I64): String = (
   if low < 0 then low = (x.length as I64) + low;
   if hi==minimum-I64 then hi = x.length as I64
   else if hi < 0 then hi = (x.length as I64) + hi;
   let lowp = x.start + low;
   let hip = x.start + hi;
   if hip < lowp then fail("Index Out Of Bounds: String [:]");
   if lowp < x.start then fail("Index Out Of Bounds: String [:]");
   if hip > x.end then fail("Index Out Of Bounds: String [:]");
   String(x.data, lowp, hip, x.data-end)
);

let tail-string(x: String): String = x[ 1_i64 : x.length as I64 ];

let $"[]"(x: String, low: I64): U8 = (
   if low < 0 then low = (x.length as I64) + low;
   x[low as U64]
);

let $"[]"(x: String, low: U64): U8 = (
   let lowp = x.start + low;
   if lowp < x.start then fail("Index Out Of Bounds: String []");
   if lowp >= x.end then fail("Index Out Of Bounds: String []");
   lowp[0]
);

let head-string(x: String): U8 = x[0_u64];

let .has-suffix(base: String, sfx: String): U64 = (
   base.length >= sfx.length &&
   base[ (base.length - sfx.length) as I64 : base.length as I64 ] == sfx
);

let .remove-suffix(base: String, sfx: String): String = (
   if base.has-suffix(sfx)
   then base[ 0_i64 : (base.length - sfx.length) as I64 ]
   else base
);

let .has-prefix(base: String, pfx: String): U64 = (
   base.length >= pfx.length &&
   base[ 0_i64 : pfx.length as I64 ] == pfx
);

let .remove-prefix(base: String, pfx: String): String = (
   if base.has-prefix(pfx)
   then base[ pfx.length as I64 : minimum-I64 ]
   else base
);

let .replace(base: String, pat: String, n: String): CString = (
   let r = SNil;
   while base.length > 0 {
      if base.has-prefix(pat) { 
         base = base.remove-prefix(pat);
         r = r + SAtom(untern(n));
      } else {
         r = r + SAtom(clone-rope(head-string(base)));
         base = tail-string(base);
      }
   };
   clone-rope(r);
);

# Smart Strings may allocated a hidden null byte after the data to protect against any accidental CString coercions
let $"+"(l: String, r: String): String = (
   let length = l.length + r.length;
   let data = malloc(length + 1) as U8[];
   let li = 0_u64;
   while li < l.length {
      data[li] = l[li];
      li = li + 1;
   };
   let ri = 0_u64;
   while ri < r.length {
      data[li+ri] = r[ri];
      ri = ri + 1;
   };
   data[length] = 0;
   String( data, data, data + length, data + length )
);

let to-smart-string(s: String): String = s;
let to-smart-string(s: CString): String = intern(s);

let deep-hash(key: String): U64 = (
   let i = 0_u64;
   let hash = 0_u64;
   let key-start = key.start;
   while key-start < key.end {
      hash = hash + key-start[0];
      hash = hash + (hash << 10);
      hash = hash ^ (hash >> 6);
      key-start = key-start + 1_u64;
   };
   hash = hash + (hash << 3);
   hash = hash ^ (hash >> 11);
   hash = hash + (hash << 15);
   hash
);
