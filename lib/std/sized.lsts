
## Jenkins One at a Time Hash
let hash(key: t): U64 = (
   let i = 0_u64;
   let hash = 0_u64;
   while i < (sizeof(t) / 8) {
      hash = hash + (&key as U64[])[i];
      i = i + 1;
      hash = hash + (hash << 10);
      hash = hash ^ (hash >> 6);
   };
   hash = hash + (hash << 3);
   hash = hash ^ (hash >> 11);
   hash = hash + (hash << 15);
   hash
);

let is(l: t, r: t): U64 = (
   let i = 0_u64;
   let return = true;
   while i < sizeof(t) {
      let li = (&l as U8[])[i];
      let ri = (&r as U8[])[i];
      if li != ri then return = false;
      i = i + 1;
   };
   return
);

let mem-is-non-zero(v: t): U64 = (
   let i = 0_u64;
   let r = false;
   while i < sizeof(t) {
      if (&v as U8[])[i] != 0 then r = true;
      i = i + 1;
   };
   r
);
