
interface self implements Collection<t> {
   let .length(x: self): U64;
   let $"[]"(x: self, idx: U64): t;
}

let .last(self: t+Collection<x>): x = (
   let ln = self.length();
   if ln == 0 {
      fail("cannot get .last() from empty collection");
   };
   self[(ln - 1)]
);

interface self implements Iterator<t> {
   let .next(x: self[]): Maybe<t>;
}

interface self implements Iterable<t> {
   # TODO: uncomment doc
   # ## When modifying th eunderlying collection while iterating,
   # ## the iterator should continue on the old version.
   let .iter(x: self): Iterator<t>;

   # ## Underlying collection not allowed to be modified while iterating.
   let .unsafe-iter(x: self): Iterator<t>;
}

type Iterator<t> implements Iterable<t>;
let .iter(x: t+Iterator<elt>): t = ( x );
let .unsafe-iter(x: t+Iterator<elt>): t = ( x );

interface IteratorRemaining {
   let .remaining(x: self + Iterator<t>): U64;
};

let remaining-or-zero(from: Iterator<x>): U64 = (
   0
);

let remaining-or-zero(from: Iterator<x>+IteratorRemaining): U64 = (
   from.remaining()
);

let length-or-zero(from: Iterable<x>): U64 = (
   0_u64
);

let length-or-zero(from: Collection<x>): U64 = (
   from.length()
);

let length-or-zero(from: Collection<x>+Iterable<x>): U64 = (
   from.length()
);

## TODO: remove
type Unused<t> = UnusedType{};

type CollectionIteratorBase<c,t> = { coll: c, idx: U64, _u: Unused<t> };
type CollectionIteratorBase<c,t> implements Iterator<t>;
type CollectionIteratorBase<c,t> implements IteratorRemaining;

let .remaining(self: CollectionIteratorBase<c,t>): U64 = (
   self.coll.length() - self.idx
);

let .next(p: CollectionIteratorBase<c,t>[]): Maybe<t> = (
   let v = p[0];
   if v.idx < v.coll.length() {
      let val = v.coll[v.idx];
      v.idx = v.idx + 1;
      p[0] = v;
      Some(val) : Maybe<t>
   } else {
      None : Maybe<t>
   }
);

let .into(self: c+Collection<t>, out: Type<CollectionIteratorBase<c,t>>): CollectionIteratorBase<c,t> = (
   CollectionIteratorBase( self, 0_u64, UnusedType() : Unused<t> )
);
