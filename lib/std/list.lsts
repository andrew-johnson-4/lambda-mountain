
## linked list
##
## consider using [type(Vector<x>)] instead
type List<x> zero LEOF
             = LEOF
             | LCons{ head:x , tail:List<x>[] };

type List<x> implements Iterable<x>;
type List<x> implements Collection<x>;

let cmp(ls: List<x>, rs: List<x>): Ord = (
   let diff = Equal();
   while is(diff, Equal()) && non-zero(ls) && non-zero(rs) {
      diff = cmp(head(ls), head(rs));
      ls = tail(ls);
      rs = tail(rs);
   };
   if not(is(diff,Equal())) then diff else
   if not(non-zero(ls)) && non-zero(rs) then LessThan() else
   if non-zero(ls) && not(non-zero(rs)) then GreaterThan() else
   Equal()
);

let .into(ls: List<x>, tt: Type<String>): String = (
   let s = "[";
   let si = 0_u64;
   for l in ls {
      if si > 0_u64 {
         s = s + ",";
      };
      s = s + l.into(type(String));
      si = si + 1_u64;
   };
   s = s + "]";
   s
);

let .unique(ls: List<x>): List<x> = (
   let rs = [] : List<x>;
   for l in ls {
      if not(rs.contains(l)) {
         rs = cons(l, rs);
      }
   };
   rs
);

##[DEPRECATED .iter().next()]
let .next(ls: Array<List<x>,?>): Maybe<x> = (
   match open(ls) {
      [i.. rst] => (
         ls[0_u64] = rst;
         Some(i)
      );
      [] => (None : Maybe<x>)();
   };
);

let .nth(tt: List<x>, idx: U64): Maybe<x> = (
   let err = false;
   while idx > 0 && not(err) {
      if tt.has-head() {
         tt = tail(tt);
         idx = idx - 1;
      } else {
         err = true;
      }
   };

   if err || not(tt.has-head()) {
      None : Maybe<x>
   } else {
      Some(head(tt))
   }
);


let $"[]"(tt: List<x>, idx: U64): x = (
   while idx > 0 {
      if not(tt.has-head()) {
         fail("index \{idx} is out of bounds for list of length \{tt.length()}");
      };
      tt = tail(tt);
   };
   head(tt)
);

type ListIter<x> implements Iterator<x> = { list: List<x> };

let .next(ls: ListIter<x>[]): Maybe<x> = (
   match open(open(ls).list) {
      [i.. rst] => (
         ls[0_u64] = ListIter(rst);
         Some(i)
      );
      [] => (None : Maybe<x>);
   };
);

let .iter(li: List<x>): ListIter<x> = (
   li.unsafe-iter();
);

let .unsafe-iter(li: List<x>): ListIter<x> = (
   ListIter(li)
);

let .lookup(ls: List<Tuple<k,v>>, key: k, default: v): v = (
   let found = false;
   for Tuple{lkey=first, rval=second} in ls {
      if not(found) && key==lkey { default=rval; found=true; }
   };
   default;
);
let .lookup(ls: List<Tuple<k,v1,v2>>, key: k, default: Tuple<v1,v2>): Tuple<v1,v2> = (
   let found = false;
   for Tuple{lkey=first, val1=second, val2=third} in ls {
      if not(found) && key==lkey { default=Tuple(val1,val2); found=true; }
   };
   default;
);

let cons(hd: x, tl: List<x>): List<x> = LCons(hd, close(tl));
let $"list::cons"(hd: x, tl: List<x>): List<x> = LCons(hd, close(tl));
let head(l: List<x>): x = if l.has-head then (l as Tag::LCons).head else fail("list::head is fallible");
let tail(l: List<x>): List<x> = if l.has-head then open((l as Tag::LCons).tail) else fail("list::tail is fallible");
let .has-head(l: List<x>): U64 = non-zero(l);

let $"+"(hd: List<x>, tl: List<x>): List<x> = (
   for hdhd in hd.reverse { tl = cons(hdhd,tl); };
   tl
);

let .length(l: List<x>): U64 = (
   let li = 0_u64;
   for _ in l { li = li + 1; };
   li
);

let .reverse(l: List<x>): List<x> = (
   let r = [] : List<x>;
   for v in l { r = cons(v,r); };
   r
);

let print(l: List<x>): Nil = (
   print(c"[");
   let li = 0_u64;
   for v in l {
      if li>0 then print(c",");
      print(v);
      li = li + 1;
   };
   print(c"]");
);

let $"=="(lt: List<x>, rt: List<x>): U64 = (
   match (lt, rt) {
      Tuple{ first:[], second:[] } => true;
      Tuple{ first:[ltr..lt1], second:[rtr..rt1] } => ltr==rtr && lt1==rt1;
      _ => false;
   };
);

let .contains(l: List<x>, i: x): U64 = (
   let r = false;
   for j in l { r = r || i==j; };
   r
);

let .join(l: List<CString>, sep: CString): CString = (
   let r = SNil;
   for i in l {
      if non-zero(r)
      then r = r + SAtom(sep) + SAtom(i)
      else r = SAtom(i)
   };
   clone-rope(r)
);
