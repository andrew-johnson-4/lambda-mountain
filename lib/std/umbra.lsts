
## string type optimized for use in databases and small strings
##
## this is a implementation of the UmbraDB string type (also known as german string)
##
## when to use:
## -you know that your strings tend to be short (<= 12 bytes)
## - you need to use [.has-prefix] or [$"=="] on a lot of strings:
##   if you have a hash table of strings, remember that it only uses
##   the comparision operators if there are hash collissions
##
## how it works:
## - the length of the string is stored on the stack (4B)
## - if the string fits into 12 bytes, it is stored as [type(UmbraShort)] string,
##   which stores the 12 bytes of the string on the stack
## - if the string does not fit into 12 bytes, it is stored as [type(UmbraLong)] string,
##   which stores the first 4 bytes of the string on the stack,
##   and the whole string (including the first 4 bytes!) on the heap
##
## problems with the implementation:
## - the compiler stores the type of the variant in the struct,
##   even though it can be gotten from the length.
##   that does not have a big performance impact in most applications
## - for [type(UmbraLong)]: the [.nth] implementation loads from the prefix if the index is less than 4,
##   which is good in many scenarios, but the compiler does not know that it is
##   just as safe to load from the memory directly (because of the if expression),
##   which hurts vectorization a lot.
##   If you know that that might happen, you might be able to use the [addr] function
##
## TODO:
## - there should be an alternative string implementation optimizes for even shorter strings (8 bytes),
##   which does not store the prefix
## - maybe null-terminate the string if, any only if, it is stored as [type(UmbraLong)]
## - maybe padd the short array with zeros

type UmbraShortLong = UmbraShort { arr: U8[12] } | UmbraLong { prefix: U8[4], ptr: U8[] };

type Umbra = { len: U32, backing: UmbraShortLong };

let .length(s: Umbra[]): U64 = (
    s.len as U64
);

## using this in a vectorizable loop can break vectorization 
## if you know that your loop is vectorizable, consider using [addr]
let $"[]"(s: Umbra[], i: U64): U8 = (
    match raw s.backing {
        UmbraShort { raw arr=arr } => arr[i];
        UmbraLong { raw prefix=prefix, raw ptr=ptr } => (
            if i < 4 {
                prefix[i]
            } else {
                ptr[i]
            }
        );
    }
);

## DOES NOT CLONE THE STRING
let $"set[]"(s: Umbra[], i: U64, v: U8): Nil = (
   match raw s.backing {
      UmbraShort { raw arr=arr } => ( 
          arr[i] = v;
      );
      UmbraLong { raw prefix=prefix, raw ptr=ptr } => (
         if i < 4_u64 {
            prefix[i] = v;
         };
         ptr[i] = v;
      );
   }; ()
);

## the returned array is NOT a C string!
## the returned array is only valid for [.length] bytes
## the returned array is READ ONLY
## for [type(UmbraLong)], returns the pointer to the heap data 
## for [type(UmbraShort)], returns the pointer to the on-stack data
let addr(s: Umbra[]): U8[] = (
    match raw s.backing {
        UmbraShort { raw arr=arr } => (
            (arr as U8[])
        );
        UmbraLong { raw ptr=ptr } => (
            ptr
        );
    }
);

## like [clone-len], except that if the input string is a UmbraLong, 
## it does NOT copy the heap allocation
let view-len(u: Umbra[], len: U64): Umbra = (
    if (len <= 12_u64) && (u.len > 12_u32) {
        # shrinks to UmbraShort
        let res = new-umbra(len);
        let idx = 0_u64;
        while idx < len {
            &res[idx] = u[idx];
            idx = idx + 1_u64;
        };
        res
    } else {
        u.len = len as U32;
        open(u)
    }
);

let print(x: Umbra[]): Nil = (
    let idx = 0_u64;
    let ptr = addr(x);
    while idx < x.length() {
        putchar(ptr[idx] as U32);
        idx = idx + 1_u64;
    };
);

let short-prefix-matches(a: Umbra[], b: Umbra[]): U64 = (
    (a[0_u64] == b[0_u64]) &&
    (a[1_u64] == b[1_u64]) &&
    (a[2_u64] == b[2_u64]) &&
    (a[3_u64] == b[3_u64])
);

## performance note: this is extremly fast if the pfx string is known to be <= 4 bytes at compile time
let .has-prefix(base: Umbra[], pfx: Umbra[]): U64 = (
    if pfx.length() > base.length() {
        0_u64
    } else {
        short-prefix-matches(base, pfx) &&
        memcmp(addr(base), addr(pfx), pfx.length()) == 0_u32
    }
);

let .has-prefix(base: Umbra[], pfx: t): U64 = (
    let pfxlen = pfx.length();
    if pfxlen > base.length() {
        0_u64
    } else {
        # this seems unoptimal, but trust me, this is extremly fast
        # do NOT add a break into the whole loops (bc vectorization)
        if pfxlen > 4_u64 {
            let a = addr(base);
            let matches = 1_u64;
            let i = 0_u64;
            while i < pfxlen {
                if pfx[i] != a[i] {
                    matches = 0_u64;
                };
                i = i + 1_u64;
            };
            matches
        } else {
            let i = 0_u64;
            let matches = 1_u64;
            while i < pfxlen {
                if pfx[i] != base[i] {
                    matches = 0_u64;
                };
                i = i + 1_u64;
            };
            matches
        }
    }
);

let $"=="(l: Umbra[], r: t): U64 = (
    if l.length() != r.length() {
        0_u64
    } else {
        l.has-prefix(r)
    }
);

let $"=="(l: t, r: Umbra[]): U64 = (
    r == l
);

let $"!="(l: t, r: Umbra[]): U64 = (
    not(l == r)
);

let $"!="(l: Umbra[], r: t): U64 = (
    not(l == r)
);

let deep-hash(key: Umbra[]): U64 = (
    let hash = 0_u64;
    let idx = 0_u64;
    let ptr = addr(key);
    while idx < key.length() {
        hash = hash + (ptr[idx] as U64);
        hash = hash + (hash << 10_u64);
        hash = hash ^ (hash >> 6_u64);
        idx = idx + 1_u64;
    };
    hash = hash + (hash << 3_u64);
    hash = hash ^ (hash >> 11_u64);
    hash = hash + (hash << 15_u64);
    hash
);

let new-umbra(length: U64): Umbra = (
    if length <= 12_u64 {
        # const-cons can't be used in expression position atm
        let cs = const-cons(0_u8, 12_l);
        Umbra(length as U32,
            UmbraShort(cs as U8[12]))
    } else {
        let cs = const-cons(0_u8, 4_l);
        Umbra(length as U32,
            UmbraLong(cs as U8[4],
                safe-alloc(length, type(U8))))
    }
);

## clones input to umbra string
let .into(s: t, t: Type<Umbra>): Umbra = (
    to-umbra(s, s.length())
);

let .into(self: Umbra, t: Type<Vector<U8>>): Vector<U8> = (
   let out = mk-vector(type(U8), (&self).length + 1);
   let ptr = addr(&self);
   let i = 0_u64;
   while i < (&self).length() {
      out = out.push(ptr[i]);
      i = i + 1_u64;
   };
   out;
);

let .into(self: Umbra, t: Type<CString>): CString = (
   let v = self.into(type(Vector<U8>));
   v = v.push(0_u8);
   ((v.data as U8[]) as CString);
);

let .into(self: Umbra, t: Type<SmartString>): SmartString = (
   let v = self.into(type(CString));
   intern(v);
);

## clones input to umbra string BUT only includes the first [len] characters
let to-umbra(s: t, len: U64): Umbra = (
    let out = new-umbra(len);
    let i = 0_u64;
    while i < len {
        &out[i] = s[i];
        i = i + 1_u64;
    };
    out
);

let concat-to-umbra(l: tl, r: tr): Umbra = (
    let out = new-umbra(l.length() + r.length());

    let i = 0_u64;
    while i < l.length() {
        &out[i] = l[i];
        i = i + 1_u64;
    };

    i = 0_u64;
    while i < r.length() {
        &out[i + l.length()] = r[i];
        i = i + 1_u64;
    };

    out
);

let $"+"(l: t, r: Umbra[]): Umbra = (
    concat-to-umbra(l, r)
);

let $"+"(l: Umbra[], r: t): Umbra = (
    concat-to-umbra(l, r)
);
