
declare-binop( $"!=", raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l"!="; y; l")"; ) );
declare-binop( $"==", raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l"=="; y; l")"; ) );
declare-binop( $"<",  raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l"<"; y; l")"; ) );
declare-binop( $"<=", raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l"<="; y; l")"; ) );
declare-binop( $">",  raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l">"; y; l")"; ) );
declare-binop( $">=", raw-type(I8), raw-type(I8), raw-type(U64), ( l"("; x; l">="; y; l")"; ) );

declare-binop( $"+", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"+"; y; l")"; ) );
declare-binop( $"-", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"-"; y; l")"; ) );
declare-binop( $"^", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"^"; y; l")"; ) );
declare-binop( $"/", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"/"; y; l")"; ) );
declare-binop( $"%", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"%"; y; l")"; ) );
declare-binop( $"*", raw-type(I8), raw-type(I8), raw-type(I8), ( l"("; x; l"*"; y; l")"; ) );

declare-unop( not, raw-type(I8), raw-type(U64), ( l"(!"; x; l")"; ) );

declare-unop( into-branch-conditional, raw-type(I8), raw-type(U64), x );

let print(io: IO::File, x: I8): Nil = (fprintf(io, c"%d", x); ());
