
# TODO: when moving this, update c-frontend.lsts

import core/common-macros.lm;
import std/platform-macros.lm;
import std/primitives.lm;
import std/primitives.lsts;

let :Blob $"c::compound"(ts: Cons<Any,last>): last = (
);

let :Blob $"c::compound"(ts: last): last = (
);

let :Blob $"prefix:c::return"(ts: x): x = (
   l"return "; ts;
);


let :Blob $"c::if"(cond: c, tb: tbt, fb: fbt): Nil = (
   l"if("; cond; l"){"; tb; l"}else{"; fb; l"}";
);

let :Blob $"c::for"(l1: l1t, l2: l2t, l3: l3t, stmt: stmtt): Nil = (
   l"for("; l1; l";"; l2; l";"; l3; l"){"; stmt; l"}";
);

let :Blob $"c::while"(l1: l1t, stmt: stmtt): Nil = (
   l"while("; l1; l"){"; stmt; l"}";
);

let :Blob $"c::do-while"(stmt: stmtt, l1: l1t): Nil = (
   l"do{"; stmt; l"}while("; l1; l")";
);

let :Blob $"c::switch"(e: et, stmt: stmtt): Nil = (
   l"switch("; e; l"){"; stmt; l"}";
);

let :Blob $"c::case"(e: et, stmt: stmtt): Nil = (
   l"case "; e; l":"; stmt;
);

let :Blob $"c::label"(e: et): Nil = (
   e; l":";
);

let :Blob $"prefix:c::default"(stmt: stmtt): Nil = (
   l"default:"; stmt;
);

let :Blob $"c::;"(): Nil = ();
let :Blob $"prefix:c::goto"(lbl: lblt): Nil = ( l"goto "; lbl; );
let :Blob $"c::continue"(): Nil = l"continue";
let :Blob $"c::break"(): Nil = l"break";
let :Blob $"c::return"(): Nil = l"return";

# for 64 bit machines: TODO replace with architecture specific types
type alias C<"int"> = C<"int32_t">;
type opaque alias C<"int32_t"> = C<"int">;

# U8
type C<"uint8_t"> implies C<"int16_t">;
type C<"uint8_t"> implies C<"uint16_t">;
type C<"uint8_t"> implies C<"int32_t">;
type C<"uint8_t"> implies C<"uint32_t">;
type C<"uint8_t"> implies C<"int64_t">;
type C<"uint8_t"> implies C<"uint64_t">;

# I8
type C<"int8_t"> implies C<"int16_t">;
type C<"int8_t"> implies C<"int32_t">;
type C<"int8_t"> implies C<"int64_t">;

# U16
type C<"uint16_t"> implies C<"int32_t">;
type C<"uint16_t"> implies C<"uint32_t">;
type C<"uint16_t"> implies C<"int64_t">;
type C<"uint16_t"> implies C<"uint64_t">;

# I16
type C<"int16_t"> implies C<"int32_t">;
type C<"int16_t"> implies C<"int64_t">;

# U32
type C<"uint32_t"> implies C<"int64_t">;
type C<"uint32_t"> implies C<"uint64_t">;

# I32
type C<"int32_t"> implies C<"int64_t">;

let :Blob $"+"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"+"; y; l")";);
let :Blob $"+"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"+"; y; l")";);

let :Blob $"-"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"-"; y; l")";);
let :Blob $"-"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"-"; y; l")";);

let :Blob $"*"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"*"; y; l")";);
let :Blob $"*"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"*"; y; l")";);

let :Blob $"/"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"/"; y; l")";);
let :Blob $"/"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"/"; y; l")";);

let :Blob $"%"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"%"; y; l")";);
let :Blob $"%"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"%"; y; l")";);

let :Blob $"&"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"&"; y; l")";);
let :Blob $"&"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"&"; y; l")";);

let :Blob $"|"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"|"; y; l")";);
let :Blob $"|"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"|"; y; l")";);

let :Blob $"&&"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"&&"; y; l")";);
let :Blob $"&&"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"&&"; y; l")";);

let :Blob $"||"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"||"; y; l")";);
let :Blob $"||"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"||"; y; l")";);

let :Blob $"<<"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"<<"; y; l")";);
let :Blob $"<<"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"<<"; y; l")";);

let :Blob $">>"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l">>"; y; l")";);
let :Blob $">>"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l">>"; y; l")";);

let :Blob $"=="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"=="; y; l")";);
let :Blob $"=="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"=="; y; l")";);

let :Blob $"!="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"!="; y; l")";);
let :Blob $"!="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"!="; y; l")";);

let :Blob $"<="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"<="; y; l")";);
let :Blob $"<="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"<="; y; l")";);

let :Blob $">="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l">="; y; l")";);
let :Blob $">="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l">="; y; l")";);

let :Blob $"<"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"<"; y; l")";);
let :Blob $"<"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"<"; y; l")";);

let :Blob $">"(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l">"; y; l")";);
let :Blob $">"(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l">"; y; l")";);

let :Blob $"prefix:+"(x: C<"uint8_t">): C<"uint8_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"int8_t">): C<"int8_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"uint16_t">): C<"uint16_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"int16_t">): C<"int16_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"uint32_t">): C<"uint32_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"int32_t">): C<"int32_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"uint64_t">): C<"uint64_t"> = (l"(+"; x; l")";);
let :Blob $"prefix:+"(x: C<"int64_t">): C<"int64_t"> = (l"(+"; x; l")";);

let :Blob $"prefix:-"(x: C<"uint8_t">): C<"uint8_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"int8_t">): C<"int8_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"uint16_t">): C<"uint16_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"int16_t">): C<"int16_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"uint32_t">): C<"uint32_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"int32_t">): C<"int32_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"uint64_t">): C<"uint64_t"> = (l"(-"; x; l")";);
let :Blob $"prefix:-"(x: C<"int64_t">): C<"int64_t"> = (l"(-"; x; l")";);

let :Blob $"prefix:++"(x: C<"uint8_t">): C<"uint8_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"int8_t">): C<"int8_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"uint16_t">): C<"uint16_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"int16_t">): C<"int16_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"uint32_t">): C<"uint32_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"int32_t">): C<"int32_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"uint64_t">): C<"uint64_t"> = (l"(++"; x; l")";);
let :Blob $"prefix:++"(x: C<"int64_t">): C<"int64_t"> = (l"(++"; x; l")";);

let :Blob $"prefix:--"(x: C<"uint8_t">): C<"uint8_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"int8_t">): C<"int8_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"uint16_t">): C<"uint16_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"int16_t">): C<"int16_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"uint32_t">): C<"uint32_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"int32_t">): C<"int32_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"uint64_t">): C<"uint64_t"> = (l"(--"; x; l")";);
let :Blob $"prefix:--"(x: C<"int64_t">): C<"int64_t"> = (l"(--"; x; l")";);

let :Blob $"postfix:++"(x: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"int8_t">): C<"int8_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"int16_t">): C<"int16_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"int32_t">): C<"int32_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"++)";);
let :Blob $"postfix:++"(x: C<"int64_t">): C<"int64_t"> = (l"("; x; l"++)";);

let :Blob $"postfix:--"(x: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"int8_t">): C<"int8_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"int16_t">): C<"int16_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"int32_t">): C<"int32_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"--)";);
let :Blob $"postfix:--"(x: C<"int64_t">): C<"int64_t"> = (l"("; x; l"--)";);

let :Blob $"prefix:!"(x: C<"uint8_t">): C<"uint8_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"int8_t">): C<"int8_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"uint16_t">): C<"uint16_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"int16_t">): C<"int16_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"uint32_t">): C<"uint32_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"int32_t">): C<"int32_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"uint64_t">): C<"uint64_t"> = (l"(!"; x; l")";);
let :Blob $"prefix:!"(x: C<"int64_t">): C<"int64_t"> = (l"(!"; x; l")";);

let :Blob $"prefix:~"(x: C<"uint8_t">): C<"uint8_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"int8_t">): C<"int8_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"uint16_t">): C<"uint16_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"int16_t">): C<"int16_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"uint32_t">): C<"uint32_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"int32_t">): C<"int32_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"uint64_t">): C<"uint64_t"> = (l"(~"; x; l")";);
let :Blob $"prefix:~"(x: C<"int64_t">): C<"int64_t"> = (l"(~"; x; l")";);

let :Blob $"*="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"*="; y; l")";);
let :Blob $"*="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"*="; y; l")";);

let :Blob $"/="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"/="; y; l")";);
let :Blob $"/="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"/="; y; l")";);

let :Blob $"%="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"%="; y; l")";);
let :Blob $"%="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"%="; y; l")";);

let :Blob $"+="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"+="; y; l")";);
let :Blob $"+="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"+="; y; l")";);

let :Blob $"-="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"-="; y; l")";);
let :Blob $"-="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"-="; y; l")";);

let :Blob $"~="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"~="; y; l")";);
let :Blob $"~="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"~="; y; l")";);

let :Blob $"&="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"&="; y; l")";);
let :Blob $"&="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"&="; y; l")";);

let :Blob $"|="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"|="; y; l")";);
let :Blob $"|="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"|="; y; l")";);

let :Blob $"^="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"^="; y; l")";);
let :Blob $"^="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"^="; y; l")";);

let :Blob $"<<="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l"<<="; y; l")";);
let :Blob $"<<="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l"<<="; y; l")";);

let :Blob $">>="(x: C<"uint8_t">, y: C<"uint8_t">): C<"uint8_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"int8_t">, y: C<"int8_t">): C<"int8_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"uint16_t">, y: C<"uint16_t">): C<"uint16_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"int16_t">, y: C<"int16_t">): C<"int16_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"uint32_t">, y: C<"uint32_t">): C<"uint32_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"int32_t">, y: C<"int32_t">): C<"int32_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"uint64_t">, y: C<"uint64_t">): C<"uint64_t"> = (l"("; x; l">>="; y; l")";);
let :Blob $">>="(x: C<"int64_t">, y: C<"int64_t">): C<"int64_t"> = (l"("; x; l">>="; y; l")";);

let :Blob $"="(x: C<x>, y: C<x>): C<x> = (l"("; x; l"="; y; l")";);
let :Blob $"[]"(x: C<x>[], y: C<"int64_t">): C<x> = (l"("; x; l"["; y; l"])";);
let :Blob $"prefix:*"(x: C<x>[]): C<x> = (l"(*"; x; l")";);
let :Blob $"prefix:&"(x: C<x>): C<x>[] = (l"(&"; x; l")";);
let :Blob $","(x: C<x>, y: C<y>): C<y> = (l"("; x; l","; y; l")";);
let :Blob $"?"(x: C<c>, y: C<x>, z: C<x>): C<x> = (l"("; x; l"?"; y; l":"; z; l")";);

let :Blob $"prefix:sizeof"(x: C<xt>): C<"uint32_t"> = (l"(sizeof "; x; l")";);
let :Blob $"prefix:sizeof"(x: Type<xt>): C<"uint32_t"> = (l"(sizeof("; type(xt); l"))";);
let :Blob $"prefix:alignof"(x: Type<xt>): C<"uint32_t"> = (l"(alignof("; type(xt); l"))";);

