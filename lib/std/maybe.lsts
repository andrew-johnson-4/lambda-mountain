
type Maybe<x> zero None = Some { content:x } | None;

let .get-or(m: Maybe<x>, default: x): x = (
   match m {
      Some{content=content} => content;
      None{} => default;
   }
);

let .get-or-panic(m: Maybe<x>): x = (
   match m {
      Some{content=content} => content;
   }
);

let .is-none(m: Maybe<x>): U64 = (
   match m {
      Some{} => false;
      None{} => true;
   }
);

let .is-some(m: Maybe<x>): U64 = (
   match m {
      Some{} => true;
      None{} => false;
   }
);

let cmp(l: Maybe<x>, r: Maybe<x>): Ord = (
   if l.discriminator-case-tag != r.discriminator-case-tag then cmp(l.discriminator-case-tag, r.discriminator-case-tag)
   else if l.is-some then cmp(l.get-or-panic, r.get-or-panic)
   else Equal()
);

let to-smart-string(l: Maybe<x>): String = (
   match l {
      Some{content=content} => "Some{\{content}}";
      _ => "None";
   }
);
