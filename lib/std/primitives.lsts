
# TODO remove after porting to new C frontend
type "C_regex__t_*_" implies C<"regex_t">[];
type "C_char_*" implies C<"char">[];
type "C_size__t_" implies C<"size_t">;
type "C_regmatch__t_*" implies C<"regmatch_t">[];
type "C_int" implies C<"int32_t">;

declare-binop( mov, raw-type(datatype-rhs), raw-type(datatype-lhs), raw-type(Nil), ( l"({"; y; l"="; x; l";({});})"; ) );

declare-unop( branchtrue, raw-type(Nil), raw-type(BranchConditional), l"1" );
declare-unop( branchfalse, raw-type(Nil), raw-type(BranchConditional), l"0" );

declare-unop( into-branch-conditional, raw-type(BranchConditional), raw-type(BranchConditional), x );

declare-unop( $"cdecl::return", raw-type(Any), raw-type(Nil), (l"return "; x; l";";) );
declare-unop( $"cdecl::return", raw-type(Nil), raw-type(Nil), (x; l";";) );

declare-unop( $"primitive::field-get", raw-type(base-type), raw-type(field-type), ( l"("; x; l"."; mangle(field-name : L); l")"; ) );
declare-binop( $"primitive::field-set", raw-type(base-type), raw-type(field-type), raw-type(Nil), ( l"("; x; l"."; mangle(field-name : L); l"="; y; l")"; ) );

declare-unop( $"primitive::field-get-indirect", raw-type(base-type[]), raw-type(field-type), ( l"("; x; l"->"; mangle(field-name : L); l")"; ) );
declare-binop( $"primitive::field-set-indirect", raw-type(base-type[]), raw-type(field-type), raw-type(Nil), ( l"("; x; l"->"; mangle(field-name : L); l"="; y; l")"; ) );
