
type HashtableIs<k,v> = { occupied:U64, capacity:U64, contents:Tuple<k,v>[] };
type HashtableEq<k,v> = HashtableEq { occupied: U64, capacity: U64, contents: Tuple<k,v>[] }
                       | HashtableEqEOF;

let .lookup(table: HashtableEq<k,v>, key: k, default: v): v = (
   let capacity = (table as Tag::HashtableEq).capacity;
   if capacity > 0_u64 {
      let contents = (table as Tag::HashtableEq).contents;
      let replacing = false;
      let ki = deep-hash(key) % capacity;
      let old-kv = contents[ki];
      if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
      while mem-is-non-zero(old-kv) && not(replacing) {
         ki = (ki + 1_u64) % capacity;
         old-kv = contents[ki];
         if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
      };
      if replacing { default = old-kv.second; };
   };
   default
);

let .has(table: HashtableEq<k,v>, key: k): U64 = (
   let capacity = (table as Tag::HashtableEq).capacity;
   let replacing = false;
   if capacity > 0_u64 {
      let contents = (table as Tag::HashtableEq).contents;
      let ki = deep-hash(key) % capacity;
      let old-kv = contents[ki];
      if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
      while mem-is-non-zero(old-kv) && not(replacing) {
         ki = (ki + 1_u64) % capacity;
         old-kv = contents[ki];
         if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
      };
   };
   replacing
);

let .bind(table: HashtableEq<k,v>, key: k, value: v): HashtableEq<k,v> = (
   if is(table, (HashtableEqEOF : HashtableEq<k,v>)) {
      table = HashtableEq( 0_u64, 0_u64, (0_u64 as Tuple<k,v>[]) );
   };
   let occupied = (table as Tag::HashtableEq).occupied;
   let capacity = (table as Tag::HashtableEq).capacity;
   let contents = (table as Tag::HashtableEq).contents;
   if occupied * 3 >= capacity {
      let new-capacity = max( 1000_u64, occupied * 30_u64 );
      let new-sizeof = sizeof(Tuple<k,v>) * new-capacity;
      let new-contents = malloc(new-sizeof) as Tuple<k,v>[]; 
      memset( new-contents, 0_u32, new-sizeof );
      let old-i = 0_u64;
      while old-i < capacity {
         let old-kv = contents[old-i];
         if mem-is-non-zero(old-kv) {
             new-contents.bind-eq( new-capacity, old-kv.first, old-kv.second );
         };
         old-i = old-i + 1_u64;
      };
      contents = new-contents;
      capacity = new-capacity;
   };
   let replacing = contents.bind-eq( capacity, key, value );
   if not(replacing) { occupied = occupied + 1_u64; };
   HashtableEq( occupied, capacity, contents )
);

let .bind-eq(contents: Tuple<k,v>[], capacity: U64, key: k, value: v): U64 = (
   let replacing = false;
   let ki = deep-hash(key) % capacity;
   let old-kv = contents[ki];
   if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
   while mem-is-non-zero(old-kv) && not(replacing) {
      ki = (ki + 1_u64) % capacity;
      old-kv = contents[ki];
      if mem-is-non-zero(old-kv) && old-kv.first==key { replacing = true; };
   };
   contents[ki] = Tuple ( key, value );
   replacing
);

let non-zero(self: HashtableEq<k,v>): U64 = (
   match self {
      HashtableEqEOF {} => ( 0 );
      _ => ( 1 );
   }
);
