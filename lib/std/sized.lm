
## Jenkins One at a Time Hash
hash := λ(: key t). (: (
   (let i 0_u64)
   (let hash 0_u64)
   (while (<( i (/( (sizeof t) 8_u64 )) )) (
      (set hash (+( hash ([]( (as (& key) U64[]) i )) )))
      (set i (+( i 1_u64 )))
      (set hash (+( hash (<<( hash 10_u64 )) )))
      (set hash (^( hash (>>( hash 6_u64 )) )))
   ))
   (set hash (+( hash (<<( hash 3_u64 )) )))
   (set hash (^( hash (>>( hash 11_u64 )) )))
   (set hash (+( hash (<<( hash 15_u64 )) )))
   hash
) U64);

is := λ(: l t)(: r t). (: (
   (let i 0_u64)
   (let return 1_u64)
   (while (<( i (sizeof t) )) (
      (let li ([]( (as (& l) U8[]) i )))
      (let ri ([]( (as (& r) U8[]) i )))
      (if (==( li ri )) () (set return 0_u64))
      (set i (+( i 1_u64 )))
   ))
   return
) U64);

mem-is-non-zero := λ(: v t). (: (
   (let i 0_u64)
   (let r 0_u64)
   (while (<( i (sizeof t) )) (
      (if (!=( ([]( (as (& v) U8[]) i )) 0_u8 )) (
         (set r 1_u64)
      ) ())
      (set i (+( i 1_u64 )))
   ))
   r
) U64);
