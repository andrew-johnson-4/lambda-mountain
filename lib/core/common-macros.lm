
macro ( ('macro::define-zero (base-type constructor con-tag)) ) (
   non-zero := Î»(: t base-type). (: (
      (!=( (.discriminator-case-tag t) (.discriminator-case-tag(as t con-tag)) ))
   ) U64);
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (set (uuid m) 1_u8)
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
                        (set (uuid m) 1_u8)
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x5-key x5 )) ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
                        (if (match-pats-arm( (open(x5-key( (as (uuid v) lt) ))) x5 ))
                           (set (uuid m) 1_u8)
                           ()
                        )
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

