
macro ( ('macro::define-zero (base-type constructor con-tag)) ) (
   non-zero := Î»(: t base-type). (: (
      (!=( (.discriminator-case-tag t) (.discriminator-case-tag(as t con-tag)) ))
   ) U64);
);

macro ('match-pats( term () remainder )) (
   remainder
);

macro ('match-pats( term (ps (lhs rhs)) remainder )) (
   (match-pats( term ps
      (scope(if (match-pats-arm( term lhs )) rhs remainder))
   ))
);

macro ('match-pats-arm( term (:Variable: v) )) (
   ( (let v term) (branchtrue()) )
);

macro ('match-pats-arm( term ('@( v more )) )) (
   ( (let v term) (match-pats-arm( v more )) )
);

macro ('match-pats-arm( term :Any: )) (
   (branchtrue())
);

macro ('match-pats-arm( term (:Literal: l) )) (
   ( (let (uuid v) term) (==( (uuid v) l )) )
);

macro ('match-pats-arm( term (:Tag: l lt) )) (
   ( (let (uuid v) term) (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) )) )
);

macro ('match-pats-arm( term ('macro::lhs-head( x rest )) )) (
   ( (let (uuid v) term) (
      (if (.has-head( (uuid v) )) (
         (if (match-pats-arm( (head (uuid v)) x ))
             (match-pats-arm( (tail (uuid v)) rest ))
             (branchfalse()))
      ) (branchfalse()))
   ))
);

macro ('match-pats-arm( term ('macro::lhs-prefix-or-suffix( (:Literal: l) rest )) )) (
   ( (let (uuid v) term) (
      (if (.has-prefix( (uuid v) l )) (
         (match-pats-arm( (.remove-prefix( (uuid v) l )) rest ))
      ) (branchfalse()))
   ))
);

macro ('match-pats-arm( term ('macro::lhs-prefix-or-suffix( rest (:Literal: l) )) )) (
   ( (let (uuid v) term) (
      (if (.has-suffix( (uuid v) l )) (
         (match-pats-arm( (.remove-suffix( (uuid v) l )) rest ))
      ) (branchfalse()))
   ))
);

macro ('match-pats-arm( term ('macro::lhs-prefix-or-suffix( rest ('macro::lhs-bind( (:Variable: b) (:Literal: l) )) )) )) (
   ( (let (uuid v) term) (
      (if (.has-suffix( (uuid v) l )) (
         (let b (.remove-suffix( (uuid v) l )))
         (match-pats-arm( ([:]( (uuid v) 0_i64 (.length b) )) rest ))
      ) (branchfalse()))
   ))
);

macro ('match-pats-arm( term ('macro::lhs-prefix-or-suffix( ('macro::lhs-bind( (:Variable: b) (:Literal: l) )) rest )) )) (
   ( (let (uuid v) term) (
      (if (.has-prefix( (uuid v) l )) (
         (let b (.remove-prefix( (uuid v) l )))
         (match-pats-arm( ([:]( (uuid v) (.length b) minimum-I64 )) rest ))
      ) (branchfalse()))
   ))
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (set (uuid m) 1_u8)
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x2 x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(.2( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x3 x2 x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(.2( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(.3( (as (uuid v) lt) ))) x3 ))
                     (set (uuid m) 1_u8)
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x4 x3 x2 x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(.2( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(.3( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(.4( (as (uuid v) lt) ))) x4 ))
                        (set (uuid m) 1_u8)
                        () 
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x5 x4 x3 x2 x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(.2( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(.3( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(.4( (as (uuid v) lt) ))) x4 ))
                        (if (match-pats-arm( (open(.5( (as (uuid v) lt) ))) x5 ))
                           (set (uuid m) 1_u8)
                           ()
                        )
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( x6 x5 x4 x3 x2 x1 )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(.1( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(.2( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(.3( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(.4( (as (uuid v) lt) ))) x4 ))
                        (if (match-pats-arm( (open(.5( (as (uuid v) lt) ))) x5 ))
                           (if (match-pats-arm( (open(.6( (as (uuid v) lt) ))) x6 ))
                              (set (uuid m) 1_u8)
                              ()
                           )
                           ()
                        )
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ( (:Tag: l lt) () ) )) (
   ( (let (uuid v) term) (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) )) )
);

macro ('match-pats-arm( term ((:Tag: l lt) ('macro::bind-field-by-key( x1-key x1 )) ) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (set (uuid m) 1_u8)
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) ) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
              (set (uuid m) 1_u8)
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key ('macro::bind-raw x2) )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (raw(x2-key( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key ('macro::bind-raw x2) )) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (raw(x2-key( (as (uuid v) lt) ))) x2 ))
                  (set (uuid m) 1_u8)
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (set (uuid m) 1_u8)
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
                        (set (uuid m) 1_u8)
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x5-key x5 )) ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
   (
      (let (uuid v) term)
      (let (uuid m) 0_u8)
      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
                        (if (match-pats-arm( (open(x5-key( (as (uuid v) lt) ))) x5 ))
                           (set (uuid m) 1_u8)
                           ()
                        )
                        ()
                     )
                     ()
                  )
                  ()
              )
              ()
          )
          ()
      )
      (==( (uuid m) 1_u8 ))
   )
);

