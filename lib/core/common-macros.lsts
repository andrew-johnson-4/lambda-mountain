
type ReservedWord suffix _r;

typed macro macro::let(lhs: lazy, rhs: lazy): lazy = (
   (fn(lhs) = ()) (rhs)
);

typed macro macro::set(lhs: lazy, rhs: lazy): lazy = (
   mov(rhs, lhs)
);

typed macro macro::set(base index: macro::lhs-index, rhs: lazy): lazy = (
   $"set[]"( base, index, rhs )
);

typed macro macro::set(base field: macro::lhs-field, rhs: lazy): lazy = (
   macro::concat($"set.", field) (base, rhs)
);

typed macro macro::lhs-as-rhs(v: macro::variable): lazy = (
   v
);

typed macro macro::lhs-as-rhs(base: macro::lhs-address-of): lazy = (
   &v
);

typed macro macro::lhs-address-of(base: lazy): lazy = (
   base
);

typed macro macro::lhs-field(base: lazy, field: lazy): lazy = (
   base; field
);

typed macro macro::lhs-as-rhs(base field: macro::lhs-index): lazy = (
   macro::concat(l".", field)(base)
);

typed macro macro::lhs-index(base: lazy, index: lazy): lazy = (
   base; index
);

typed macro macro::lhs-index(base field: macro::lhs-field, index: lazy): lazy = (
   macro::concat($".", field)(base); index
);

typed macro macro::while(cond: lazy, body: lazy): lazy = (
   primitive::while( body as Nil, into-branch-conditional(cond) )
);

typed macro macro::match(t: lazy, ps: lazy): lazy = (
   scope(
      let uuid(term) = open(t);
      macro::match-pats( uuid(term), ps );
   )
);

typed macro macro::bind-raw(t: lazy): lazy = (t);

typed macro macro::match(t: macro::bind-raw, ps: lazy): lazy = (
   scope(
      let uuid(term) = t;
      macro::match-pats( uuid(term), ps );
   )
);

typed macro macro::match-case(lhs: lazy, rhs: lazy, remainder: lazy): lazy = (
   lhs; rhs; remainder
);

typed macro macro::match-pats(term: lazy, remainder: lazy): lazy = (
   remainder
);

typed macro macro::match-pats(term: lazy, lhs rhs remainder: macro::match-case): lazy = (
   scope(if macro::match-arm(lhs,term) then rhs else macro::match-pats(term,remainder))
);

typed macro macro::match-arm(v: macro::variable, term: lazy): lazy = (
   (let v = term; true)
);

typed macro macro::match-arm(v: macro::underscore, term: lazy): lazy = (
   true
);

typed macro macro::match-arm(c: macro::constant, term: lazy): lazy = (
   (c == term)
);

typed macro macro::match-arm(prefix rest: macro::lhs-prefix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-prefix(prefix))
           (macro::match-arm(rest, uuid(v).remove-prefix(prefix)))
           (false)
   )
);

typed macro macro::match-arm(suffix rest: macro::lhs-suffix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-suffix(suffix))
           (macro::match-arm(rest, uuid(v).remove-suffix(suffix)))
           (false)
   )
);

typed macro macro::bind(lhs: macro::let-name, rhs: lazy): lazy = (
   (macro::let( lhs, rhs ))
);

typed macro macro::bind(lhs: macro::set-name, rhs: lazy): lazy = (
   (mov( rhs, lhs ))
);

typed macro macro::bind(lhs: macro::underscore, rhs: lazy): lazy = (
   ()
);

typed macro macro::let-name(name: lazy): lazy = (name);
typed macro macro::set-name(name: lazy): lazy = (name);

typed macro macro::let-bind(rest: lazy, bind: lazy): lazy = (rest; macro::let-name(bind));
typed macro macro::set-bind(rest: lazy, bind: lazy): lazy = (rest; macro::set-name(bind));
typed macro macro::let-bind(rest: lazy, bind: macro::underscore): lazy = (rest; _);
typed macro macro::set-bind(rest: lazy, bind: macro::underscore): lazy = (rest; _);

typed macro macro::lhs-prefix(prefix: lazy, rest: lazy): lazy = (prefix; rest; _);
typed macro macro::lhs-suffix(suffix: lazy, rest: lazy): lazy = (suffix; rest; _);

typed macro macro::lhs-prefix(lhs bind: macro::set-bind, rest: lazy): lazy = (lhs; rest; bind);
typed macro macro::lhs-prefix(lhs bind: macro::let-bind, rest: lazy): lazy = (lhs; rest; bind);
typed macro macro::lhs-suffix(lhs bind: macro::set-bind, rest: lazy): lazy = (lhs; rest; bind);
typed macro macro::lhs-suffix(lhs bind: macro::let-bind, rest: lazy): lazy = (lhs; rest; bind);

typed macro macro::match-arm(prefix rest bind: macro::lhs-prefix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-prefix(prefix))
           (
              macro::bind( bind, uuid(v).get-prefix(prefix) );
              (macro::match-arm(rest, uuid(v).remove-prefix(prefix)))
           )
           (false)
   )
);

typed macro macro::match-arm(suffix rest bind: macro::lhs-suffix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-suffix(suffix))
           (
              macro::bind( bind, uuid(v).get-suffix(suffix) );
              (macro::match-arm(rest, uuid(v).remove-suffix(suffix)))
           )
           (false)
   )
);

typed macro macro::lhs-guard(base: lazy, post-condition: lazy): lazy = (base; post-condition);

typed macro macro::match-arm(cond post-condition: macro::lhs-guard, term: lazy): lazy = (
   (
      $"if"(macro::match-arm(cond, term))
           (post-condition)
           (false)
   )
);

typed macro macro::lhs-bound-prefix(bind: macro::variable, prefix: lazy, rest: lazy): lazy = (bind; prefix; rest);
typed macro macro::lhs-bound-suffix(bind: macro::variable, suffix: lazy, rest: lazy): lazy = (bind; suffix; rest);

typed macro macro::match-arm(bind prefix rest: macro::lhs-bound-prefix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-prefix(prefix))
           (
              let uuid(tail) = uuid(v).remove-prefix(prefix);
              let bind = uuid(v).remove-suffix(uuid(tail));
              macro::match-arm(rest, uuid(tail))
           )
           (false)
   )
);

typed macro macro::match-arm(bind suffix rest: macro::lhs-bound-suffix, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-suffix(suffix))
           (
              let uuid(tail) = uuid(v).remove-suffix(suffix);
              let bind = uuid(v).remove-prefix(uuid(tail));
              macro::match-arm(rest, uuid(tail))
           )
           (false)
   )
);

typed macro macro::lhs-head(head-lhs: lazy, tail-lhs: lazy): lazy = (head-lhs; tail-lhs; _);
typed macro macro::lhs-head(lhs bind: macro::let-bind, tail-lhs: lazy): lazy = (head-lhs; tail-lhs; bind);
typed macro macro::lhs-head(lhs bind: macro::set-bind, tail-lhs: lazy): lazy = (head-lhs; tail-lhs; bind);

typed macro macro::match-arm(head-lhs tail-lhs bind: macro::lhs-head, term: lazy): lazy = (
   (let uuid(v) = term;
      $"if"(uuid(v).has-head)
           (
              macro::let(uuid(h), head(uuid(v)));
              macro::bind( bind, uuid(h) );
              $"if"(macro::match-arm( head-lhs, uuid(h) ))
                   (macro::match-arm( tail-lhs, tail(uuid(v)) ))
                   (false)
           )
           (false)
   )
);

typed macro macro::lhs-tail(tail-lhs: lazy): lazy = (tail-lhs; _);
typed macro macro::lhs-tail(tail-lhs bind: macro::let-bind): lazy = (tail-lhs; bind);
typed macro macro::lhs-tail(tail-lhs bind: macro::set-bind): lazy = (tail-lhs; bind);

typed macro macro::match-arm(tail-lhs bind: macro::lhs-tail, term: lazy): lazy = (
   (let uuid(v) = term;
    macro::bind( bind, uuid(v) );
    not(uuid(v).has-head)
   )
);

typed macro macro::match-arm(case rest: macro::lhs-struct, term: lazy): lazy = (
   (let uuid(v) = term; macro::lhs-struct-post(case, rest, term))
);

typed macro macro::lhs-struct-field(bind: lazy, field: lazy, val: lazy): lazy = (bind; field; val);
typed macro macro::lhs-raw-struct-field(bind: lazy, field: lazy, val: lazy): lazy = (bind; field; val);

typed macro macro::lhs-struct(case: lazy, rest: lazy): lazy = (case; rest);

typed macro macro::lhs-struct-post(tag-name tag-ordinal tag-type: macro::tag, rest: lazy, term: lazy): lazy = (
   $"if"(term.discriminator-case-tag == (term as tag-type).discriminator-case-tag)
        (macro::match-arm( rest, $"as"(term, tag-type) ))
        (false)
);

typed macro macro::lhs-struct-post(bind field val: macro::lhs-struct-field, rest: rest, term: lazy): lazy = (
   (
      let uuid(b) = open(macro::concat($".", field)(term));
      macro::bind( bind, uuid(b) );
      $"if"(macro::match-arm( val, uuid(b) ))
           (macro::match-arm( rest, term ))
           (false)
   )
);

typed macro macro::lhs-struct-post(bind field val: macro::lhs-raw-struct-field, rest: rest, term: lazy): lazy = (
   (
      let uuid(b) = macro::concat($".", field)(term);
      macro::bind( bind, uuid(b) );
      $"if"(macro::match-arm( val, open(uuid(b)) ))
           (macro::match-arm( rest, term ))
           (false)
   )
);

deprecated macro ( rl"let"(x)(y) ) ( (fn(x) = ())(y) );

deprecated macro ( rl"set"(lhs)(rhs) ) ( mov(rhs,lhs) );

deprecated macro ( rl"set"( rl"macro::lhs-field"( base, field ), rhs ) )
                 ( $"macro::concat"( $"set.", field ) (base, rhs) );

deprecated macro ( rl"set"( rl"macro::lhs-index"( base, index ), rhs ) )
                 ( $"set[]"( $"macro::lhs-as-rhs"(base), index, rhs ) );

#macro ( ('macro::define-zero (base-type constructor con-tag)) ) (
#   non-zero := Î»(: t base-type). (: (
#      (!=( (.discriminator-case-tag t) (.discriminator-case-tag(as t con-tag)) ))
#   ) U64);
#);

deprecated macro ( rl"macro::lhs-as-rhs"( rl":Variable", v ) )
                 ( v );

deprecated macro ( rl"macro::lhs-as-rhs"( rl"&", v ) )
                 ( & v );

deprecated macro ( rl"macro::lhs-as-rhs"( rl"macro::lhs-field"( base, field ) ) )
                 ( $"macro::concat"( $".", field ) ( base ) );

deprecated macro ( rl"while"(cond)(body) )
      ( $"primitive::while"( body as Nil, into-branch-conditional(cond) ) );

deprecated macro ( rl"for-each"(item(rl"in")(iterable))(loop) ) (
   let uuid(iter-term) = iterable.unsafe-iter;
   let uuid(continue-iter) = true;
   while uuid(continue-iter) {
      $"match"( (&(uuid(iter-term))).next )
      (
         ();
         (Some(item); loop());
         (None(); uuid(continue-iter) = false);
      );
   }
);

deprecated macro ( rl"assert"(c) ) (
   $"if"( not(c) )
        ( print(c"Assertion Failed At"); print(p(rl":Location:") : Constant+Literal+CString); exit(1_u64); )
        ()
);

deprecated macro (rl"match"(t)(ps)) (scope(
   let uuid(term) = open(t);
   match-pats( uuid(term), ps, fail("Pattern Match Failure \{p(rl\":Location:\") : Constant+Literal+CString}") );
));

deprecated macro (rl"match"(rl"macro::bind-raw"(t))(ps)) (scope(
   let uuid(term) = t;
   match-pats( uuid(term), ps, fail("Pattern Match Failure \{p(rl\":Location:\") : Constant+Literal+CString}") );
));

deprecated macro (rl"match"(
                     rl"macro::bind-raw"( rl":Field:"(f), t ),
                     ps
                 )) (scope(
   let uuid(term) = f($"raw"(t));
   match-pats( uuid(term), ps, fail("Pattern Match Failure \{p(rl\":Location:\") : Constant+Literal+CString}") );
));

deprecated macro (rl"match-pats"(term,(),remainder))
                 (remainder);

deprecated macro (rl"match-pats"(term,ps(lhs,rhs),remainder)) (
   match-pats(term,ps,
      scope($"if"(match-pats-arm(term,lhs))(rhs)(remainder))
   )
);

deprecated macro (rl"match-pats-arm"(term,rl":Variable:"(v))) (
   ($"let"(v)(term); branchtrue())
);

deprecated macro (rl"match-pats-arm"(term,rl"@"(v,more))) (
   ($"let"(v)(term); match-pats-arm(v,more))
);

deprecated macro (rl"match-pats-arm"(term,rl":Any:")) (
   branchtrue()
);

deprecated macro (rl"match-pats-arm"(term,rl":Literal:"(l))) (
   ( $"let"(uuid(v))(term); uuid(v)==l )
);

deprecated macro (rl"match-pats-arm"(term,rl":Tag:"(l)(lt))) (
   ( $"let"(uuid(v))(term); uuid(v).discriminator-case-tag==(uuid(v) as lt).discriminator-case-tag )
);

deprecated macro (rl"match-pats-arm"(term,rl"macro::lhs-head"(x,rest))) (
   $"let"(uuid(v))(term);
   $"if"(uuid(v).has-head)
        ($"if"(match-pats-arm(head(uuid(v)),x))
              (match-pats-arm(tail(uuid(v)),rest))
              (branchfalse())
        )
        (branchfalse())
);

deprecated macro (rl"match-pats-arm"(term,rl"macro::lhs-prefix-or-suffix"( rl":Literal:"(l), rest ))) (
   $"let"(uuid(v))(term);
   $"if"(uuid(v).has-prefix(l))
        (match-pats-arm(uuid(v).remove-prefix(l),rest))
        (branchfalse())
);

deprecated macro (rl"match-pats-arm"(term,rl"macro::lhs-prefix-or-suffix"( rest, rl":Literal:"(l) ))) (
   $"let"(uuid(v))(term);
   $"if"(uuid(v).has-suffix(l))
        (match-pats-arm(uuid(v).remove-suffix(l),rest))
        (branchfalse())
);

deprecated macro (rl"match-pats-arm"(term,rl"macro::lhs-prefix-or-suffix"( rl"macro::lhs-bind"(rl":Variable:"(b), rl":Literal:"(l)), rest ))) (
   $"let"(uuid(v))(term);
   $"if"(uuid(v).has-prefix(l)) (
           $"let"(b)(uuid(v).remove-prefix(l));
           (match-pats-arm(uuid(v)[b.length:],rest))
        ) (branchfalse())
);


deprecated macro (rl"match-pats-arm"(term,rl"macro::lhs-prefix-or-suffix"( rest, rl"macro::lhs-bind"(rl":Variable:"(b), rl":Literal:"(l)) ))) (
   $"let"(uuid(v))(term);
   $"if"(uuid(v).has-suffix(l)) (
           $"let"(b)(uuid(v).remove-suffix(l));
           (match-pats-arm(uuid(v)[:b.length],rest))
        ) (branchfalse())
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x1) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
      $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 ))
         (uuid(m) = true)
         ()
   ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x2(x1)) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
           $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 )) (
              $"if"(match-pats-arm( open($".2"(uuid(v) as lt)), x2 ))
                   (uuid(m) = true)
                   ()
           ) ()
        ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x3(x2)(x1)) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
           $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 )) (
              $"if"(match-pats-arm( open($".2"(uuid(v) as lt)), x2 )) (
                 $"if"(match-pats-arm( open($".3"(uuid(v) as lt)), x3 ))
                      (uuid(m) = true)
                      ()
              ) ()
           ) ()
        ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x4(x3)(x2)(x1)) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
           $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 )) (
              $"if"(match-pats-arm( open($".2"(uuid(v) as lt)), x2 )) (
                 $"if"(match-pats-arm( open($".3"(uuid(v) as lt)), x3 )) (
                    $"if"(match-pats-arm( open($".4"(uuid(v) as lt)), x4 ))
                         (uuid(m) = true)
                         ()
                 ) ()
              ) ()
           ) ()
        ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x5(x4)(x3)(x2)(x1)) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
           $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 )) (
              $"if"(match-pats-arm( open($".2"(uuid(v) as lt)), x2 )) (
                 $"if"(match-pats-arm( open($".3"(uuid(v) as lt)), x3 )) (
                    $"if"(match-pats-arm( open($".4"(uuid(v) as lt)), x4 )) (
                       $"if"(match-pats-arm( open($".5"(uuid(v) as lt)), x5 ))
                            (uuid(m) = true)
                            ()
                    ) ()
                 ) ()
              ) ()
           ) ()
        ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)(x6(x5)(x4)(x3)(x2)(x1)) )) (
   let uuid(v) = term;
   let uuid(m) = false;
   $"if"( uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag ) (
           $"if"(match-pats-arm( open($".1"(uuid(v) as lt)), x1 )) (
              $"if"(match-pats-arm( open($".2"(uuid(v) as lt)), x2 )) (
                 $"if"(match-pats-arm( open($".3"(uuid(v) as lt)), x3 )) (
                    $"if"(match-pats-arm( open($".4"(uuid(v) as lt)), x4 )) (
                       $"if"(match-pats-arm( open($".5"(uuid(v) as lt)), x5 )) (
                          $"if"(match-pats-arm( open($".6"(uuid(v) as lt)), x6 ))
                               (uuid(m) = true)
                               ()
                       ) ()
                    ) ()
                 ) ()
              ) ()
           ) ()
        ) ();
   uuid(m);
);

deprecated macro (rl"match-pats-arm"( term, rl":Tag:"(l)(lt)() )) (
   let uuid(v) = term;
   uuid(v).discriminator-case-tag == (uuid(v) as lt).discriminator-case-tag
);

#macro ('match-pats-arm( term ((:Tag: l lt) ('macro::bind-field-by-key( x1-key x1 )) ) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (set (uuid m) 1_u8)
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) ) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
#              (set (uuid m) 1_u8)
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (set (uuid m) 1_u8)
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (set (uuid m) 1_u8)
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key ('macro::bind-raw x2) )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (raw(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (set (uuid m) 1_u8)
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x2-key ('macro::bind-raw x2) )) ('macro::bind-field-by-key( x1-key ('macro::bind-raw x1) )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (raw(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (raw(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (set (uuid m) 1_u8)
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
#                     (set (uuid m) 1_u8)
#                     ()
#                  )
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
#                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
#                        (set (uuid m) 1_u8)
#                        ()
#                     )
#                     ()
#                  )
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

#macro ('match-pats-arm( term ((:Tag: l lt) ( ('macro::bind-field-by-key( x5-key x5 )) ('macro::bind-field-by-key( x4-key x4 )) ('macro::bind-field-by-key( x3-key x3 )) ('macro::bind-field-by-key( x2-key x2 )) ('macro::bind-field-by-key( x1-key x1 )) )) )) (
#   (
#      (let (uuid v) term)
#      (let (uuid m) 0_u8)
#      (if (==( (.discriminator-case-tag( (uuid v) )) (.discriminator-case-tag(as (uuid v) lt)) ))
#          (if (match-pats-arm( (open(x1-key( (as (uuid v) lt) ))) x1 ))
#              (if (match-pats-arm( (open(x2-key( (as (uuid v) lt) ))) x2 ))
#                  (if (match-pats-arm( (open(x3-key( (as (uuid v) lt) ))) x3 ))
#                     (if (match-pats-arm( (open(x4-key( (as (uuid v) lt) ))) x4 ))
#                        (if (match-pats-arm( (open(x5-key( (as (uuid v) lt) ))) x5 ))
#                           (set (uuid m) 1_u8)
#                           ()
#                        )
#                        ()
#                     )
#                     ()
#                  )
#                  ()
#              )
#              ()
#          )
#          ()
#      )
#      (==( (uuid m) 1_u8 ))
#   )
#);

